OBJECT Codeunit 66 Purch - Calc Disc. By Type
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160531.930T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    TableNo="Purchase Line";
    OnRun=VAR
            PurchHeader@1000 : Record "Purchase Header";
            PurchLine@1001 : Record "Purchase Line";
          BEGIN
            PurchLine.COPY(Rec);

            if PurchHeader.GET("Document Type","Document No.") then begin
              ApplyDefaultInvoiceDiscount(0,PurchHeader);
              // on new order might be no line
              if GET(PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") then;
            end;
          END;

  }
  CODE
  {
    VAR
      InvDiscBaseAmountIsZeroErr@1000 : TextConst 'ENU=There is no amount that you can apply an invoice discount to.';
      InvDiscSetToZeroMsg@1001 : TextConst '@@@=%1 - Invoice discount amount, %2 Previous value of Invoice discount amount;ENU=The current %1 is %2.\\The value will be set to zero because the total has changed. Review the new total and then re-enter the %1.';
      AmountInvDiscErr@1002 : TextConst 'ENU=Manual %1 is not allowed.';

    [External]
    PROCEDURE ApplyDefaultInvoiceDiscount@5(InvoiceDiscountAmount@1000 : Decimal;VAR PurchHeader@1001 : Record "Purchase Header");
    VAR
      AutoFormatManagement@1004 : Codeunit AutoFormatManagement;
      PreviousInvoiceDiscountAmount@1003 : Decimal;
      ShowSetToZeroMessage@1002 : Boolean;
    BEGIN
      if not ShouldRedistributeInvoiceDiscountAmount(PurchHeader) then
        exit;

      if PurchHeader."Invoice Discount Calculation" = PurchHeader."Invoice Discount Calculation"::Amount then begin
        PreviousInvoiceDiscountAmount := PurchHeader."Invoice Discount Value";
        ShowSetToZeroMessage := (InvoiceDiscountAmount = 0) and (PurchHeader."Invoice Discount Value" <> 0);
        ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,PurchHeader);
        if ShowSetToZeroMessage then
          MESSAGE(
            STRSUBSTNO(
              InvDiscSetToZeroMsg,
              PurchHeader.FIELDCAPTION("Invoice Discount Amount"),
              FORMAT(PreviousInvoiceDiscountAmount,0,AutoFormatManagement.AutoFormatTranslate(1,PurchHeader."Currency Code"))));
      end else
        ApplyInvDiscBasedOnPct(PurchHeader);

      ResetRecalculateInvoiceDisc(PurchHeader);
    END;

    [External]
    PROCEDURE ApplyInvDiscBasedOnAmt@1(InvoiceDiscountAmount@1000 : Decimal;VAR PurchHeader@1004 : Record "Purchase Header");
    VAR
      TempVATAmountLine@1001 : TEMPORARY Record "VAT Amount Line";
      PurchLine@1002 : Record "Purchase Line";
      InvDiscBaseAmount@1003 : Decimal;
    BEGIN
      with PurchHeader do begin
        if not InvoiceDiscIsAllowed("Invoice Disc. Code") then
          ERROR(STRSUBSTNO(AmountInvDiscErr,FIELDCAPTION("Invoice Discount Amount")));

        PurchLine.SETRANGE("Document No.","No.");
        PurchLine.SETRANGE("Document Type","Document Type");

        PurchLine.CalcVATAmountLines(0,PurchHeader,PurchLine,TempVATAmountLine);

        InvDiscBaseAmount := TempVATAmountLine.GetTotalInvDiscBaseAmount(false,"Currency Code");

        if (InvDiscBaseAmount = 0) and (InvoiceDiscountAmount > 0) then
          ERROR(InvDiscBaseAmountIsZeroErr);

        TempVATAmountLine.SetInvoiceDiscountAmount(InvoiceDiscountAmount,"Currency Code",
          "Prices Including VAT","VAT Base Discount %");

        PurchLine.UpdateVATOnLines(0,PurchHeader,PurchLine,TempVATAmountLine);

        "Invoice Discount Calculation" := "Invoice Discount Calculation"::Amount;
        "Invoice Discount Value" := InvoiceDiscountAmount;

        MODIFY;

        ResetRecalculateInvoiceDisc(PurchHeader);
      end;
    END;

    LOCAL PROCEDURE ApplyInvDiscBasedOnPct@6(VAR PurchHeader@1002 : Record "Purchase Header");
    VAR
      PurchLine@1000 : Record "Purchase Line";
    BEGIN
      with PurchHeader do begin
        PurchLine.SETRANGE("Document No.","No.");
        PurchLine.SETRANGE("Document Type","Document Type");
        if PurchLine.FINDFIRST then begin
          CODEUNIT.RUN(CODEUNIT::"Purch.-Calc.Discount",PurchLine);
          GET("Document Type","No.");
        end;
      end;
    END;

    [External]
    PROCEDURE GetVendInvoiceDiscountPct@7(PurchLine@1001 : Record "Purchase Line") : Decimal;
    VAR
      PurchHeader@1000 : Record "Purchase Header";
      InvoiceDiscountValue@1002 : Decimal;
      AmountIncludingVATDiscountAllowed@1004 : Decimal;
      AmountDiscountAllowed@1003 : Decimal;
    BEGIN
      with PurchHeader do begin
        if not GET(PurchLine."Document Type",PurchLine."Document No.") then
          exit(0);

        CALCFIELDS("Invoice Discount Amount");
        if "Invoice Discount Amount" = 0 then
          exit(0);

        case "Invoice Discount Calculation" of
          "Invoice Discount Calculation"::"%":
            begin
              // Only if VendorInvDisc table is empty header is not updated
              if not VendorInvDiscRecExists("Invoice Disc. Code") then
                exit(0);

              exit("Invoice Discount Value");
            end;
          "Invoice Discount Calculation"::None,
          "Invoice Discount Calculation"::Amount:
            begin
              CalcAmountWithDiscountAllowed(PurchHeader,AmountIncludingVATDiscountAllowed,AmountDiscountAllowed);
              if AmountDiscountAllowed + InvoiceDiscountValue = 0 then
                exit(0);

              if "Invoice Discount Calculation" = "Invoice Discount Calculation"::None then
                InvoiceDiscountValue := "Invoice Discount Amount"
              else
                InvoiceDiscountValue := "Invoice Discount Value";

              if "Prices Including VAT" then
                exit(ROUND(InvoiceDiscountValue / (AmountIncludingVATDiscountAllowed + InvoiceDiscountValue) * 100,0.01));

              exit(ROUND(InvoiceDiscountValue / (AmountDiscountAllowed + InvoiceDiscountValue) * 100,0.01));
            end;
        end;
      end;

      exit(0);
    END;

    [External]
    PROCEDURE ShouldRedistributeInvoiceDiscountAmount@101(PurchHeader@1001 : Record "Purchase Header") : Boolean;
    VAR
      PurchPayablesSetup@1000 : Record "Purchases & Payables Setup";
      ApplicationAreaMgmtFacade@1002 : Codeunit "Application Area Mgmt. Facade";
    BEGIN
      PurchHeader.CALCFIELDS("Recalculate Invoice Disc.");

      if not PurchHeader."Recalculate Invoice Disc." then
        exit(false);

      if (PurchHeader."Invoice Discount Calculation" = PurchHeader."Invoice Discount Calculation"::Amount) and
         (PurchHeader."Invoice Discount Value" = 0)
      then
        exit(false);

      PurchPayablesSetup.GET;
      if (not ApplicationAreaMgmtFacade.IsFoundationEnabled and
          (not PurchPayablesSetup."Calc. Inv. Discount" and
           (PurchHeader."Invoice Discount Calculation" = PurchHeader."Invoice Discount Calculation"::None)))
      then
        exit(false);

      exit(true);
    END;

    [External]
    PROCEDURE ResetRecalculateInvoiceDisc@8(PurchHeader@1000 : Record "Purchase Header");
    VAR
      PurchLine@1001 : Record "Purchase Line";
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.MODIFYALL("Recalculate Invoice Disc.",false);

      OnAfterResetRecalculateInvoiceDisc(PurchHeader);
    END;

    LOCAL PROCEDURE VendorInvDiscRecExists@4(InvDiscCode@1000 : Code[20]) : Boolean;
    VAR
      VendorInvoiceDisc@1001 : Record "Vendor Invoice Disc.";
    BEGIN
      VendorInvoiceDisc.SETRANGE(Code,InvDiscCode);
      exit(not VendorInvoiceDisc.ISEMPTY);
    END;

    [External]
    PROCEDURE InvoiceDiscIsAllowed@2(InvDiscCode@1001 : Code[20]) : Boolean;
    VAR
      PurchasesPayablesSetup@1000 : Record "Purchases & Payables Setup";
      ApplicationAreaMgmtFacade@1002 : Codeunit "Application Area Mgmt. Facade";
    BEGIN
      PurchasesPayablesSetup.GET;
      exit((ApplicationAreaMgmtFacade.IsFoundationEnabled or not
            (PurchasesPayablesSetup."Calc. Inv. Discount" and VendorInvDiscRecExists(InvDiscCode))));
    END;

    LOCAL PROCEDURE CalcAmountWithDiscountAllowed@9(PurchHeader@1003 : Record "Purchase Header";VAR AmountIncludingVATDiscountAllowed@1000 : Decimal;VAR AmountDiscountAllowed@1001 : Decimal);
    VAR
      PurchLine@1002 : Record "Purchase Line";
    BEGIN
      with PurchLine do begin
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        SETRANGE("Allow Invoice Disc.",true);
        CALCSUMS(Amount,"Amount Including VAT");
        AmountIncludingVATDiscountAllowed := "Amount Including VAT";
        AmountDiscountAllowed := Amount;
      end;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterResetRecalculateInvoiceDisc@3(VAR PurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
    END;

    BEGIN
    END.
  }
}

