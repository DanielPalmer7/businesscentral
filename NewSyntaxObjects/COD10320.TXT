OBJECT Codeunit 10320 Exp. Launcher EFT
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160937.590T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    TableNo="EFT Export Workset";
    Permissions=TableData "Data Exch."=rimd;
    OnRun=BEGIN
            // EFTPaymentProcess(Rec);
          END;

  }
  CODE
  {
    VAR
      ExportEFTACH@1020001 : Codeunit "Export EFT (ACH)";
      InvalidExportFormatErr@1020003 : TextConst '@@@="%1=Bank account export format,%2=Bank account export format field caption,%3=Bank account table caption,%4=Bank account number";ENU=%1 is not a valid %2 in %3 %4.';
      ExportEFTRB@1020004 : Codeunit "Export EFT (RB)";
      ExportEFTCecoban@1020005 : Codeunit "Export EFT (Cecoban)";
      ExportEFTIAT@1020000 : Codeunit "Export EFT (IAT)";
      EFTExportCodeErr@1020006 : TextConst 'ENU=The EFT export code entered on the bank account does not work with the export format entered on the bank account.';

    PROCEDURE EFTPaymentProcess@2(VAR TempEFTExportWorkset@1015 : TEMPORARY Record "EFT Export Workset";VAR TempNameValueBuffer@1020004 : TEMPORARY Record "Name/Value Buffer";VAR FileManagementUnit@1020001 : Codeunit "File Management";VAR ZipFileName@1020000 : Text;VAR EFTValues@1020007 : Codeunit "EFT Values");
    VAR
      DataExch@1014 : Record "Data Exch.";
      DataExchDef@1013 : Record "Data Exch. Def";
      BankAccount@1011 : Record "Bank Account";
      BankExportImportSetup@1010 : Record "Bank Export/Import Setup";
      FileManagement@1020006 : Codeunit "File Management";
      ExpWritingEFT@1008 : Codeunit "Exp. Writing EFT";
      DataExchEntryCodeDetail@1006 : Integer;
      DataExchEntryCodeFooter@1005 : Integer;
      DataExchDefCode@1004 : Code[20];
      Filename@1003 : Text;
      HeaderArray@1002 : ARRAY [100] OF Integer;
      DetailArray@1001 : ARRAY [100] OF Integer;
      FooterArray@1000 : ARRAY [100] OF Integer;
      Filepath@1020002 : Text;
      ACHFileName@1020003 : Text;
    BEGIN
      TempEFTExportWorkset.FINDFIRST;

      BankAccount.GET(TempEFTExportWorkset."Bank Account No.");

      case BankAccount."Export Format" of
        BankAccount."Export Format"::US:
          ExpWritingEFT.PreCleanUpUSWorkTables;
        BankAccount."Export Format"::CA:
          ExpWritingEFT.PreCleanUpCAWorkTables;
        BankAccount."Export Format"::MX:
          ExpWritingEFT.PreCleanUpMXWorkTables;
      end;

      if TempEFTExportWorkset."Bank Payment Type" = TempEFTExportWorkset."Bank Payment Type"::"Electronic Payment-IAT" then
        BankExportImportSetup.SETRANGE(Code,BankAccount."EFT Export Code")
      else
        BankExportImportSetup.SETRANGE(Code,BankAccount."Payment Export Format");

      if BankExportImportSetup.FINDFIRST then begin
        DataExchDefCode := BankExportImportSetup."Data Exch. Def. Code";
        ACHFileName := BankAccount."Last E-Pay Export File Name";
        UpdateLastEPayExportFileName(BankAccount);
        Filepath := TempEFTExportWorkset.Pathname;
        Filename := FileManagement.ServerTempFileName('');

        ProcessHeaders(TempEFTExportWorkset,BankAccount,DataExchDefCode,HeaderArray,Filename,EFTValues);
        if EXISTS(Filename) then begin
          repeat
            ProcessDetails(TempEFTExportWorkset,BankAccount,DataExchDefCode,DataExchEntryCodeDetail,DetailArray,Filename,EFTValues);
          until TempEFTExportWorkset.NEXT = 0;
          TempEFTExportWorkset.FINDFIRST;
          ProcessFooters(TempEFTExportWorkset,BankAccount,DataExchDefCode,FooterArray,Filename,DataExchEntryCodeFooter,EFTValues);

          ExpWritingEFT.ExportEFT(DataExchEntryCodeDetail,DataExchEntryCodeFooter,Filepath,Filename,ACHFileName,
            FooterArray,TempNameValueBuffer,ZipFileName,FileManagementUnit);

          // This should only be called from a test codeunit, calling CreateExportFile MUST pass in a FALSE parameter
          DataExchDef.GET(DataExchDefCode);
          if DataExchDef."Ext. Data Handling Codeunit" > 0 then
            DataExch.GET(DataExchEntryCodeDetail);

          if DataExchDef."User Feedback Codeunit" > 0 then begin
            DataExch.GET(DataExchEntryCodeDetail);
            CODEUNIT.RUN(DataExchDef."User Feedback Codeunit",DataExch);
          end;
        end else
          ERROR(EFTExportCodeErr);
      end;

      // Clean up the work tables.
      ExpWritingEFT.CleanUpEFTWorkTables(HeaderArray,DetailArray,FooterArray);
    END;

    [Internal]
    LOCAL PROCEDURE ProcessHeaders@3(VAR TempEFTExportWorkset@1020000 : TEMPORARY Record "EFT Export Workset";VAR BankAccount@1006 : Record "Bank Account";DataExchDefCode@1001 : Code[20];VAR HeaderArray@1009 : ARRAY [100] OF Integer;Filename@1008 : Text;VAR EFTValues@1020001 : Codeunit "EFT Values");
    VAR
      DataExch@1002 : Record "Data Exch.";
      DataExchDef@1007 : Record "Data Exch. Def";
      DataExchLineDef@1018 : Record "Data Exch. Line Def";
      DataExchMapping@1004 : Record "Data Exch. Mapping";
      EFTExportMgt@1005 : Codeunit "EFT Export Mgt";
      HdrCount@1000 : Integer;
    BEGIN
      HdrCount := 0;
      DataExchLineDef.INIT;
      DataExchLineDef.SETRANGE("Data Exch. Def Code",DataExchDefCode);
      DataExchLineDef.SETRANGE("Line Type",DataExchLineDef."Line Type"::Header);
      if DataExchLineDef.FINDSET then begin
        repeat
          // Insert the Data Exchange Header records
          DataExch."Entry No." := 0;
          DataExch."Data Exch. Def Code" := DataExchDefCode;
          DataExch."Data Exch. Line Def Code" := DataExchLineDef.Code;
          DataExch.INSERT;
          COMMIT;

          HdrCount := HdrCount + 1;
          HeaderArray[HdrCount] := DataExch."Entry No.";

          // It is only here where we know the True DataExch."Entry No"..
          DataExchMapping.SETRANGE("Data Exch. Def Code",DataExchDefCode);
          DataExchMapping.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);
          DataExchMapping.FINDFIRST;

          // Populate the Header work tables
          EFTExportMgt.PrepareEFTHeader(DataExch,BankAccount."Bank Account No.",BankAccount."No.");

          if DataExchMapping."Pre-Mapping Codeunit" > 0 then
            CODEUNIT.RUN(DataExchMapping."Pre-Mapping Codeunit",DataExch);

          case BankAccount."Export Format" of
            BankAccount."Export Format"::US:
              if TempEFTExportWorkset."Bank Payment Type" = TempEFTExportWorkset."Bank Payment Type"::"Electronic Payment"
              then begin
                if HdrCount = 1 then
                  ExportEFTACH.StartExportFile(BankAccount."No.",'',DataExch."Entry No.")
                else
                  ExportEFTACH.StartExportBatch(TempEFTExportWorkset."Source Code",
                    TempEFTExportWorkset.UserSettleDate,DataExch."Entry No.");
                EFTValues.SetEFTFileCreated(true);
              end else
                if TempEFTExportWorkset."Bank Payment Type" = TempEFTExportWorkset."Bank Payment Type"::"Electronic Payment-IAT"
                then begin
                  if HdrCount = 1 then
                    ExportEFTIAT.StartExportFile(BankAccount."No.",'',DataExch."Entry No.",EFTValues)
                  else
                    ExportEFTIAT.StartExportBatch(TempEFTExportWorkset,TempEFTExportWorkset.UserSettleDate,
                      DataExch."Entry No.",EFTValues);
                  EFTValues.SetIATFileCreated(true);
                end;
            BankAccount."Export Format"::CA:
              begin
                ExportEFTRB.StartExportFile(TempEFTExportWorkset,BankAccount."No.",DataExch."Entry No.",EFTValues);
                EFTValues.SetEFTFileCreated(true);
              end;
            BankAccount."Export Format"::MX:
              begin
                if HdrCount = 1 then
                  ExportEFTCecoban.StartExportFile(BankAccount."No.")
                else
                  ExportEFTCecoban.StartExportBatch(TempEFTExportWorkset.UserSettleDate,DataExch."Entry No.");
                EFTValues.SetIATFileCreated(false);
                EFTValues.SetEFTFileCreated(true);
              end;
            else
              ERROR(InvalidExportFormatErr,
                BankAccount."Export Format",
                BankAccount.FIELDCAPTION("Export Format"),
                BankAccount.TABLECAPTION,
                BankAccount."No.");
          end;

          // Create the Entries and values in the Data Exch. Field table
          if DataExchMapping."Mapping Codeunit" > 0 then
            CODEUNIT.RUN(DataExchMapping."Mapping Codeunit",DataExch);

          DataExchDef.GET(DataExchDefCode);
          if DataExchDef."Reading/Writing Codeunit" = CODEUNIT::"Exp. Writing EFT" then
            EFTExportMgt.ExportDataExchToFlatFile(DataExch."Entry No.",Filename,DataExchLineDef."Line Type",HdrCount);
        until  DataExchLineDef.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE ProcessDetails@4(VAR TempEFTExportWorkset@1020000 : TEMPORARY Record "EFT Export Workset";VAR BankAccount@1020002 : Record "Bank Account";DataExchDefCode@1008 : Code[20];VAR DataExchEntryCodeDetail@1009 : Integer;VAR DetailArray@1010 : ARRAY [100] OF Integer;Filename@1007 : Text;VAR EFTValues@1020005 : Codeunit "EFT Values");
    VAR
      DataExch@1006 : Record "Data Exch.";
      DataExchDef@1005 : Record "Data Exch. Def";
      DataExchLineDef@1004 : Record "Data Exch. Line Def";
      DataExchMapping@1003 : Record "Data Exch. Mapping";
      EFTExportMgt@1002 : Codeunit "EFT Export Mgt";
      ExpPreMappingDetEFTUS@1020001 : Codeunit "Exp. Pre-Mapping Det EFT US";
      ExpPreMappingDetEFTCA@1020003 : Codeunit "Exp. Pre-Mapping Det EFT CA";
      ExpPreMappingDetEFTMX@1020004 : Codeunit "Exp. Pre-Mapping Det EFT MX";
    BEGIN
      DataExchLineDef.INIT;
      DataExchLineDef.SETRANGE("Data Exch. Def Code",DataExchDefCode);
      DataExchLineDef.SETRANGE("Line Type",DataExchLineDef."Line Type"::Detail);
      if DataExchLineDef.FINDSET then begin
        repeat
          // Insert the Data Exchange Detail records
          DataExch."Entry No." := 0;
          DataExch."Data Exch. Def Code" := DataExchDefCode;
          DataExch."Data Exch. Line Def Code" := DataExchLineDef.Code;
          DataExch.INSERT;
          COMMIT;

          // It is only here where we know the True DataExch."Entry No"..
          DataExchMapping.SETRANGE("Data Exch. Def Code",DataExchDefCode);
          DataExchMapping.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);
          DataExchMapping.FINDFIRST;

          if (EFTValues.GetParentDefCode = '') or (EFTValues.GetParentDefCode = DataExchLineDef.Code) then begin
            EFTValues.SetParentDefCode(DataExchLineDef.Code);
            EFTValues.SetParentBoolean := true;
          end else
            EFTValues.SetParentBoolean := false;

          if DataExchEntryCodeDetail = 0 then
            DataExchEntryCodeDetail := DataExch."Entry No.";

          // Fill the detail work tables
          case BankAccount."Export Format" of
            BankAccount."Export Format"::US:
              ExpPreMappingDetEFTUS.PrepareEFTDetails(TempEFTExportWorkset,DataExch."Entry No.",0,DetailArray,
                ExportEFTACH,ExportEFTIAT,DataExchLineDef.Code,EFTValues);
            BankAccount."Export Format"::CA:
              ExpPreMappingDetEFTCA.PrepareEFTDetails(TempEFTExportWorkset,DataExch."Entry No.",0,DetailArray,
                ExportEFTRB,DataExchLineDef.Code,EFTValues);
            BankAccount."Export Format"::MX:
              ExpPreMappingDetEFTMX.PrepareEFTDetails(TempEFTExportWorkset,DataExch."Entry No.",0,DetailArray,
                ExportEFTCecoban,DataExchLineDef.Code);
          end;

          // Create the Entries and values in the Data Exch. Field table
          if DataExchMapping."Mapping Codeunit" > 0 then
            CODEUNIT.RUN(DataExchMapping."Mapping Codeunit",DataExch);

          DataExchDef.GET(DataExchDefCode);
          if DataExchDef."Reading/Writing Codeunit" > 0 then
            if DataExchDef."Reading/Writing Codeunit" = CODEUNIT::"Exp. Writing EFT" then
              EFTExportMgt.ExportDataExchToFlatFile(DataExch."Entry No.",Filename,DataExchLineDef."Line Type",0)
            else
              CODEUNIT.RUN(DataExchDef."Reading/Writing Codeunit",DataExch);

        until DataExchLineDef.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE ProcessFooters@5(VAR TempEFTExportWorkset@1020001 : TEMPORARY Record "EFT Export Workset";VAR BankAccount@1020000 : Record "Bank Account";DataExchDefCode@1001 : Code[20];VAR FooterArray@1012 : ARRAY [100] OF Integer;Filename@1000 : Text;VAR DataExchEntryCodeFooter@1011 : Integer;VAR EFTValues@1020002 : Codeunit "EFT Values");
    VAR
      DataExch@1009 : Record "Data Exch.";
      DataExchDef@1008 : Record "Data Exch. Def";
      DataExchLineDef@1007 : Record "Data Exch. Line Def";
      DataExchMapping@1006 : Record "Data Exch. Mapping";
      EFTExportMgt@1005 : Codeunit "EFT Export Mgt";
      FooterCount@1003 : Integer;
    BEGIN
      FooterCount := 0;
      DataExchLineDef.INIT;
      DataExchLineDef.SETRANGE("Data Exch. Def Code",DataExchDefCode);
      DataExchLineDef.SETRANGE("Line Type",DataExchLineDef."Line Type"::Footer);
      if DataExchLineDef.FINDSET then begin
        repeat
          // Insert the Data Exchange Footer records
          DataExch."Entry No." := 0;
          DataExch."Data Exch. Def Code" := DataExchDefCode;
          DataExch."Data Exch. Line Def Code" := DataExchLineDef.Code;
          DataExch.INSERT;
          COMMIT;

          FooterCount := FooterCount + 1;
          FooterArray[FooterCount] := DataExch."Entry No.";

          // It is only here where we know the True DataExch."Entry No"..
          DataExchMapping.SETRANGE("Data Exch. Def Code",DataExchDefCode);
          DataExchMapping.SETRANGE("Data Exch. Line Def Code",DataExchLineDef.Code);
          DataExchMapping.FINDFIRST;

          // Create the Entries and values in the Data Exch. Field table
          if DataExchMapping."Pre-Mapping Codeunit" > 0 then
            CODEUNIT.RUN(DataExchMapping."Pre-Mapping Codeunit",DataExch);

          // Populate the Footer work table
          EFTExportMgt.PrepareEFTFooter(DataExch,BankAccount."No.");

          case BankAccount."Export Format" of
            BankAccount."Export Format"::US:
              if TempEFTExportWorkset."Bank Payment Type" = TempEFTExportWorkset."Bank Payment Type"::"Electronic Payment"
              then begin
                if FooterCount = 1 then
                  ExportEFTACH.EndExportBatch(DataExch."Entry No.")
                else
                  ExportEFTACH.EndExportFile(DataExch."Entry No.");
              end else
                if TempEFTExportWorkset."Bank Payment Type" = TempEFTExportWorkset."Bank Payment Type"::"Electronic Payment-IAT"
                then begin
                  if FooterCount = 1 then
                    ExportEFTIAT.EndExportBatch(DataExch."Entry No.",EFTValues)
                  else
                    ExportEFTIAT.EndExportFile(DataExch."Entry No.",EFTValues);
                end;
            BankAccount."Export Format"::CA:
              ExportEFTRB.EndExportFile(DataExch."Entry No.",EFTValues);
            BankAccount."Export Format"::MX:
              ExportEFTCecoban.EndExportBatch(DataExch."Entry No.");
            else
              ERROR(InvalidExportFormatErr,
                BankAccount."Export Format",
                BankAccount.FIELDCAPTION("Export Format"),
                BankAccount.TABLECAPTION,
                BankAccount."No.");
          end;

          if DataExchMapping."Mapping Codeunit" > 0 then
            CODEUNIT.RUN(DataExchMapping."Mapping Codeunit",DataExch);

          DataExchDef.GET(DataExchDefCode);
          if DataExchDef."Reading/Writing Codeunit" = CODEUNIT::"Exp. Writing EFT" then
            EFTExportMgt.ExportDataExchToFlatFile(DataExch."Entry No.",Filename,DataExchLineDef."Line Type",0);
          DataExchEntryCodeFooter := DataExch."Entry No.";
        until DataExchLineDef.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE UpdateLastEPayExportFileName@1020000(BankAccount@1020000 : Record "Bank Account");
    BEGIN
      with BankAccount do begin
        "Last E-Pay Export File Name" := INCSTR("Last E-Pay Export File Name");
        MODIFY;
        COMMIT;
      end;
    END;

    BEGIN
    END.
  }
}

