OBJECT Table 2003 Cortana Intelligence Usage
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160130.463T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    Permissions=TableData "Cortana Intelligence Usage"=rimd;
    CaptionML=ENU=Cortana Intelligence Usage;
  }
  FIELDS
  {
    { 1   ;   ;Service             ;Option        ;CaptionML=ENU=Service;
                                                   OptionCaptionML=ENU=Machine Learning,Computer Vision;
                                                   OptionString="Machine Learning","Computer Vision" }
    { 2   ;   ;Total Resource Usage;Decimal       ;CaptionML=ENU=Total Resource Usage;
                                                   MinValue=0;
                                                   Editable=false }
    { 3   ;   ;Original Resource Limit;Decimal    ;CaptionML=ENU=Original Resource Limit;
                                                   MinValue=0;
                                                   Editable=false }
    { 4   ;   ;Limit Period        ;Option        ;CaptionML=ENU=Limit Period;
                                                   OptionCaptionML=ENU=Year,Month,Day,Hour;
                                                   OptionString=Year,Month,Day,Hour;
                                                   Editable=false }
    { 5   ;   ;Last DateTime Updated;DateTime     ;CaptionML=ENU=Last DateTime Updated;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;Service                                 ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ProcessingTimeLessThanZeroErr@1000 : TextConst 'ENU=The available Azure Machine Learning processing time is less than or equal to zero.';
      AzureMLCategoryTxt@1005 : TextConst '@@@=Locked;ENU=AzureMLCategory';
      AzureMLLimitReachedTxt@1006 : TextConst '@@@=Locked;ENU=The Azure ML usage limit has been reached';
      TestMode@1004 : Boolean;
      TestTime@1003 : Time;
      TestDate@1002 : Date;
      ImageAnalysisIsSetup@1001 : Boolean;

    [External]
    PROCEDURE IncrementTotalProcessingTime@3(ServiceOption@1001 : Option;AzureMLServiceProcessingTime@1000 : Decimal);
    BEGIN
      if AzureMLServiceProcessingTime <= 0 then
        ERROR(ProcessingTimeLessThanZeroErr);

      if GetSingleInstance(ServiceOption) then begin
        "Total Resource Usage" += AzureMLServiceProcessingTime;
        "Last DateTime Updated" := GetCurrentDateTime;
        MODIFY(true);
      end;
    END;

    [External]
    PROCEDURE IsAzureMLLimitReached@5(ServiceOption@1001 : Option;AzureMLUsageLimit@1000 : Decimal) : Boolean;
    BEGIN
      if GetSingleInstance(ServiceOption) then
        if GetTotalProcessingTime(ServiceOption) >= AzureMLUsageLimit then begin
          SENDTRACETAG('00001T1',AzureMLCategoryTxt,VERBOSITY::Normal,AzureMLLimitReachedTxt,DATACLASSIFICATION::SystemMetadata);
          exit(true);
        end;
      exit(false);
    END;

    [External]
    PROCEDURE GetTotalProcessingTime@8(ServiceOption@1000 : Option) : Decimal;
    BEGIN
      // in case Azure ML is used by other features processing time should be added here
      if GetSingleInstance(ServiceOption) then
        exit("Total Resource Usage");
    END;

    [External]
    PROCEDURE GetSingleInstance@9(ServiceOption@1008 : Option) : Boolean;
    VAR
      ImageAnalysisSetup@1010 : Record "Image Analysis Setup";
      AzureKeyVaultManagement@1000 : Codeunit "Azure Key Vault Management";
      PermissionManager@1007 : Codeunit "Permission Manager";
      ApiUri@1001 : Text[250];
      ApiKey@1002 : Text[200];
      LimitType@1005 : Option;
      LimitValue@1003 : Decimal;
      LimitValueInt@1009 : Integer;
      CallModify@1004 : Boolean;
      ResetTotalProcessingTime@1006 : Boolean;
    BEGIN
      if (ServiceOption = Service::"Machine Learning") and (not PermissionManager.SoftwareAsAService) then
        exit(false);

      SETRANGE(Service,ServiceOption);
      if not FINDFIRST then begin
        INIT;
        Service := ServiceOption;
        "Last DateTime Updated" := GetCurrentDateTime;
        INSERT;
      end;

      case ServiceOption of
        Service::"Computer Vision":
          begin
            if "Original Resource Limit" = 0 then begin
              "Original Resource Limit" := 999;
              "Limit Period" := "Limit Period"::Year;
            end;

            if not ImageAnalysisSetup.GET then begin
              ImageAnalysisSetup.INIT;
              ImageAnalysisSetup.INSERT;
            end;

            if (not ImageAnalysisIsSetup) and
               (ImageAnalysisSetup.GetApiKey = '') and (ImageAnalysisSetup."Api Uri" = '') and
               PermissionManager.SoftwareAsAService
            then
              if AzureKeyVaultManagement.GetImageAnalysisCredentials(ApiKey,ApiUri,LimitType,LimitValueInt) then begin
                "Original Resource Limit" := LimitValueInt;
                "Limit Period" := LimitType;
                CallModify := true;
              end;
          end;
        Service::"Machine Learning":
          if AzureKeyVaultManagement.GetMachineLearningCredentials(ApiUri,ApiKey,LimitType,LimitValue) then begin
            "Original Resource Limit" := LimitValue;
            "Limit Period" := LimitType;
            CallModify := true;
          end;
      end;

      case "Limit Period" of
        "Limit Period"::Year:
          ResetTotalProcessingTime := HasChangedYear("Last DateTime Updated");
        "Limit Period"::Month:
          ResetTotalProcessingTime := HasChangedMonth("Last DateTime Updated");
        "Limit Period"::Day:
          ResetTotalProcessingTime := HasChangedDay("Last DateTime Updated");
        "Limit Period"::Hour:
          ResetTotalProcessingTime := HasChangedHour("Last DateTime Updated");
      end;
      if ResetTotalProcessingTime then begin
        "Total Resource Usage" := 0;
        CallModify := true;
      end;

      if CallModify then
        MODIFY;
      exit(true);
    END;

    PROCEDURE SetTestMode@1(InputTestDate@1000 : Date;InputTestTime@1001 : Time);
    BEGIN
      TestMode := true;
      TestDate := InputTestDate;
      TestTime := InputTestTime;
    END;

    LOCAL PROCEDURE GetCurrentDateTime@6() : DateTime;
    BEGIN
      if TestMode then
        exit(CREATEDATETIME(TestDate,TestTime));

      exit(CURRENTDATETIME);
    END;

    LOCAL PROCEDURE GetCurentDate@7() : Date;
    BEGIN
      exit(DT2DATE(GetCurrentDateTime));
    END;

    PROCEDURE HasChangedYear@21(PreviousDateTime@1000 : DateTime) : Boolean;
    BEGIN
      exit(HasChangedPeriod(PreviousDateTime,3));
    END;

    PROCEDURE HasChangedMonth@20(PreviousDateTime@1000 : DateTime) : Boolean;
    BEGIN
      exit(HasChangedPeriod(PreviousDateTime,2) or HasChangedYear(PreviousDateTime));
    END;

    PROCEDURE HasChangedDay@16(PreviousDateTime@1000 : DateTime) : Boolean;
    BEGIN
      exit(HasChangedPeriod(PreviousDateTime,1) or HasChangedMonth(PreviousDateTime));
    END;

    LOCAL PROCEDURE HasChangedPeriod@2(PreviousDateTime@1000 : DateTime;What@1001 : Integer) : Boolean;
    BEGIN
      exit(DATE2DMY(GetCurentDate,What) <> DATE2DMY(DT2DATE(PreviousDateTime),What));
    END;

    PROCEDURE HasChangedHour@10(PreviousDateTime@1000 : DateTime) : Boolean;
    VAR
      PreviousRounded@1002 : DateTime;
      CurrentRounded@1003 : DateTime;
    BEGIN
      PreviousRounded := ROUNDDATETIME(PreviousDateTime,1000 * 3600,'<');
      CurrentRounded := ROUNDDATETIME(GetCurrentDateTime,1000 * 3600,'<');
      exit(CurrentRounded <> PreviousRounded);
    END;

    PROCEDURE SetImageAnalysisIsSetup@11(NewValue@1000 : Boolean);
    BEGIN
      ImageAnalysisIsSetup := NewValue;
    END;

    BEGIN
    {
      // This table is used for Azure Machine Learning related features to control that amount of time used by all
      // these features in total does not exceed the limit defined by Azure ML.The table is singleton and used only in SaaS.
    }
    END.
  }
}

