OBJECT Codeunit 10092 Export Payments (Cecoban)
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160927.877T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      BankAccount@1001 : Record "Bank Account";
      CompanyInformation@1002 : Record "Company Information";
      RBMgt@1480006 : Codeunit "File Management";
      TotalFileDebit@1006 : Decimal;
      TotalFileCredit@1007 : Decimal;
      TotalBatchDebit@1008 : Decimal;
      TotalBatchCredit@1009 : Decimal;
      RecordLength@1010 : Integer;
      EntryAddendaCount@1013 : Integer;
      FileEntryAddendaCount@1014 : Integer;
      NoOfRec@1015 : Integer;
      ExportFile@1017 : File;
      Justification@1018 : 'Left,Right';
      BatchNo@1019 : Integer;
      BatchCount@1020 : Integer;
      FileHashTotal@1022 : Decimal;
      BatchHashTotal@1023 : Decimal;
      FileName@1025 : Text;
      FileIsInProcess@1027 : Boolean;
      BatchIsInProcess@1028 : Boolean;
      FileDate@1030 : Date;
      PayeeAcctType@1480005 : Integer;
      TraceNo@1034 : Integer;
      BatchDay@1480003 : Integer;
      Text000@1035 : TextConst 'ENU=Cannot start new Export File while %1 is in process.';
      Text002@1037 : TextConst 'ENU=%1 in %2 %3 is invalid.';
      Text003@1038 : TextConst 'ENU=File %1 already exists. Check the %2 in %3 %4.';
      Text004@1039 : TextConst 'ENU=Cannot start export batch until an export file is started.';
      Text005@1040 : TextConst 'ENU=Cannot start new export batch until previous batch is completed.';
      Text006@1041 : TextConst 'ENU=Cannot export details until an export file is started.';
      Text007@1042 : TextConst 'ENU=Cannot export details until an export batch is started.';
      Text008@1043 : TextConst 'ENU=Vendor No. %1 has no bank account setup for electronic payments.';
      Text009@1044 : TextConst 'ENU=Vendor No. %1 has more than one bank account setup for electronic payments.';
      Text010@1045 : TextConst 'ENU=Customer No. %1 has no bank account setup for electronic payments.';
      Text011@1046 : TextConst 'ENU=Customer No. %1 has more than one bank account setup for electronic payments.';
      Text012@1047 : TextConst 'ENU=Cannot end export batch until an export file is started.';
      Text013@1048 : TextConst 'ENU=Cannot end export batch until an export batch is started.';
      Text014@1049 : TextConst 'ENU=Cannot end export file until an export file is started.';
      Text015@1050 : TextConst 'ENU=Cannot end export file until export batch is ended.';
      Text016@1051 : TextConst 'ENU=File %1 does not exist.';
      Text017@1052 : TextConst 'ENU=Did the transmission work properly?';
      Text018@1053 : TextConst 'ENU=Either %1 or %2 must refer to either a %3 or a %4 for an electronic payment.';
      Text1020100@1020100 : TextConst 'ENU=%1 is blocked for %2 processing';
      PrivacyBlockedErr@1234567 : TextConst '@@@="%1 = account type";ENU=%1 is blocked for privacy.';
      Text019@1480000 : TextConst 'ENU=You must now run the program that transmits the payments file to the bank. Transmit the file named %1 located at %2 to %3 (%4 %5 %6).  After the transmission is completed, you will be asked if it worked correctly.  Are you ready to transmit (answer No to cancel the transmission process)?';
      SequenceNo@1480001 : Integer;
      OpCode@1480002 : Integer;
      TransitNoErr@1020000 : TextConst 'ENU=is not valid. Bank Account number must be either the 18 character CLABE format for checking, or 16 characters for Debit Card';

    [External]
    PROCEDURE StartExportFile@6(BankAccountNo@1000 : Code[20];ReferenceCode@1001 : Code[10]);
    BEGIN
      if FileIsInProcess then
        ERROR(Text000,FileName);

      CompanyInformation.GET;
      CompanyInformation.TESTFIELD("Federal ID No.");

      with BankAccount do begin
        LOCKTABLE;
        GET(BankAccountNo);
        TESTFIELD("Export Format","Export Format"::MX);
        TESTFIELD("Transit No.");
        TESTFIELD("E-Pay Export File Path");
        if "E-Pay Export File Path"[STRLEN("E-Pay Export File Path")] <> '\' then
          ERROR(Text002,
            FIELDCAPTION("E-Pay Export File Path"),
            TABLECAPTION,
            "No.");
        TESTFIELD("Bank Acc. Posting Group");
        TESTFIELD(Blocked,false);

        "Last E-Pay Export File Name" := ExportFileName;
        FileName := RBMgt.ServerTempFileName('');
        MODIFY;

        if EXISTS(FileName) then
          ERROR(Text003,
            FileName,
            FIELDCAPTION("Last E-Pay Export File Name"),
            TABLECAPTION,
            "No.");
        ExportFile.TEXTMODE(true);
        ExportFile.WRITEMODE(true);
        ExportFile.CREATE(FileName);

        FileIsInProcess := true;
        FileDate := TODAY;
        NoOfRec := 0;
        FileHashTotal := 0;
        TotalFileDebit := 0;
        TotalFileCredit := 0;
        FileEntryAddendaCount := 0;
        BatchCount := 0;
        RecordLength := 422;
        BatchNo := 0;
      end;
    END;

    [External]
    PROCEDURE StartExportBatch@7(OperationCode@1000 : Integer;SourceCode@1002 : Code[10];SettleDate@1003 : Date);
    VAR
      BatchHeaderRec@1004 : Text[422];
    BEGIN
      if not FileIsInProcess then
        ERROR(Text004);
      if BatchIsInProcess then
        ERROR(Text005);

      BatchIsInProcess := true;
      BatchNo := BatchNo + 1;
      BatchHashTotal := 0;
      TotalBatchDebit := 0;
      TotalBatchCredit := 0;
      EntryAddendaCount := 0;
      TraceNo := 0;
      SequenceNo := 1;
      BatchHeaderRec := '';
      OpCode := OperationCode;
      EVALUATE(BatchDay,FORMAT(TODAY,2,'<Day>'));
      // Cecoban layout
      AddToPrnString(BatchHeaderRec,'1',1,2,Justification::Right,'0');                  // Record Type of Input "01" is Batch Header
      AddNumToPrnString(BatchHeaderRec,SequenceNo,3,7);                                          // Sequence Number
      AddNumToPrnString(BatchHeaderRec,OpCode,10,2);                                    // Operation Code
      AddToPrnString(BatchHeaderRec,BankAccount."Bank Account No.",12,3,Justification::Left,' ');    // Bank 3 digit #
      AddToPrnString(BatchHeaderRec,'E',15,1,Justification::Right,'');                    // Export Type
      AddNumToPrnString(BatchHeaderRec,2,16,1);                                          // Service
      AddNumToPrnString(BatchHeaderRec,BatchDay,17,2);                                  // Batch Number day of month part
      AddNumToPrnString(BatchHeaderRec,BatchNo,19,5);                                   // Batch Number sequence part
      AddToPrnString(BatchHeaderRec,FORMAT(SettleDate,0,'<Year,2><Month,2><Day,2>'),24,8,Justification::Right,'0');
      // Date of Presentation  AAAAMMDD
      AddToPrnString(BatchHeaderRec,'01',32,2,Justification::Left,' ');                    // Currency Code, 01 - MX peso 05 - USD
      AddNumToPrnString(BatchHeaderRec,0,34,2);                                           // Rejection code
      AddNumToPrnString(BatchHeaderRec,2,36,1);                                          // System
      AddToPrnString(BatchHeaderRec,'',37,41,Justification::Left,' ');                     // future Cecoban use
      AddToPrnString(BatchHeaderRec,'',78,345,Justification::Left,' ');                     // future Bank use
      ExportPrnString(BatchHeaderRec);
    END;

    [External]
    PROCEDURE ExportElectronicPayment@17(GenJnlLine@1000 : Record "Gen. Journal Line";PaymentAmount@1001 : Decimal;SettleDate@1014 : Date) : Code[30];
    VAR
      Vendor@1002 : Record Vendor;
      VendorBankAcct@1003 : Record "Vendor Bank Account";
      Customer@1004 : Record Customer;
      CustBankAcct@1005 : Record "Customer Bank Account";
      AcctType@1006 : Text[1];
      AcctNo@1007 : Code[20];
      AcctName@1008 : Text[40];
      BankAcctNo@1009 : Text[30];
      TransitNo@1010 : Text[20];
      RFCNo@1013 : Text[20];
      DetailRec@1011 : Text[422];
      DemandCredit@1012 : Boolean;
    BEGIN
      if not FileIsInProcess then
        ERROR(Text006);
      if not BatchIsInProcess then
        ERROR(Text007);

      // NOTE:  If PaymentAmount is Positive, then we are Receiving money.
      // If PaymentAmount is Negative, then we are Sending money.
      if PaymentAmount = 0 then
        exit('');
      DemandCredit := (PaymentAmount < 0);
      PaymentAmount := ABS(PaymentAmount);

      with GenJnlLine do begin
        if "Account Type" = "Account Type"::Vendor then begin
          AcctType := 'V';
          AcctNo := "Account No.";
        end else
          if "Account Type" = "Account Type"::Customer then begin
            AcctType := 'C';
            AcctNo := "Account No.";
          end else
            if "Bal. Account Type" = "Bal. Account Type"::Vendor then begin
              AcctType := 'V';
              AcctNo := "Bal. Account No.";
            end else
              if "Bal. Account Type" = "Bal. Account Type"::Customer then begin
                AcctType := 'C';
                AcctNo := "Bal. Account No.";
              end else
                ERROR(Text018,
                  FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"),Vendor.TABLECAPTION,Customer.TABLECAPTION);

        if AcctType = 'V' then begin
          Vendor.GET(AcctNo);
          Vendor.TESTFIELD(Blocked,Vendor.Blocked::" ");
          Vendor.TESTFIELD("Privacy Blocked",false);
          AcctName := COPYSTR(Vendor.Name,1,MAXSTRLEN(AcctName));
          RFCNo := Vendor."VAT Registration No.";

          VendorBankAcct.SETRANGE("Vendor No.",AcctNo);
          VendorBankAcct.SETRANGE("Use for Electronic Payments",true);
          VendorBankAcct.FINDFIRST;

          if VendorBankAcct.COUNT < 1 then
            ERROR(Text008,AcctNo);
          if VendorBankAcct.COUNT > 1 then
            ERROR(Text009,AcctNo);
          if not PayeeCheckDigit(VendorBankAcct."Transit No.") then
            VendorBankAcct.FIELDERROR("Transit No.",TransitNoErr);

          VendorBankAcct.TESTFIELD("Bank Account No.");
          TransitNo := VendorBankAcct."Transit No.";
          BankAcctNo := VendorBankAcct."Bank Account No.";
        end else
          if AcctType = 'C' then begin
            Customer.GET(AcctNo);
            if Customer."Privacy Blocked" then
              ERROR(
                STRSUBSTNO(
                  PrivacyBlockedErr,
                  "Account Type"));

            if Customer.Blocked in [Customer.Blocked::All] then
              ERROR(
                STRSUBSTNO(
                  Text1020100,
                  "Account Type",Customer.Blocked));
            AcctName := COPYSTR(Customer.Name,1,MAXSTRLEN(AcctName));
            RFCNo := Customer."VAT Registration No.";

            CustBankAcct.SETRANGE("Customer No.",AcctNo);
            CustBankAcct.SETRANGE("Use for Electronic Payments",true);
            CustBankAcct.FINDFIRST;

            if CustBankAcct.COUNT < 1 then
              ERROR(Text010,AcctNo);
            if CustBankAcct.COUNT > 1 then
              ERROR(Text011,AcctNo);
            if not PayeeCheckDigit(CustBankAcct."Transit No.") then
              CustBankAcct.FIELDERROR("Transit No.",TransitNoErr);
            CustBankAcct.TESTFIELD("Bank Account No.");
            TransitNo := CustBankAcct."Transit No.";
            BankAcctNo := CustBankAcct."Bank Account No.";
          end;

        TraceNo := TraceNo + 1;
        SequenceNo := SequenceNo + 1;
        DetailRec := '';
        // Cecoban Detail rec
        AddToPrnString(DetailRec,'2',1,2,Justification::Right,'0');                      // Record Type of Input "02" is Detail
        AddNumToPrnString(DetailRec,SequenceNo,3,7);                                     // Sequence Number
        AddNumToPrnString(DetailRec,OpCode,10,2);                                            // Operation Code
        AddToPrnString(DetailRec,'01',12,2,Justification::Left,' ');                    // Currency Code, 01 - MX peso 05 - USD
        AddToPrnString(DetailRec,FORMAT(FileDate,0,'<Year,4><Month,2><Day,2>'),14,8,Justification::Right,'0');
        // Transfer Date AAAAMMDD

        AddToPrnString(DetailRec,BankAccount."Bank Account No.",22,3,Justification::Left,' ');                    // ODFI
        AddToPrnString(DetailRec,BankAcctNo,25,3,Justification::Left,' ');                // RDFI
        AddAmtToPrnString(DetailRec,PaymentAmount,28,15);                                           // Operation Fee
        AddToPrnString(DetailRec,' ',43,16,Justification::Left,' ');                    // Future use
        AddNumToPrnString(DetailRec,OpCode,59,2);                                        // Operation Type
        AddToPrnString(DetailRec,FORMAT(SettleDate,0,'<Year,2><Month,2><Day,2>'),61,8,Justification::Right,'0');
        // Date Entered AAAAMMDD
        AddNumToPrnString(DetailRec,1,69,2);                    // '?????' Originator Account Type
        AddToPrnString(DetailRec,BankAccount."Transit No.",71,20,Justification::Left,'');          // Originator Account No.
        AddToPrnString(DetailRec,AcctName,91,40,Justification::Left,'');                    // Originator Account Name
        AddToPrnString(DetailRec,'',131,18,Justification::Left,'');                   // Originator RFC/CURP
        AddNumToPrnString(DetailRec,PayeeAcctType,149,2);                    // Payee Account Type
        AddToPrnString(DetailRec,TransitNo,151,20,Justification::Left,'');              // Payee Account No.
        AddToPrnString(DetailRec,AcctName,171,40,Justification::Left,'');                    // Payee Account Name
        AddToPrnString(DetailRec,RFCNo,211,18,Justification::Left,'');                   // Payee RFC/CURP
        AddToPrnString(DetailRec,'',229,40,Justification::Left,'');                   // Transmitter Service Reference
        AddToPrnString(DetailRec,'',269,40,Justification::Left,'');                   // Service Owner
        AddAmtToPrnString(DetailRec,0,309,15);                                            // Operation Tax Cost
        AddNumToPrnString(DetailRec,0,324,7);                                       // Originator Numeric reference
        AddToPrnString(DetailRec,'',331,40,Justification::Left,'');                   // Originator alpha reference
        AddToPrnString(DetailRec,GenerateTraceNoCode(TraceNo),371,30,Justification::Left,'');                   // Tracking code
        AddNumToPrnString(DetailRec,0,401,2);                                            // Return Reason
        AddToPrnString(DetailRec,FORMAT(TODAY,0,'<Year><Month,2><Day,2>'),403,8,Justification::Left,' ');   // Initial Presentation Date
        AddToPrnString(DetailRec,'',411,12,Justification::Left,' ');                   // future use

        ExportPrnString(DetailRec);
        EntryAddendaCount := EntryAddendaCount + 1;
        if DemandCredit then
          TotalBatchCredit := TotalBatchCredit + PaymentAmount
        else
          TotalBatchDebit := TotalBatchDebit + PaymentAmount;
        IncrementHashTotal(BatchHashTotal,MakeHash(COPYSTR(TransitNo,1,8)));
      end;

      exit(GenerateFullTraceNoCode(TraceNo));
    END;

    [External]
    PROCEDURE EndExportBatch@9();
    VAR
      BatchControlRec@1001 : Text[422];
    BEGIN
      if not FileIsInProcess then
        ERROR(Text012);
      if not BatchIsInProcess then
        ERROR(Text013);

      BatchIsInProcess := false;
      BatchControlRec := '';
      SequenceNo := SequenceNo + 1;
      // cecoban batch summary
      AddNumToPrnString(BatchControlRec,9,1,2);                  // Record Type
      AddNumToPrnString(BatchControlRec,SequenceNo,3,7);                  // sequence number
      AddNumToPrnString(BatchControlRec,OpCode,10,2);                  // op code
      AddNumToPrnString(BatchControlRec,BatchDay,12,2);                  // Batch Number day of month part
      AddNumToPrnString(BatchControlRec,BatchNo,14,5);                  // batch number sequence part
      AddNumToPrnString(BatchControlRec,SequenceNo - 2,19,7);          // operation number
      AddAmtToPrnString(BatchControlRec,BatchHashTotal,26,18);                  // TCO
      AddToPrnString(BatchControlRec,' ',44,40,Justification::Left,' ');            // future use
      AddToPrnString(BatchControlRec,' ',84,339,Justification::Left,' ');            // future use
      ExportPrnString(BatchControlRec);

      BatchCount := BatchCount + 1;
      IncrementHashTotal(FileHashTotal,BatchHashTotal);
      TotalFileDebit := TotalFileDebit + TotalBatchDebit;
      TotalFileCredit := TotalFileCredit + TotalBatchCredit;
      FileEntryAddendaCount := FileEntryAddendaCount + EntryAddendaCount;
    END;

    [External]
    PROCEDURE EndExportFile@10() : Boolean;
    VAR
      ClientFile@1020000 : Text;
    BEGIN
      if not FileIsInProcess then
        ERROR(Text014);
      if BatchIsInProcess then
        ERROR(Text015);

      FileIsInProcess := false;
      ExportFile.CLOSE;

      ClientFile := BankAccount."E-Pay Export File Path" + BankAccount."Last E-Pay Export File Name";
      RBMgt.DownloadToFile(FileName,ClientFile);
      ERASE(FileName);

      exit(true);
    END;

    LOCAL PROCEDURE GenerateFullTraceNoCode@14(TraceNo@1000 : Integer) : Code[30];
    VAR
      TraceCode@1001 : Text[250];
    BEGIN
      TraceCode := '';
      AddToPrnString(TraceCode,FORMAT(FileDate,0,'<Year,2><Month,2><Day,2>'),1,6,Justification::Left,' ');
      AddToPrnString(TraceCode,BankAccount."Last ACH File ID Modifier",7,1,Justification::Right,'0');
      AddNumToPrnString(TraceCode,BatchNo,8,7);
      AddToPrnString(TraceCode,GenerateTraceNoCode(TraceNo),15,15,Justification::Left,' ');
      exit(TraceCode);
    END;

    LOCAL PROCEDURE GenerateTraceNoCode@15(TraceNo@1000 : Integer) : Code[15];
    VAR
      TraceCode@1001 : Text[250];
    BEGIN
      TraceCode := '';
      AddToPrnString(TraceCode,BankAccount."Transit No.",1,8,Justification::Left,' ');
      AddNumToPrnString(TraceCode,TraceNo,9,7);
      exit(TraceCode);
    END;

    LOCAL PROCEDURE AddNumToPrnString@12(VAR PrnString@1000 : Text[422];Number@1001 : Integer;StartPos@1002 : Integer;Length@1003 : Integer);
    VAR
      TmpString@1004 : Text[422];
    BEGIN
      TmpString := DELCHR(FORMAT(Number),'=','.,-');
      AddToPrnString(PrnString,TmpString,StartPos,Length,Justification::Right,'0');
    END;

    LOCAL PROCEDURE AddAmtToPrnString@3(VAR PrnString@1000 : Text[422];Amount@1001 : Decimal;StartPos@1002 : Integer;Length@1003 : Integer);
    VAR
      TmpString@1004 : Text[422];
      I@1005 : Integer;
    BEGIN
      TmpString := FORMAT(Amount);
      I := STRPOS(TmpString,'.');
      case true of
        I = 0:
          TmpString := TmpString + '.00';
        I = STRLEN(TmpString) - 1:
          TmpString := TmpString + '0';
      end;
      TmpString := DELCHR(TmpString,'=','.,-');
      AddToPrnString(PrnString,TmpString,StartPos,Length,Justification::Right,'0');
    END;

    LOCAL PROCEDURE AddToPrnString@4(VAR PrnString@1000 : Text[422];SubString@1001 : Text[345];StartPos@1002 : Integer;Length@1003 : Integer;Justification@1004 : 'Left,Right';Filler@1005 : Text[1]);
    VAR
      I@1007 : Integer;
      SubStrLen@1008 : Integer;
    BEGIN
      SubString := UPPERCASE(DELCHR(SubString,'<>',' '));
      SubStrLen := STRLEN(SubString);

      if SubStrLen > Length then begin
        SubString := COPYSTR(SubString,1,Length);
        SubStrLen := Length;
      end;

      if Justification = Justification::Right then
        for I := 1 to (Length - SubStrLen) do
          SubString := Filler + SubString
      else
        for I := SubStrLen + 1 to Length do
          SubString := SubString + Filler;

      if STRLEN(PrnString) >= StartPos then
        if StartPos > 1 then
          PrnString := COPYSTR(PrnString,1,StartPos - 1) + SubString + COPYSTR(PrnString,StartPos)
        else
          PrnString := SubString + PrnString
      else begin
        for I := STRLEN(PrnString) + 1 to StartPos - 1 do
          PrnString := PrnString + ' ';
        PrnString := PrnString + SubString;
      end;
    END;

    LOCAL PROCEDURE ExportPrnString@11(VAR PrnString@1000 : Text[422]);
    BEGIN
      PrnString := PADSTR(PrnString,RecordLength,' ');
      ExportFile.WRITE(PrnString);
      NoOfRec := NoOfRec + 1;
      PrnString := '';
    END;

    [External]
    PROCEDURE PayeeCheckDigit@2(DigitString@1000 : Code[20]) : Boolean;
    BEGIN
      if STRLEN(DigitString) = 18 then begin
        PayeeAcctType := 1;
        exit(true);                                   // checking Account
      end;
      if STRLEN(DigitString) = 16 then begin
        PayeeAcctType := 3;                                   // debit card
        exit(true);                                   // checking Account
      end;
      exit(false);
    END;

    LOCAL PROCEDURE IncrementHashTotal@13(VAR HashTotal@1000 : Decimal;HashIncrement@1001 : Decimal);
    VAR
      SubTotal@1002 : Decimal;
    BEGIN
      SubTotal := HashTotal + HashIncrement;
      if SubTotal < 10000000000.0 then
        HashTotal := SubTotal
      else
        HashTotal := SubTotal - 10000000000.0;
    END;

    LOCAL PROCEDURE MakeHash@21(InputString@1000 : Text[30]) : Decimal;
    VAR
      HashAmt@1001 : Decimal;
    BEGIN
      InputString := DELCHR(InputString,'=','.,- ');
      if EVALUATE(HashAmt,InputString) then
        exit(HashAmt);

      exit(0);
    END;

    [External]
    PROCEDURE TransmitExportedFile@16(BankAccountNo@1000 : Code[20];FName@1001 : Text);
    VAR
      ExportFullPathName@1002 : Text;
      TransmitFullPathName@1003 : Text;
    BEGIN
      with BankAccount do begin
        GET(BankAccountNo);
        TESTFIELD("E-Pay Export File Path");
        if "E-Pay Export File Path"[STRLEN("E-Pay Export File Path")] <> '\' then
          ERROR(Text002,
            FIELDCAPTION("E-Pay Export File Path"),
            TABLECAPTION,
            "No.");
        TESTFIELD("E-Pay Trans. Program Path");
        if "E-Pay Trans. Program Path"[STRLEN("E-Pay Trans. Program Path")] <> '\' then
          ERROR(Text002,
            FIELDCAPTION("E-Pay Trans. Program Path"),
            TABLECAPTION,
            "No.");
        ExportFullPathName := "E-Pay Export File Path" + FName;
        TransmitFullPathName := "E-Pay Trans. Program Path" + FName;

        if not RBMgt.ClientFileExists(ExportFullPathName) then
          ERROR(Text016,FName);
        RBMgt.CopyClientFile(ExportFullPathName,TransmitFullPathName,true);

        if CONFIRM(Text019,true,FName,"E-Pay Trans. Program Path",Name,TABLECAPTION,FIELDCAPTION("No."),"No.") then
          if CONFIRM(Text017) then
            RBMgt.DeleteClientFile(ExportFullPathName);
      end;
    END;

    [External]
    PROCEDURE ExportFileName@1480000() : Text[30];
    VAR
      FileName@1020000 : Text[30];
    BEGIN
      if BankAccount."Last E-Pay Export File Name" = '' then begin
        FileName := '';
        AddToPrnString(FileName,'S01',1,3,Justification::Right,'');                      // Record Type of Input "02" is Detail
        AddToPrnString(FileName,BankAccount."Bank Account No.",4,3,Justification::Left,' ');    // Bank 3 digit #
        AddToPrnString(FileName,'A2.A10 ',7,6,Justification::Right,'');
        AddToPrnString(FileName,FORMAT(TODAY,2,'0' + '<weekDay>'),13,2,Justification::Right,''); // weekday
        AddNumToPrnString(FileName,BatchNo + 1,15,2);                                     // Sequence Number
      end else begin
        FileName := BankAccount."Last E-Pay Export File Name";
        AddToPrnString(FileName,FORMAT(TODAY,2,'0' + '<weekDay>'),13,2,Justification::Right,''); // weekday
        AddNumToPrnString(FileName,BatchNo + 1,15,2);                                     // Sequence Number
      end;
      exit(FileName);
    END;

    BEGIN
    END.
  }
}

