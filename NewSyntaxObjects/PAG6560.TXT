OBJECT Page 6560 Document Line Tracking
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=161555.590T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Document Line Tracking;
    SourceTable="Document Entry";
    DataCaptionExpr=DocumentCaption;
    PageType=List;
    OnInit=BEGIN
             ShowEnable := true;
           END;

    OnOpenPage=BEGIN
                 if (SourceDocNo = '') or (SourceDocLineNo = 0) then
                   exit;

                 FindRecords;
               END;

    OnFindRecord=BEGIN
                   TempDocumentEntry := Rec;
                   if not TempDocumentEntry.FIND(Which) then
                     exit(false);
                   Rec := TempDocumentEntry;
                   exit(true);
                 END;

    OnNextRecord=VAR
                   CurrentSteps@1000 : Integer;
                 BEGIN
                   TempDocumentEntry := Rec;
                   CurrentSteps := TempDocumentEntry.NEXT(Steps);
                   if CurrentSteps <> 0 then
                     Rec := TempDocumentEntry;
                   exit(CurrentSteps);
                 END;

    ActionList=ACTIONS
    {
      { 15      ;0   ;ActionContainer;
                      Name=ActionContainer15;
                      ActionContainerType=ActionItems }
      { 14      ;1   ;Action    ;
                      Name=Show;
                      CaptionML=ENU=&Show;
                      ToolTipML=ENU=Show related document.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Enabled=ShowEnable;
                      Image=View;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowRecords;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 13  ;0   ;Container ;
                Name=Control13;
                ContainerType=ContentArea }

    { 12  ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 11  ;2   ;Field     ;
                Name=SourceDocLineNo;
                CaptionML=ENU=Line No.;
                ToolTipML=ENU=Specifies the number of the tracked line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SourceDocLineNo;
                Editable=FALSE;
                ImplicitType=Integer }

    { 10  ;2   ;Field     ;
                Name=DocLineType;
                CaptionML=ENU=Type;
                ToolTipML=ENU="Specifies the type of the tracked document. ";
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DocLineType;
                Editable=FALSE;
                ImplicitType=Text30 }

    { 9   ;2   ;Field     ;
                Name=DocLineNo;
                CaptionML=ENU=No.;
                ToolTipML=ENU=Specifies the number of the tracked document line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DocLineNo;
                Editable=FALSE;
                ImplicitType=Code20 }

    { 8   ;2   ;Field     ;
                Name=DocLineDescription;
                CaptionML=ENU=Description;
                ToolTipML=ENU=Specifies a description of the record.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DocLineDescription;
                Editable=FALSE;
                ImplicitType=Text50 }

    { 7   ;2   ;Field     ;
                Name=DocLineQuantity;
                CaptionML=ENU=Quantity;
                ToolTipML=ENU=Specifies the quantity on the tracked document line.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=DocLineQuantity;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 6   ;2   ;Field     ;
                Name=DocLineUnit;
                CaptionML=ENU=Unit of Measure Code;
                ToolTipML=ENU=Specifies the unit of measure that the item is shown in.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DocLineUnit;
                Editable=FALSE;
                ImplicitType=Text10 }

    { 5   ;1   ;Group     ;
                Name=Control5;
                Editable=FALSE;
                GroupType=Repeater }

    { 4   ;2   ;Field     ;
                Name="Entry No.";
                ToolTipML=ENU=Specifies the number that is assigned to the entry.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Entry No.";
                Visible=FALSE;
                ImplicitType=Integer }

    { 3   ;2   ;Field     ;
                Name="Table ID";
                ToolTipML=ENU=Specifies the ID of the table that stores the tracked document line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Table ID";
                Visible=FALSE;
                ImplicitType=Integer }

    { 2   ;2   ;Field     ;
                Name=Table Name;
                ToolTipML=ENU=Specifies the name of the table that stores the tracked document line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Table Name";
                ImplicitType=Text100 }

    { 1   ;2   ;Field     ;
                Name="No. of Records";
                DrillDown=true;
                ToolTipML=ENU=Specifies how many records contain the tracked document line.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="No. of Records";
                OnDrillDown=BEGIN
                              ShowRecords;
                            END;

                ImplicitType=Integer }

  }
  CODE
  {
    VAR
      CountingRecordsMsg@1000 : TextConst 'ENU=Counting records...';
      SalesOrderLinesTxt@1001 : TextConst 'ENU=Sales Order Lines';
      ArchivedSalesOrderLinesTxt@1002 : TextConst 'ENU=Archived Sales Order Lines';
      PostedSalesShipmentLinesTxt@1003 : TextConst 'ENU=Posted Sales Shipment Lines';
      PostedSalesInvoiceLinesTxt@1004 : TextConst 'ENU=Posted Sales Invoice Lines';
      PurchaseOrderLinesTxt@1005 : TextConst 'ENU=Purchase Order Lines';
      ArchivedPurchaseOrderLinesTxt@1006 : TextConst 'ENU=Archived Purchase Order Lines';
      PostedPurchaseReceiptLinesTxt@1007 : TextConst 'ENU=Posted Purchase Receipt Lines';
      PostedPurchaseInvoiceLinesTxt@1008 : TextConst 'ENU=Posted Purchase Invoice Lines';
      NoSalesOrderMsg@1009 : TextConst 'ENU=There is no Sales Order / Archived Sales Order with this Document Number and Document Line No.';
      NoPurchaseOrderMsg@1011 : TextConst 'ENU=There is no Purchase Order / Archived Purchase Order with this Document Number and Document Line No.';
      ArchivedTxt@1012 : TextConst 'ENU=Archived';
      BlanketSalesOrderLinesTxt@1013 : TextConst 'ENU=Blanket Sales Order Lines';
      ArchivedBlanketSalesOrderLinesTxt@1014 : TextConst 'ENU=Archived Blanket Sales Order Lines';
      BlanketPurchaseOrderLinesTxt@1015 : TextConst 'ENU=Blanket Purchase Order Lines';
      ArchivedBlanketPurchaseOrderLinesTxt@1016 : TextConst 'ENU=Archived Blanket Purchase Order Lines';
      SalesReturnOrderLinesTxt@1052 : TextConst 'ENU=Sales Return Order Lines';
      ArchivedSalesReturnOrderLinesTxt@1053 : TextConst 'ENU=Archived Sales Return Order Lines';
      PostedReturnReceiptLinesTxt@1054 : TextConst 'ENU=Posted Return Receipt Lines';
      PostedSalesCreditMemoLinesTxt@1055 : TextConst 'ENU=Posted Sales Credit Memo Lines';
      PurchaseReturnOrderLinesTxt@1056 : TextConst 'ENU=Purchase Return Order Lines';
      ArchivedPurchaseReturnOrderLinesTxt@1057 : TextConst 'ENU=Archived Purchase Return Order Lines';
      PostedReturnShipmentLinesTxt@1058 : TextConst 'ENU=Posted Return Shipment Lines';
      PostedPurchaseCreditMemoLinesTxt@1059 : TextConst 'ENU=Posted Purchase Credit Memo Lines';
      SalesLine@1017 : Record "Sales Line";
      SalesShptLine@1018 : Record "Sales Shipment Line";
      SalesInvLine@1019 : Record "Sales Invoice Line";
      SalesCrMemoLine@1020 : Record "Sales Cr.Memo Line";
      SalesLineArchive@1021 : Record "Sales Line Archive";
      PurchLine@1022 : Record "Purchase Line";
      PurchRcptLine@1023 : Record "Purch. Rcpt. Line";
      PurchInvLine@1024 : Record "Purch. Inv. Line";
      PurchCrMemoLine@1025 : Record "Purch. Cr. Memo Line";
      PurchLineArchive@1026 : Record "Purchase Line Archive";
      TempDocumentEntry@1027 : TEMPORARY Record "Document Entry";
      ReturnReceiptLine@1050 : Record "Return Receipt Line";
      ReturnShipmentLine@1051 : Record "Return Shipment Line";
      BlanketSalesOrderLine@1028 : Record "Sales Line";
      BlanketSalesOrderLineArchive@1029 : Record "Sales Line Archive";
      BlanketPurchOrderLine@1030 : Record "Purchase Line";
      BlanketPurchOrderLineArchive@1031 : Record "Purchase Line Archive";
      Window@1032 : Dialog;
      SourceDocType@1033 : 'SalesOrder,PurchaseOrder,BlanketSalesOrder,BlanketPurchaseOrder,SalesShipment,PurchaseReceipt,SalesInvoice,PurchaseInvoice,SalesReturnOrder,PurchaseReturnOrder,SalesCreditMemo,PurchaseCreditMemo,ReturnReceipt,ReturnShipment';
      SourceDocNo@1034 : Code[20];
      SourceDocBlanketOrderNo@1035 : Code[20];
      SourceDocOrderNo@1036 : Code[20];
      SourceDocLineNo@1039 : Integer;
      SourceDocBlanketOrderLineNo@1040 : Integer;
      SourceDocOrderLineNo@1041 : Integer;
      DocumentCaption@1042 : Text[60];
      DocNo@1037 : Code[20];
      DocLineNo@1010 : Code[20];
      DocType@1043 : Text[30];
      DocArchive@1044 : Text[30];
      DocLineType@1045 : Text[30];
      DocLineDescription@1046 : Text[50];
      DocLineUnit@1047 : Text[10];
      DocLineQuantity@1048 : Decimal;
      DocExists@1049 : Boolean;
      ShowEnable@19017131 : Boolean INDATASET;

    PROCEDURE SetDoc@1000(NewSourceDocType@1000 : 'SalesOrder,PurchaseOrder,BlanketSalesOrder,BlanketPurchaseOrder,SalesShipment,PurchaseReceipt,SalesInvoice,PurchaseInvoice,SalesReturnOrder,PurchaseReturnOrder,SalesCreditMemo,PurchaseCreditMemo,ReturnReceipt,ReturnShipment';NewDocNo@1001 : Code[20];NewSourceDocLineNo@1002 : Integer;NewDocBlanketOrderNo@1003 : Code[20];NewDocBlanketOrderLineNo@1004 : Integer;NewDocOrderNo@1005 : Code[20];NewDocOrderLineNo@1006 : Integer);
    BEGIN
      SourceDocType := NewSourceDocType;
      SourceDocNo := NewDocNo;
      SourceDocLineNo := NewSourceDocLineNo;
      SourceDocBlanketOrderNo := NewDocBlanketOrderNo;
      SourceDocBlanketOrderLineNo := NewDocBlanketOrderLineNo;
      SourceDocOrderNo := NewDocOrderNo;
      SourceDocOrderLineNo := NewDocOrderLineNo;

      Rec := Rec;
    END;

    LOCAL PROCEDURE FindRecords@1001();
    BEGIN
      with TempDocumentEntry do begin
        Window.OPEN(CountingRecordsMsg);
        DELETEALL;
        "Entry No." := 0;

        case SourceDocType of
          SourceDocType::SalesOrder:
            FindRecordsForSalesOrder;
          SourceDocType::PurchaseOrder:
            FindRecordsForPurchOrder;
          SourceDocType::BlanketSalesOrder:
            FindRecordsForBlanketSalesOrder;
          SourceDocType::BlanketPurchaseOrder:
            FindRecordsForBlanketPurchOrder;
          SourceDocType::SalesShipment:
            FindRecordsForSalesShipment;
          SourceDocType::PurchaseReceipt:
            FindRecordsForPurchaseReceipt;
          SourceDocType::SalesInvoice:
            FindRecordsForSalesInvoice;
          SourceDocType::PurchaseInvoice:
            FindRecordsForPurchInvoice;
          SourceDocType::SalesReturnOrder:
            FindRecordsForSalesReturnOrder;
          SourceDocType::PurchaseReturnOrder:
            FindRecordsForPurchReturnOrder;
          SourceDocType::SalesCreditMemo:
            FindRecordsForSalesCreditMemo;
          SourceDocType::PurchaseCreditMemo:
            FindRecordsForPurchCreditMemo;
          SourceDocType::ReturnReceipt:
            FindRecordsForReturnReceipt;
          SourceDocType::ReturnShipment:
            FindRecordsForReturnShipment;
        end;

        GetDocumentData;

        if DocNo = '' then
          case SourceDocType of
            SourceDocType::SalesOrder:
              MESSAGE(NoSalesOrderMsg);
            SourceDocType::PurchaseOrder:
              MESSAGE(NoPurchaseOrderMsg);
          end;

        DocExists := FIND('-');
        ShowEnable := DocExists;
        CurrPage.UPDATE(false);
        DocExists := FIND('-');
        if DocExists then;
        Window.CLOSE;
      end;
    END;

    LOCAL PROCEDURE FindRecordsForSalesOrder@1();
    BEGIN
      FindSalesBlanketOrderLines(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindSalesBlanketOrderLinesArchive(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindSalesOrderLines(SourceDocNo,SourceDocLineNo);
      FindSalesOrderLinesArchive(SourceDocNo,SourceDocLineNo);
      FindSalesShipmentLinesByOrder(SourceDocNo,SourceDocLineNo);
      FindSalesInvoiceLinesByOrder(SourceDocNo,SourceDocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForPurchOrder@3();
    BEGIN
      FindPurchBlanketOrderLines(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindPurchBlanketOrderLinesArchive(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindPurchOrderLines(SourceDocNo,SourceDocLineNo);
      FindPurchOrderLinesArchive(SourceDocNo,SourceDocLineNo);
      FindPurchReceiptLinesByOrder(SourceDocNo,SourceDocLineNo);
      FindPurchInvoiceLinesByOrder(SourceDocNo,SourceDocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForBlanketSalesOrder@4();
    BEGIN
      FindSalesBlanketOrderLines(SourceDocNo,SourceDocLineNo);
      FindSalesBlanketOrderLinesArchive(SourceDocNo,SourceDocLineNo);
      FindSalesOrderLinesByBlanketOrder(SourceDocNo,SourceDocLineNo);
      FindSalesOrderLinesArchiveByBlanketOrder(SourceDocNo,SourceDocLineNo);
      FindSalesShipmentLinesByBlanketOrder(SourceDocNo,SourceDocLineNo);
      FindSalesInvoiceLinesByBlanketOrder(SourceDocNo,SourceDocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForBlanketPurchOrder@5();
    BEGIN
      FindPurchBlanketOrderLines(SourceDocNo,SourceDocLineNo);
      FindPurchBlanketOrderLinesArchive(SourceDocNo,SourceDocLineNo);
      FindPurchOrderLinesByBlanketOrder(SourceDocNo,SourceDocLineNo);
      FindPurchOrderLinesArchiveByBlanketOrder(SourceDocNo,SourceDocLineNo);
      FindPurchReceiptLinesByBlanketOrder(SourceDocNo,SourceDocLineNo);
      FindPurchInvoiceLinesByBlanketOrder(SourceDocNo,SourceDocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForSalesShipment@6();
    BEGIN
      FindSalesBlanketOrderLines(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindSalesBlanketOrderLinesArchive(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindSalesOrderLines(SourceDocOrderNo,SourceDocOrderLineNo);
      FindSalesOrderLinesArchive(SourceDocOrderNo,SourceDocOrderLineNo);
      FindSalesShipmentLinesByOrder(SourceDocOrderNo,SourceDocOrderLineNo);
      FindSalesInvoiceLinesByOrder(SourceDocOrderNo,SourceDocOrderLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForPurchaseReceipt@7();
    BEGIN
      FindPurchBlanketOrderLines(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindPurchBlanketOrderLinesArchive(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindPurchOrderLines(SourceDocOrderNo,SourceDocOrderLineNo);
      FindPurchOrderLinesArchive(SourceDocOrderNo,SourceDocOrderLineNo);
      FindPurchReceiptLinesByOrder(SourceDocOrderNo,SourceDocOrderLineNo);
      FindPurchInvoiceLinesByOrder(SourceDocOrderNo,SourceDocOrderLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForSalesInvoice@9();
    BEGIN
      FindSalesBlanketOrderLines(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindSalesBlanketOrderLinesArchive(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindSalesOrderLines(SourceDocOrderNo,SourceDocOrderLineNo);
      FindSalesOrderLinesArchive(SourceDocOrderNo,SourceDocOrderLineNo);
      FindSalesShipmentLinesByOrder(SourceDocOrderNo,SourceDocOrderLineNo);
      FindSalesInvoiceLinesByOrder(SourceDocOrderNo,SourceDocOrderLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForPurchInvoice@11();
    BEGIN
      FindPurchBlanketOrderLines(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindPurchBlanketOrderLinesArchive(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindPurchOrderLines(SourceDocOrderNo,SourceDocOrderLineNo);
      FindPurchOrderLinesArchive(SourceDocOrderNo,SourceDocOrderLineNo);
      FindPurchReceiptLinesByOrder(SourceDocOrderNo,SourceDocOrderLineNo);
      FindPurchInvoiceLinesByOrder(SourceDocOrderNo,SourceDocOrderLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForSalesReturnOrder@13();
    BEGIN
      FindSalesReturnOrderLines(SourceDocNo,SourceDocLineNo);
      FindSalesReturnOrderLinesArchive(SourceDocNo,SourceDocLineNo);
      FindReturnReceiptLines(SourceDocNo,SourceDocLineNo);
      FindSalesCreditMemoLines(SourceDocNo,SourceDocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForPurchReturnOrder@14();
    BEGIN
      FindPurchReturnOrderLines(SourceDocNo,SourceDocLineNo);
      FindPurchReturnOrderLinesArchive(SourceDocNo,SourceDocLineNo);
      FindReturnShipmentLines(SourceDocNo,SourceDocLineNo);
      FindPurchCreditMemoLines(SourceDocNo,SourceDocLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForSalesCreditMemo@15();
    BEGIN
      FindSalesReturnOrderLines(SourceDocOrderNo,SourceDocOrderLineNo);
      FindSalesReturnOrderLinesArchive(SourceDocOrderNo,SourceDocOrderLineNo);
      FindReturnReceiptLines(SourceDocOrderNo,SourceDocOrderLineNo);
      FindSalesCreditMemoLines(SourceDocOrderNo,SourceDocOrderLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForPurchCreditMemo@16();
    BEGIN
      FindPurchReturnOrderLines(SourceDocOrderNo,SourceDocOrderLineNo);
      FindPurchReturnOrderLinesArchive(SourceDocOrderNo,SourceDocOrderLineNo);
      FindReturnShipmentLines(SourceDocOrderNo,SourceDocOrderLineNo);
      FindPurchCreditMemoLines(SourceDocOrderNo,SourceDocOrderLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForReturnReceipt@17();
    BEGIN
      FindSalesReturnOrderLines(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindSalesReturnOrderLinesArchive(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindReturnReceiptLines(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindSalesCreditMemoLines(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
    END;

    LOCAL PROCEDURE FindRecordsForReturnShipment@18();
    BEGIN
      FindPurchReturnOrderLines(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindPurchReturnOrderLinesArchive(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindReturnShipmentLines(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
      FindPurchCreditMemoLines(SourceDocBlanketOrderNo,SourceDocBlanketOrderLineNo);
    END;

    LOCAL PROCEDURE InsertIntoDocEntry@1002(DocTableID@1000 : Integer;DocType@1001 : Option;DocTableName@1002 : Text[50];DocNoOfRecords@1003 : Integer);
    BEGIN
      if DocNoOfRecords = 0 then
        exit;

      TempDocumentEntry.INIT;
      TempDocumentEntry."Entry No." := TempDocumentEntry."Entry No." + 1;
      TempDocumentEntry."Table ID" := DocTableID;
      TempDocumentEntry."Document Type" := DocType;
      TempDocumentEntry."Table Name" := COPYSTR(DocTableName,1,MAXSTRLEN(TempDocumentEntry."Table Name"));
      TempDocumentEntry."No. of Records" := DocNoOfRecords;
      TempDocumentEntry.INSERT;
    END;

    LOCAL PROCEDURE GetDocumentData@1004();
    BEGIN
      DocType := '';
      DocNo := '';
      DocArchive := '';
      DocLineType := '';
      DocLineNo := '';
      DocLineDescription := '';
      DocLineQuantity := 0;
      DocLineUnit := '';

      case SourceDocType of
        SourceDocType::SalesOrder:
          if SalesLine.FINDFIRST then
            AssignLineFields(
              FORMAT(SalesLine."Document Type"),SalesLine."Document No.",'',FORMAT(SalesLine.Type),
              SalesLine."No.",SalesLine.Description,SalesLine.Quantity,SalesLine."Unit of Measure Code")
          else
            if SalesLineArchive.FINDFIRST then
              AssignLineFields(
                FORMAT(SalesLineArchive."Document Type"),SalesLineArchive."Document No.",ArchivedTxt,
                FORMAT(SalesLineArchive.Type),SalesLineArchive."No.",SalesLineArchive.Description,
                SalesLineArchive.Quantity,SalesLineArchive."Unit of Measure Code");
        SourceDocType::BlanketSalesOrder:
          if BlanketSalesOrderLine.FINDFIRST then
            AssignLineFields(
              FORMAT(BlanketSalesOrderLine."Document Type"),BlanketSalesOrderLine."Document No.",'',
              FORMAT(BlanketSalesOrderLine.Type),BlanketSalesOrderLine."No.",BlanketSalesOrderLine.Description,
              BlanketSalesOrderLine.Quantity,BlanketSalesOrderLine."Unit of Measure Code")
          else
            if BlanketSalesOrderLineArchive.FINDFIRST then
              AssignLineFields(
                FORMAT(BlanketSalesOrderLineArchive."Document Type"),BlanketSalesOrderLineArchive."Document No.",ArchivedTxt,
                FORMAT(BlanketSalesOrderLineArchive.Type),BlanketSalesOrderLineArchive."No.",BlanketSalesOrderLineArchive.Description,
                BlanketSalesOrderLineArchive.Quantity,BlanketSalesOrderLineArchive."Unit of Measure Code");
        SourceDocType::PurchaseOrder:
          if PurchLine.FINDFIRST then
            AssignLineFields(
              FORMAT(PurchLine."Document Type"),PurchLine."Document No.",'',FORMAT(PurchLine.Type),
              PurchLine."No.",PurchLine.Description,PurchLine.Quantity,PurchLine."Unit of Measure Code")
          else
            if PurchLineArchive.FINDFIRST then
              AssignLineFields(
                FORMAT(PurchLineArchive."Document Type"),PurchLineArchive."Document No.",ArchivedTxt,FORMAT(PurchLineArchive.Type),
                PurchLineArchive."No.",PurchLineArchive.Description,PurchLineArchive.Quantity,PurchLineArchive."Unit of Measure Code");
        SourceDocType::BlanketPurchaseOrder:
          if BlanketPurchOrderLine.FINDFIRST then
            AssignLineFields(
              FORMAT(BlanketPurchOrderLine."Document Type"),BlanketPurchOrderLine."Document No.",'',
              FORMAT(BlanketPurchOrderLine.Type),BlanketPurchOrderLine."No.",BlanketPurchOrderLine.Description,
              BlanketPurchOrderLine.Quantity,BlanketPurchOrderLine."Unit of Measure Code")
          else
            if BlanketPurchOrderLineArchive.FINDFIRST then
              AssignLineFields(
                FORMAT(BlanketPurchOrderLineArchive."Document Type"),BlanketPurchOrderLineArchive."Document No.",ArchivedTxt,
                FORMAT(BlanketPurchOrderLineArchive.Type),BlanketPurchOrderLineArchive."No.",BlanketPurchOrderLineArchive.Description,
                BlanketPurchOrderLineArchive.Quantity,BlanketPurchOrderLineArchive."Unit of Measure Code");
        SourceDocType::SalesShipment:
          if SalesShptLine.FINDFIRST then
            AssignLineFields(
              SalesShptLine.TABLECAPTION,SalesShptLine."Document No.",'',FORMAT(SalesShptLine.Type),
              SalesShptLine."No.",SalesShptLine.Description,SalesShptLine.Quantity,SalesShptLine."Unit of Measure Code");
        SourceDocType::PurchaseReceipt:
          if PurchRcptLine.FINDFIRST then
            AssignLineFields(
              PurchRcptLine.TABLECAPTION,PurchRcptLine."Document No.",'',FORMAT(PurchRcptLine.Type),
              PurchRcptLine."No.",PurchRcptLine.Description,PurchRcptLine.Quantity,PurchRcptLine."Unit of Measure Code");
        SourceDocType::SalesInvoice:
          if SalesInvLine.FINDFIRST then
            AssignLineFields(
              SalesInvLine.TABLECAPTION,SalesInvLine."Document No.",'',FORMAT(SalesInvLine.Type),
              SalesInvLine."No.",SalesInvLine.Description,SalesInvLine.Quantity,SalesInvLine."Unit of Measure Code");
        SourceDocType::PurchaseInvoice:
          if PurchInvLine.FINDFIRST then
            AssignLineFields(
              PurchInvLine.TABLECAPTION,PurchInvLine."Document No.",'',FORMAT(PurchInvLine.Type),
              PurchInvLine."No.",PurchInvLine.Description,PurchInvLine.Quantity,PurchInvLine."Unit of Measure Code");
      end;

      DocumentCaption := DELCHR(DocArchive + ' ' + DocType + ' ' + DocNo,'<',' ');
    END;

    LOCAL PROCEDURE ShowRecords@1005();
    BEGIN
      TempDocumentEntry := Rec;
      if TempDocumentEntry.FIND then
        Rec := TempDocumentEntry;

      with TempDocumentEntry do
        case "Table ID" of
          DATABASE::"Sales Line":
            begin
              if "Document Type" = "Document Type"::"Blanket Order" then
                PAGE.RUNMODAL(PAGE::"Sales Lines",BlanketSalesOrderLine)
              else
                PAGE.RUNMODAL(PAGE::"Sales Lines",SalesLine);
            end;
          DATABASE::"Sales Shipment Line":
            PAGE.RUNMODAL(0,SalesShptLine);
          DATABASE::"Sales Invoice Line":
            PAGE.RUNMODAL(0,SalesInvLine);
          DATABASE::"Sales Cr.Memo Line":
            PAGE.RUNMODAL(0,SalesCrMemoLine);
          DATABASE::"Sales Line Archive":
            begin
              if "Document Type" = "Document Type"::"Blanket Order" then
                PAGE.RUNMODAL(PAGE::"Sales Line Archive List",BlanketSalesOrderLineArchive)
              else
                PAGE.RUNMODAL(PAGE::"Sales Line Archive List",SalesLineArchive);
            end;
          DATABASE::"Return Receipt Line":
            PAGE.RUNMODAL(0,ReturnReceiptLine);
          DATABASE::"Purchase Line":
            begin
              if "Document Type" = "Document Type"::"Blanket Order" then
                PAGE.RUNMODAL(PAGE::"Purchase Lines",BlanketPurchOrderLine)
              else
                PAGE.RUNMODAL(PAGE::"Purchase Lines",PurchLine);
            end;
          DATABASE::"Purch. Rcpt. Line":
            PAGE.RUNMODAL(0,PurchRcptLine);
          DATABASE::"Purch. Inv. Line":
            PAGE.RUNMODAL(0,PurchInvLine);
          DATABASE::"Purch. Cr. Memo Line":
            PAGE.RUNMODAL(0,PurchCrMemoLine);
          DATABASE::"Purchase Line Archive":
            begin
              if "Document Type" = "Document Type"::"Blanket Order" then
                PAGE.RUNMODAL(PAGE::"Purchase Line Archive List",BlanketPurchOrderLineArchive)
              else
                PAGE.RUNMODAL(PAGE::"Purchase Line Archive List",PurchLineArchive);
            end;
          DATABASE::"Return Shipment Line":
            PAGE.RUNMODAL(0,ReturnShipmentLine);
        end;
    END;

    LOCAL PROCEDURE AssignLineFields@21(NewDocType@1000 : Text[30];NewDocNo@1001 : Code[20];NewDocArchive@1002 : Text[30];NewDocLineType@1003 : Text[30];NewDocLineItemNo@1004 : Code[20];NewDocLineDescription@1005 : Text[50];NewDocLineQuantity@1006 : Decimal;NewDocLineUnit@1007 : Code[10]);
    BEGIN
      DocType := NewDocType;
      DocNo := NewDocNo;
      DocArchive := NewDocArchive;
      DocLineType := NewDocLineType;
      DocLineNo := NewDocLineItemNo;
      DocLineDescription := NewDocLineDescription;
      DocLineQuantity := NewDocLineQuantity;
      DocLineUnit := NewDocLineUnit;
    END;

    LOCAL PROCEDURE FindPurchCreditMemoLines@39(OrderNo@1001 : Code[20];OrderLineNo@1000 : Integer);
    BEGIN
      if PurchCrMemoLine.READPERMISSION then begin
        PurchCrMemoLine.RESET;
        PurchCrMemoLine.SETRANGE("Order No.",OrderNo);
        PurchCrMemoLine.SETRANGE("Order Line No.",OrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Purch. Cr. Memo Line",3,PostedPurchaseCreditMemoLinesTxt,PurchCrMemoLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindPurchOrderLines@36(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      if PurchLine.READPERMISSION then begin
        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
        PurchLine.SETRANGE("Document No.",DocNo);
        PurchLine.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(
          DATABASE::"Purchase Line",1,PurchaseOrderLinesTxt,PurchLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindPurchOrderLinesByBlanketOrder@37(BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1000 : Integer);
    BEGIN
      if PurchLine.READPERMISSION then begin
        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
        PurchLine.SETRANGE("Blanket Order No.",BlanketOrderNo);
        PurchLine.SETRANGE("Blanket Order Line No.",BlanketOrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Purchase Line",1,PurchaseOrderLinesTxt,PurchLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindPurchBlanketOrderLines@53(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      if BlanketPurchOrderLine.READPERMISSION then begin
        BlanketPurchOrderLine.RESET;
        BlanketPurchOrderLine.SETRANGE("Document Type",BlanketPurchOrderLine."Document Type"::"Blanket Order");
        BlanketPurchOrderLine.SETRANGE("Document No.",DocNo);
        BlanketPurchOrderLine.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(
          DATABASE::"Purchase Line",4,BlanketPurchaseOrderLinesTxt,BlanketPurchOrderLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindPurchReturnOrderLines@50(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      if PurchLine.READPERMISSION then begin
        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::"Return Order");
        PurchLine.SETRANGE("Document No.",DocNo);
        PurchLine.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(
          DATABASE::"Purchase Line",5,PurchaseReturnOrderLinesTxt,PurchLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindPurchOrderLinesArchive@29(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      if PurchLineArchive.READPERMISSION then begin
        PurchLineArchive.RESET;
        PurchLineArchive.SETRANGE("Document Type",PurchLineArchive."Document Type"::Order);
        PurchLineArchive.SETRANGE("Document No.",DocNo);
        PurchLineArchive.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(
          DATABASE::"Purchase Line Archive",1,ArchivedPurchaseOrderLinesTxt,PurchLineArchive.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindPurchBlanketOrderLinesArchive@55(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      if BlanketPurchOrderLineArchive.READPERMISSION then begin
        BlanketPurchOrderLineArchive.RESET;
        BlanketPurchOrderLineArchive.SETRANGE("Document Type",BlanketPurchOrderLineArchive."Document Type"::"Blanket Order");
        BlanketPurchOrderLineArchive.SETRANGE("Document No.",DocNo);
        BlanketPurchOrderLineArchive.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(
          DATABASE::"Purchase Line Archive",4,ArchivedBlanketPurchaseOrderLinesTxt,BlanketPurchOrderLineArchive.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindPurchReturnOrderLinesArchive@67(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      if PurchLineArchive.READPERMISSION then begin
        PurchLineArchive.RESET;
        PurchLineArchive.SETRANGE("Document Type",PurchLineArchive."Document Type"::"Return Order");
        PurchLineArchive.SETRANGE("Document No.",DocNo);
        PurchLineArchive.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(
          DATABASE::"Purchase Line Archive",5,ArchivedPurchaseReturnOrderLinesTxt,PurchLineArchive.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindPurchOrderLinesArchiveByBlanketOrder@40(BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1000 : Integer);
    BEGIN
      if PurchLineArchive.READPERMISSION then begin
        PurchLineArchive.RESET;
        PurchLineArchive.SETRANGE("Document Type",PurchLineArchive."Document Type"::Order);
        PurchLineArchive.SETRANGE("Blanket Order No.",BlanketOrderNo);
        PurchLineArchive.SETRANGE("Blanket Order Line No.",BlanketOrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Purchase Line Archive",1,ArchivedPurchaseOrderLinesTxt,PurchLineArchive.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindPurchReceiptLinesByOrder@8(OrderNo@1001 : Code[20];OrderLineNo@1000 : Integer);
    BEGIN
      if PurchRcptLine.READPERMISSION then begin
        PurchRcptLine.RESET;
        PurchRcptLine.SETCURRENTKEY("Order No.","Order Line No.");
        PurchRcptLine.SETRANGE("Order No.",OrderNo);
        PurchRcptLine.SETRANGE("Order Line No.",OrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Purch. Rcpt. Line",0,PostedPurchaseReceiptLinesTxt,PurchRcptLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindPurchReceiptLinesByBlanketOrder@10(BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1000 : Integer);
    BEGIN
      if PurchRcptLine.READPERMISSION then begin
        PurchRcptLine.RESET;
        PurchRcptLine.SETRANGE("Blanket Order No.",BlanketOrderNo);
        PurchRcptLine.SETRANGE("Blanket Order Line No.",BlanketOrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Purch. Rcpt. Line",0,PostedPurchaseReceiptLinesTxt,PurchRcptLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindPurchInvoiceLinesByOrder@19(OrderNo@1001 : Code[20];OrderLineNo@1000 : Integer);
    BEGIN
      if PurchInvLine.READPERMISSION then begin
        PurchInvLine.RESET;
        PurchInvLine.SETRANGE("Order No.",OrderNo);
        PurchInvLine.SETRANGE("Order Line No.",OrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Purch. Inv. Line",0,PostedPurchaseInvoiceLinesTxt,PurchInvLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindPurchInvoiceLinesByBlanketOrder@23(BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1000 : Integer);
    BEGIN
      if PurchInvLine.READPERMISSION then begin
        PurchInvLine.RESET;
        PurchInvLine.SETRANGE("Blanket Order No.",BlanketOrderNo);
        PurchInvLine.SETRANGE("Blanket Order Line No.",BlanketOrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Purch. Inv. Line",0,PostedPurchaseInvoiceLinesTxt,PurchInvLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindReturnReceiptLines@31(ReturnOrderNo@1000 : Code[20];ReturnOrderLineNo@1001 : Integer);
    BEGIN
      if ReturnReceiptLine.READPERMISSION then begin
        ReturnReceiptLine.RESET;
        ReturnReceiptLine.SETRANGE("Return Order No.",ReturnOrderNo);
        ReturnReceiptLine.SETRANGE("Return Order Line No.",ReturnOrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Return Receipt Line",5,PostedReturnReceiptLinesTxt,ReturnReceiptLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindReturnShipmentLines@38(ReturnOrderNo@1001 : Code[20];ReturnOrderLineNo@1000 : Integer);
    BEGIN
      if ReturnShipmentLine.READPERMISSION then begin
        ReturnShipmentLine.RESET;
        ReturnShipmentLine.SETRANGE("Return Order No.",ReturnOrderNo);
        ReturnShipmentLine.SETRANGE("Return Order Line No.",ReturnOrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Return Shipment Line",5,PostedReturnShipmentLinesTxt,ReturnShipmentLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindSalesCreditMemoLines@34(OrderNo@1001 : Code[20];OrderLineNo@1000 : Integer);
    BEGIN
      if SalesCrMemoLine.READPERMISSION then begin
        SalesCrMemoLine.RESET;
        SalesCrMemoLine.SETRANGE("Order No.",OrderNo);
        SalesCrMemoLine.SETRANGE("Order Line No.",OrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Sales Cr.Memo Line",3,PostedSalesCreditMemoLinesTxt,SalesCrMemoLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindSalesOrderLines@32(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      if SalesLine.READPERMISSION then begin
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
        SalesLine.SETRANGE("Document No.",DocNo);
        SalesLine.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(
          DATABASE::"Sales Line",1,SalesOrderLinesTxt,SalesLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindSalesOrderLinesByBlanketOrder@41(BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1000 : Integer);
    BEGIN
      if SalesLine.READPERMISSION then begin
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Order);
        SalesLine.SETRANGE("Blanket Order No.",BlanketOrderNo);
        SalesLine.SETRANGE("Blanket Order Line No.",BlanketOrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Sales Line",1,SalesOrderLinesTxt,SalesLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindSalesBlanketOrderLines@60(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      if BlanketSalesOrderLine.READPERMISSION then begin
        BlanketSalesOrderLine.RESET;
        BlanketSalesOrderLine.SETRANGE("Document Type",BlanketSalesOrderLine."Document Type"::"Blanket Order");
        BlanketSalesOrderLine.SETRANGE("Document No.",DocNo);
        BlanketSalesOrderLine.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(
          DATABASE::"Sales Line",4,BlanketSalesOrderLinesTxt,BlanketSalesOrderLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindSalesReturnOrderLines@62(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      if SalesLine.READPERMISSION then begin
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::"Return Order");
        SalesLine.SETRANGE("Document No.",DocNo);
        SalesLine.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(
          DATABASE::"Sales Line",5,SalesReturnOrderLinesTxt,SalesLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindSalesOrderLinesArchive@35(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      if SalesLineArchive.READPERMISSION then begin
        SalesLineArchive.RESET;
        SalesLineArchive.SETRANGE("Document Type",SalesLineArchive."Document Type"::Order);
        SalesLineArchive.SETRANGE("Document No.",DocNo);
        SalesLineArchive.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(
          DATABASE::"Sales Line Archive",1,ArchivedSalesOrderLinesTxt,SalesLineArchive.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindSalesBlanketOrderLinesArchive@61(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      if BlanketSalesOrderLineArchive.READPERMISSION then begin
        BlanketSalesOrderLineArchive.RESET;
        BlanketSalesOrderLineArchive.SETRANGE("Document Type",BlanketSalesOrderLineArchive."Document Type"::"Blanket Order");
        BlanketSalesOrderLineArchive.SETRANGE("Document No.",DocNo);
        BlanketSalesOrderLineArchive.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(
          DATABASE::"Sales Line Archive",4,ArchivedBlanketSalesOrderLinesTxt,BlanketSalesOrderLineArchive.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindSalesReturnOrderLinesArchive@63(DocNo@1001 : Code[20];DocLineNo@1000 : Integer);
    BEGIN
      if SalesLineArchive.READPERMISSION then begin
        SalesLineArchive.RESET;
        SalesLineArchive.SETRANGE("Document Type",SalesLineArchive."Document Type"::"Return Order");
        SalesLineArchive.SETRANGE("Document No.",DocNo);
        SalesLineArchive.SETRANGE("Line No.",DocLineNo);
        InsertIntoDocEntry(
          DATABASE::"Sales Line Archive",5,ArchivedSalesReturnOrderLinesTxt,SalesLineArchive.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindSalesOrderLinesArchiveByBlanketOrder@43(BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1000 : Integer);
    BEGIN
      if SalesLineArchive.READPERMISSION then begin
        SalesLineArchive.RESET;
        SalesLineArchive.SETRANGE("Document Type",SalesLineArchive."Document Type"::Order);
        SalesLineArchive.SETRANGE("Blanket Order No.",BlanketOrderNo);
        SalesLineArchive.SETRANGE("Blanket Order Line No.",BlanketOrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Sales Line Archive",1,ArchivedSalesOrderLinesTxt,SalesLineArchive.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindSalesShipmentLinesByOrder@20(OrderNo@1001 : Code[20];OrderLineNo@1000 : Integer);
    BEGIN
      if SalesShptLine.READPERMISSION then begin
        SalesShptLine.RESET;
        SalesShptLine.SETRANGE("Order No.",OrderNo);
        SalesShptLine.SETRANGE("Order Line No.",OrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Sales Shipment Line",0,PostedSalesShipmentLinesTxt,SalesShptLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindSalesShipmentLinesByBlanketOrder@22(BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1000 : Integer);
    BEGIN
      if SalesShptLine.READPERMISSION then begin
        SalesShptLine.RESET;
        SalesShptLine.SETRANGE("Blanket Order No.",BlanketOrderNo);
        SalesShptLine.SETRANGE("Blanket Order Line No.",BlanketOrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Sales Shipment Line",0,PostedSalesShipmentLinesTxt,SalesShptLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindSalesInvoiceLinesByOrder@25(OrderNo@1001 : Code[20];OrderLineNo@1000 : Integer);
    BEGIN
      if SalesInvLine.READPERMISSION then begin
        SalesInvLine.RESET;
        SalesInvLine.SETRANGE("Order No.",OrderNo);
        SalesInvLine.SETRANGE("Order Line No.",OrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Sales Invoice Line",0,PostedSalesInvoiceLinesTxt,SalesInvLine.COUNT);
      end;
    END;

    LOCAL PROCEDURE FindSalesInvoiceLinesByBlanketOrder@27(BlanketOrderNo@1001 : Code[20];BlanketOrderLineNo@1000 : Integer);
    BEGIN
      if SalesInvLine.READPERMISSION then begin
        SalesInvLine.RESET;
        SalesInvLine.SETRANGE("Blanket Order No.",BlanketOrderNo);
        SalesInvLine.SETRANGE("Blanket Order Line No.",BlanketOrderLineNo);
        InsertIntoDocEntry(
          DATABASE::"Sales Invoice Line",0,PostedSalesInvoiceLinesTxt,SalesInvLine.COUNT);
      end;
    END;

    BEGIN
    END.
  }
}

