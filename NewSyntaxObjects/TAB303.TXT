OBJECT Table 303 Finance Charge Memo Line
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160108.147T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    OnInsert=VAR
               FinChrgMemoHeader@1000 : Record "Finance Charge Memo Header";
             BEGIN
               FinChrgMemoHeader.GET("Finance Charge Memo No.");
               if Type = Type::"Customer Ledger Entry" then
                 TESTFIELD("Attached to Line No.",0);
               "Attached to Line No." := 0;
             END;

    OnModify=BEGIN
               TESTFIELD("System-Created Entry",false);
             END;

    OnDelete=BEGIN
               FinChrgMemoLine.SETRANGE("Finance Charge Memo No.","Finance Charge Memo No.");
               FinChrgMemoLine.SETRANGE("Attached to Line No.","Line No.");
               FinChrgMemoLine.DELETEALL;
             END;

    CaptionML=ENU=Finance Charge Memo Line;
  }
  FIELDS
  {
    { 1   ;   ;Finance Charge Memo No.;Code20     ;TableRelation="Finance Charge Memo Header";
                                                   CaptionML=ENU=Finance Charge Memo No. }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No.;
                                                   NotBlank=true }
    { 3   ;   ;Attached to Line No.;Integer       ;TableRelation="Finance Charge Memo Line"."Line No." WHERE ("Finance Charge Memo No."=FIELD("Finance Charge Memo No."));
                                                   CaptionML=ENU=Attached to Line No.;
                                                   Editable=false }
    { 4   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                if Type <> xRec.Type then begin
                                                                  FinChrgMemoLine := Rec;
                                                                  INIT;
                                                                  Type := FinChrgMemoLine.Type;
                                                                  GetFinChrgMemoHeader;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Customer Ledger Entry";
                                                   OptionString=" ","G/L Account","Customer Ledger Entry" }
    { 5   ;   ;Entry No.           ;Integer       ;TableRelation="Cust. Ledger Entry";
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                TESTFIELD("Attached to Line No.",0);
                                                                GetFinChrgMemoHeader;
                                                                CustLedgEntry.GET("Entry No.");
                                                                case FinChrgTerms."Interest Calculation" of
                                                                  FinChrgTerms."Interest Calculation"::"Open Entries":
                                                                    CustLedgEntry.TESTFIELD(Open,true);
                                                                  FinChrgTerms."Interest Calculation"::"Closed Entries":
                                                                    CustLedgEntry.TESTFIELD(Open,false);
                                                                end;
                                                                CustLedgEntry.TESTFIELD("Customer No.",FinChrgMemoHeader."Customer No.");
                                                                CustLedgEntry.TESTFIELD("On Hold",'');
                                                                if CustLedgEntry."Currency Code" <> FinChrgMemoHeader."Currency Code" then
                                                                  ERROR(
                                                                    Text000,
                                                                    FinChrgMemoHeader.FIELDCAPTION("Currency Code"),
                                                                    FinChrgMemoHeader.TABLECAPTION,CustLedgEntry.TABLECAPTION);
                                                                "Posting Date" := CustLedgEntry."Posting Date";
                                                                "Document Date" := CustLedgEntry."Document Date";
                                                                "Due Date" := CustLedgEntry."Due Date";
                                                                "Document Type" := CustLedgEntry."Document Type";
                                                                "Document No." := CustLedgEntry."Document No.";
                                                                Description := CustLedgEntry.Description;
                                                                CustLedgEntry.SETFILTER("Date Filter",'..%1',FinChrgMemoHeader."Document Date");
                                                                CustLedgEntry.CALCFIELDS(Amount,"Remaining Amount");
                                                                "Original Amount" := CustLedgEntry.Amount;
                                                                "Remaining Amount" := CustLedgEntry."Remaining Amount";
                                                                CalcFinChrg;
                                                              END;

                                                   OnLookup=BEGIN
                                                              if Type <> Type::"Customer Ledger Entry" then
                                                                exit;
                                                              SetCustLedgEntryView;
                                                              if CustLedgEntry.GET("Entry No.") then;
                                                              LookupCustLedgEntry;
                                                            END;

                                                   CaptionML=ENU=Entry No.;
                                                   BlankZero=true }
    { 7   ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date;
                                                   Editable=false }
    { 8   ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date;
                                                   Editable=false }
    { 9   ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date;
                                                   Editable=false }
    { 10  ;   ;Document Type       ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                VALIDATE("Document No.");
                                                              END;

                                                   CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund }
    { 11  ;   ;Document No.        ;Code20        ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                "Entry No." := 0;
                                                                if "Document No." <> '' then begin
                                                                  SetCustLedgEntryView;
                                                                  if "Document Type" <> 0 then
                                                                    CustLedgEntry.SETRANGE("Document Type","Document Type");
                                                                  CustLedgEntry.SETRANGE("Document No.","Document No.");
                                                                  if CustLedgEntry.FINDFIRST then
                                                                    VALIDATE("Entry No.",CustLedgEntry."Entry No.")
                                                                  else
                                                                    ERROR(Text004,FORMAT(Type),FIELDCAPTION("Document No."),"Document No.");
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupDocNo;
                                                            END;

                                                   CaptionML=ENU=Document No. }
    { 12  ;   ;Description         ;Text100       ;CaptionML=ENU=Description }
    { 13  ;   ;Original Amount     ;Decimal       ;CaptionML=ENU=Original Amount;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 14  ;   ;Remaining Amount    ;Decimal       ;CaptionML=ENU=Remaining Amount;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 15  ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST("G/L Account")) "G/L Account";
                                                   OnValidate=BEGIN
                                                                if "No." <> '' then
                                                                  case Type of
                                                                    Type::" ":
                                                                      begin
                                                                        StdTxt.GET("No.");
                                                                        Description := StdTxt.Description;
                                                                      end;
                                                                    Type::"Customer Ledger Entry":
                                                                      begin
                                                                        FinChrgMemoLine.Type := FinChrgMemoLine.Type::" ";
                                                                        FinChrgMemoLine2.Type := FinChrgMemoLine2.Type::"G/L Account";
                                                                        ERROR(
                                                                          Text001,
                                                                          FIELDCAPTION(Type),FinChrgMemoLine.Type,FinChrgMemoLine2.Type);
                                                                      end;
                                                                    Type::"G/L Account":
                                                                      begin
                                                                        GLAcc.GET("No.");
                                                                        GLAcc.CheckGLAcc;
                                                                        if not "System-Created Entry" then
                                                                          GLAcc.TESTFIELD("Direct Posting",true);
                                                                        GLAcc.TESTFIELD("Gen. Prod. Posting Group");
                                                                        Description := GLAcc.Name;
                                                                        GetFinChrgMemoHeader;
                                                                        "Tax Group Code" := GLAcc."Tax Group Code";
                                                                        VALIDATE("Gen. Prod. Posting Group",GLAcc."Gen. Prod. Posting Group");
                                                                        VALIDATE("VAT Prod. Posting Group",GLAcc."VAT Prod. Posting Group");
                                                                      end;
                                                                  end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 16  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                if Type = Type::" " then begin
                                                                  FinChrgMemoLine.Type := Type::"G/L Account";
                                                                  FinChrgMemoLine2.Type := Type::"Customer Ledger Entry";
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION(Type),FinChrgMemoLine.Type,FinChrgMemoLine2.Type);
                                                                end;
                                                                if Type = Type::"Customer Ledger Entry" then
                                                                  TESTFIELD("Attached to Line No.",0);
                                                                GetFinChrgMemoHeader;
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                case "VAT Calculation Type" of
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    "VAT Amount" :=
                                                                      ROUND(Amount * "VAT %" / 100,Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    begin
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          FinChrgMemoHeader."Tax Area Code","Tax Group Code",FinChrgMemoHeader."Tax Liable",
                                                                          FinChrgMemoHeader."Posting Date",Amount,0,0);
                                                                      if Amount - "VAT Amount" <> 0 then
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / Amount,0.00001)
                                                                      else
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                    end;
                                                                  4:
                                                                    begin
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                    end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   BlankZero=true;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 17  ;   ;Interest Rate       ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::"Customer Ledger Entry");
                                                                TESTFIELD("Entry No.");
                                                                CalcFinChrg;
                                                              END;

                                                   CaptionML=ENU=Interest Rate;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 18  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                if xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" then
                                                                  if GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") then
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 19  ;   ;VAT %               ;Decimal       ;CaptionML=ENU=Tax %;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 20  ;   ;VAT Calculation Type;Option        ;CaptionML=ENU=VAT Calculation Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge Tax,Full VAT,Sales Tax;
                                                   OptionString="Normal VAT","Reverse Charge VAT","Full VAT","Sales Tax";
                                                   Editable=false }
    { 21  ;   ;VAT Amount          ;Decimal       ;CaptionML=ENU=Tax Amount;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 22  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Tax Group Code }
    { 23  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                GetFinChrgMemoHeader;
                                                                VATPostingSetup.GET(FinChrgMemoHeader."VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                "VAT Clause Code" := VATPostingSetup."VAT Clause Code";
                                                                case "VAT Calculation Type" of
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    "VAT %" := 0;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    begin
                                                                      TESTFIELD(Type,Type::"G/L Account");
                                                                      TESTFIELD("No.",VATPostingSetup.GetSalesAccount(false));
                                                                    end;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    begin
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          FinChrgMemoHeader."Tax Area Code","Tax Group Code",FinChrgMemoHeader."Tax Liable",
                                                                          FinChrgMemoHeader."Posting Date",Amount,0,0);
                                                                      if Amount - "VAT Amount" <> 0 then
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / Amount,0.00001)
                                                                      else
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                    end;
                                                                end;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=ENU=Tax Prod. Posting Group }
    { 24  ;   ;VAT Identifier      ;Code20        ;CaptionML=ENU=Tax Identifier;
                                                   Editable=false }
    { 25  ;   ;Line Type           ;Option        ;CaptionML=ENU=Line Type;
                                                   OptionCaptionML=ENU=Finance Charge Memo Line,Beginning Text,Ending Text,Rounding;
                                                   OptionString="Finance Charge Memo Line","Beginning Text","Ending Text",Rounding }
    { 26  ;   ;VAT Clause Code     ;Code20        ;TableRelation="VAT Clause";
                                                   CaptionML=ENU=Tax Clause Code }
    { 30  ;   ;Detailed Interest Rates Entry;Boolean;
                                                   CaptionML=ENU=Detailed Interest Rates Entry }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=ENU=System-Created Entry;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Finance Charge Memo No.","Line No."    ;SumIndexFields=Amount,"VAT Amount","Remaining Amount";
                                                   MaintainSIFTIndex=false;
                                                   Clustered=true }
    {    ;"Finance Charge Memo No.",Type,"Detailed Interest Rates Entry";
                                                   SumIndexFields=Amount,"VAT Amount","Remaining Amount";
                                                   MaintainSQLIndex=false;
                                                   MaintainSIFTIndex=false }
    {    ;"Finance Charge Memo No.","Detailed Interest Rates Entry";
                                                   SumIndexFields=Amount,"VAT Amount","Remaining Amount" }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The %1 on the %2 and the %3 must be the same.';
      Text001@1001 : TextConst 'ENU=%1 must be %2 or %3.';
      Text002@1002 : TextConst 'ENU=Document';
      CustLedgEntry2@1003 : Record "Cust. Ledger Entry";
      FinChrgTerms@1004 : Record "Finance Charge Terms";
      FinChrgMemoHeader@1005 : Record "Finance Charge Memo Header";
      FinChrgMemoLine@1006 : Record "Finance Charge Memo Line";
      FinChrgMemoLine2@1007 : Record "Finance Charge Memo Line";
      ReminderEntry@1009 : Record "Reminder/Fin. Charge Entry";
      CustLedgEntry@1010 : Record "Cust. Ledger Entry";
      Currency@1012 : Record Currency;
      VATPostingSetup@1013 : Record "VAT Posting Setup";
      CustPostingGr@1014 : Record "Customer Posting Group";
      GLAcc@1015 : Record "G/L Account";
      StdTxt@1016 : Record "Standard Text";
      GenProdPostingGrp@1017 : Record "Gen. Product Posting Group";
      ApplicationManagement@1023 : Codeunit ApplicationManagement;
      SalesTaxCalculate@1018 : Codeunit "Sales Tax Calculate";
      InterestCalcDate@1019 : Date;
      DocTypeText@1021 : Text[30];
      CalcInterest@1022 : Boolean;
      Text004@1011 : TextConst 'ENU=There is no open %1 with %2 %3.';
      ClosedatDate@1025 : Date;
      NotEnoughSpaceToInsertErr@1020 : TextConst 'ENU=There is not enough space to insert lines with additional interest rates.';
      InvalidInterestRateDateErr@1008 : TextConst '@@@=%1 - date;ENU=Create interest rate with start date prior to %1.';
      Checking@1028 : Boolean;
      NrOfDays@1027 : Integer;
      NrOfLinesToInsert@1026 : Integer;
      NrOfLines@1024 : Integer;

    LOCAL PROCEDURE CalcFinChrg@6();
    VAR
      FinanceChargeInterestRate@1012 : Record "Finance Charge Interest Rate";
      ExtraFinChrgMemoLine@1011 : Record "Finance Charge Memo Line";
      BaseAmount@1010 : Decimal;
      UseDueDate@1009 : Date;
      UseCalcDate@1008 : Date;
      UseInterestRate@1004 : Decimal;
      CumAmount@1002 : Decimal;
      InsertedLines@1001 : Boolean;
    BEGIN
      OnBeforeCalcFinCharge(Rec);

      GetFinChrgMemoHeader;
      Amount := 0;
      "VAT Amount" := 0;
      "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
      "Gen. Prod. Posting Group" := '';
      "VAT Prod. Posting Group" := '';
      "Interest Rate" := 0;
      FinChrgMemoLine := Rec;
      FinChrgMemoLine.SETRANGE("Finance Charge Memo No.","Finance Charge Memo No.");
      FinChrgMemoLine.SETRANGE("Detailed Interest Rates Entry",true);
      FinChrgMemoLine.SETRANGE("Entry No.","Entry No.");
      FinChrgMemoLine.DELETEALL;
      CustLedgEntry.GET("Entry No.");
      if CustLedgEntry."On Hold" <> '' then
        exit;

      CalcFinanceChargeInterestRate(FinanceChargeInterestRate,UseDueDate,UseInterestRate,UseCalcDate);

      case FinChrgTerms."Interest Calculation Method" of
        FinChrgTerms."Interest Calculation Method"::"Average Daily Balance":
          begin
            if NrOfLinesToInsert = 0 then
              FinChrgTerms.TESTFIELD("Interest Period (Days)")
            else
              FinanceChargeInterestRate.TESTFIELD("Interest Period (Days)");
            ReminderEntry.SETCURRENTKEY("Customer Entry No.");
            ReminderEntry.SETRANGE("Customer Entry No.","Entry No.");
            ReminderEntry.SETRANGE(Type,ReminderEntry.Type::"Finance Charge Memo");
            InterestCalcDate := CustLedgEntry."Due Date";
            if ReminderEntry.FINDLAST then
              InterestCalcDate := ReminderEntry."Document Date";
            ReminderEntry.SETRANGE(Type,ReminderEntry.Type::Reminder);
            ReminderEntry.SETRANGE("Interest Posted",true);
            if ReminderEntry.FINDLAST then
              if ReminderEntry."Document Date" > InterestCalcDate then
                InterestCalcDate := ReminderEntry."Document Date";
            CalcInterest := false;
            if CALCDATE(FinChrgTerms."Grace Period","Due Date") < FinChrgMemoHeader."Document Date" then
              if NrOfLines = 0 then
                CumulateDetailedEntries(Amount,UseDueDate,UseCalcDate,
                  UseInterestRate,FinChrgTerms."Interest Period (Days)",BaseAmount)
              else
                CumulateDetailedEntries(Amount,UseDueDate,UseCalcDate,
                  UseInterestRate,FinanceChargeInterestRate."Interest Period (Days)",BaseAmount);
            NrOfDays := UseCalcDate - UseDueDate;

            if (NrOfLinesToInsert > 0) and
               (FinChrgTerms."Interest Calculation Method" = FinChrgTerms."Interest Calculation Method"::"Average Daily Balance")
            then
              InsertedLines :=
                CreateMulitplyInterestRateEntries(
                  ExtraFinChrgMemoLine,FinanceChargeInterestRate,UseDueDate,UseCalcDate,UseInterestRate,BaseAmount,CumAmount);
          end;
        FinChrgTerms."Interest Calculation Method"::"Balance Due":
          if CALCDATE(FinChrgTerms."Grace Period","Due Date") < FinChrgMemoHeader."Document Date" then begin
            Amount := "Remaining Amount" * "Interest Rate" / 100;
            BaseAmount := "Remaining Amount";
          end;
      end;

      if InsertedLines then
        BuildMultiDescription(FinChrgTerms."Line Description",UseDueDate,NrOfDays);
      BuildDescription(Description,UseInterestRate,UseDueDate,NrOfDays,BaseAmount);

      if Amount <> 0 then begin
        CustPostingGr.GET(FinChrgMemoHeader."Customer Posting Group");
        GLAcc.GET(CustPostingGr.GetInterestAccount);
        GLAcc.TESTFIELD("Gen. Prod. Posting Group");
        VALIDATE("Gen. Prod. Posting Group",GLAcc."Gen. Prod. Posting Group");
        VALIDATE("VAT Prod. Posting Group",GLAcc."VAT Prod. Posting Group");
      end;

      OnAfterCalcFinCharge(Rec);
    END;

    [External]
    PROCEDURE CheckAttachedLines@5() : Boolean;
    VAR
      FinChrgMemoLine@1000 : Record "Finance Charge Memo Line";
    BEGIN
      if "Line No." <> 0 then begin
        FinChrgMemoLine.SETRANGE("Finance Charge Memo No.","Finance Charge Memo No.");
        FinChrgMemoLine.SETRANGE("Attached to Line No.","Line No.");
        exit(not FinChrgMemoLine.ISEMPTY);
      end;
      exit(false);
    END;

    [External]
    PROCEDURE UpdateAttachedLines@8();
    VAR
      FinChrgMemoLine@1000 : Record "Finance Charge Memo Line";
    BEGIN
      FinChrgMemoLine.SETRANGE("Finance Charge Memo No.","Finance Charge Memo No.");
      FinChrgMemoLine.SETRANGE("Attached to Line No.","Line No.");
      FinChrgMemoLine.DELETEALL;
    END;

    LOCAL PROCEDURE SetCustLedgEntryView@9();
    BEGIN
      GetFinChrgMemoHeader;
      case FinChrgTerms."Interest Calculation" of
        FinChrgTerms."Interest Calculation"::"Open Entries":
          begin
            CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
            CustLedgEntry.SETRANGE("Customer No.",FinChrgMemoHeader."Customer No.");
            CustLedgEntry.SETRANGE(Open,true);
          end;
        FinChrgTerms."Interest Calculation"::"Closed Entries",
        FinChrgTerms."Interest Calculation"::"All Entries":
          begin
            CustLedgEntry.SETCURRENTKEY("Customer No.");
            CustLedgEntry.SETRANGE("Customer No.",FinChrgMemoHeader."Customer No.");
          end;
      end;
    END;

    LOCAL PROCEDURE LookupCustLedgEntry@12();
    BEGIN
      GetFinChrgMemoHeader;
      case FinChrgTerms."Interest Calculation" of
        FinChrgTerms."Interest Calculation"::"Open Entries":
          if PAGE.RUNMODAL(0,CustLedgEntry) = ACTION::LookupOK then
            VALIDATE("Entry No.",CustLedgEntry."Entry No.");
        FinChrgTerms."Interest Calculation"::"Closed Entries",
        FinChrgTerms."Interest Calculation"::"All Entries":
          if PAGE.RUNMODAL(PAGE::"Customer Ledger Entries",CustLedgEntry) = ACTION::LookupOK then
            VALIDATE("Entry No.",CustLedgEntry."Entry No.");
      end;
    END;

    LOCAL PROCEDURE GetFinChrgMemoHeader@2();
    BEGIN
      if "Finance Charge Memo No." <> FinChrgMemoHeader."No." then begin
        FinChrgMemoHeader.GET("Finance Charge Memo No.");
        ProcessFinChrgMemoHeader;
      end;
    END;

    [External]
    PROCEDURE SetFinChrgMemoHeader@4(VAR NewFinChrgMemoHeader@1000 : Record "Finance Charge Memo Header");
    BEGIN
      FinChrgMemoHeader := NewFinChrgMemoHeader;
      ProcessFinChrgMemoHeader;
    END;

    LOCAL PROCEDURE ProcessFinChrgMemoHeader@1();
    BEGIN
      FinChrgMemoHeader.TESTFIELD("Customer No.");
      FinChrgMemoHeader.TESTFIELD("Document Date");
      FinChrgMemoHeader.TESTFIELD("Customer Posting Group");
      FinChrgMemoHeader.TESTFIELD("Fin. Charge Terms Code");
      FinChrgTerms.GET(FinChrgMemoHeader."Fin. Charge Terms Code");
      if FinChrgMemoHeader."Currency Code" = '' then
        Currency.InitRoundingPrecision
      else begin
        Currency.GET(FinChrgMemoHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      end;
    END;

    [External]
    PROCEDURE GetCurrencyCode@10() : Code[10];
    VAR
      FinChrgMemoHeader@1000 : Record "Finance Charge Memo Header";
    BEGIN
      if "Finance Charge Memo No." = FinChrgMemoHeader."No." then
        exit(FinChrgMemoHeader."Currency Code");

      if FinChrgMemoHeader.GET("Finance Charge Memo No.") then
        exit(FinChrgMemoHeader."Currency Code");

      exit('');
    END;

    [External]
    PROCEDURE CalcClosedatDate@3() ClosedatDate : Date;
    BEGIN
      if CustLedgEntry2.GET(CustLedgEntry."Closed by Entry No.") then
        if CustLedgEntry2."Document Date" > CustLedgEntry."Closed at Date" then
          ClosedatDate := CustLedgEntry2."Document Date"
        else
          ClosedatDate := CustLedgEntry."Closed at Date";
      CustLedgEntry2.SETCURRENTKEY("Closed by Entry No.");
      CustLedgEntry2.SETRANGE("Closed by Entry No.",CustLedgEntry."Entry No.");
      if CustLedgEntry2.FIND('-') then
        repeat
          if CustLedgEntry2."Document Date" > CustLedgEntry."Closed at Date" then
            ClosedatDate := CustLedgEntry2."Document Date"
          else
            ClosedatDate := CustLedgEntry."Closed at Date";
        until CustLedgEntry2.NEXT = 0;
    END;

    PROCEDURE SetCheckingMode@18(DoChecking@1000 : Boolean);
    BEGIN
      Checking := DoChecking;
    END;

    LOCAL PROCEDURE BuildDescription@15(VAR Descr@1003 : Text;InterestRate@1002 : Decimal;DueDate@1001 : Date;NrOfDays@1000 : Integer;BaseAmount@1004 : Decimal);
    BEGIN
      DocTypeText := DELCHR(FORMAT("Document Type"),'<');
      if DocTypeText = '' then
        DocTypeText := Text002;
      if FinChrgTerms."Line Description" = '' then
        Descr := COPYSTR(CustLedgEntry.Description,1,MAXSTRLEN(Description))
      else
        Descr :=
          COPYSTR(
            STRSUBSTNO(
              FinChrgTerms."Line Description",
              CustLedgEntry.Description,
              DocTypeText,
              "Document No.",
              InterestRate,
              FORMAT("Original Amount",0,ApplicationManagement.AutoFormatTranslate(1,FinChrgMemoHeader."Currency Code")),
              FORMAT(BaseAmount,0,ApplicationManagement.AutoFormatTranslate(1,FinChrgMemoHeader."Currency Code")),
              DueDate,
              FinChrgMemoHeader."Currency Code",
              NrOfDays),
            1,
            MAXSTRLEN(Description));
    END;

    LOCAL PROCEDURE BuildMultiDescription@16(VAR Descr@1002 : Text;DueDate@1001 : Date;NrOfDays@1000 : Integer);
    BEGIN
      DocTypeText := DELCHR(FORMAT("Document Type"),'<');
      if DocTypeText = '' then
        DocTypeText := Text002;
      if FinChrgTerms.Description = '' then
        Descr := COPYSTR(CustLedgEntry.Description,1,MAXSTRLEN(Description))
      else
        Descr :=
          COPYSTR(
            STRSUBSTNO(
              FinChrgTerms."Detailed Lines Description",
              CustLedgEntry.Description,
              DocTypeText,
              "Document No.",
              FORMAT("Original Amount",0,ApplicationManagement.AutoFormatTranslate(1,FinChrgMemoHeader."Currency Code")),
              FORMAT("Remaining Amount",0,ApplicationManagement.AutoFormatTranslate(1,FinChrgMemoHeader."Currency Code")),
              DueDate,
              FinChrgMemoHeader."Currency Code",
              NrOfDays),
            1,
            MAXSTRLEN(Description));
    END;

    LOCAL PROCEDURE CumulateDetailedEntries@7(VAR CumAmount@1007 : Decimal;UseDueDate@1006 : Date;UseCalcDate@1005 : Date;UseInterestRate@1004 : Decimal;UseInterestPeriod@1003 : Integer;VAR BaseAmount@1002 : Decimal);
    VAR
      DetailedCustLedgEntry@1009 : Record "Detailed Cust. Ledg. Entry";
      IssuedReminderHeader@1008 : Record "Issued Reminder Header";
      InterestStartDate@1001 : Date;
      LineFee@1000 : Decimal;
    BEGIN
      CalcInterest := true;
      if CustLedgEntry."Calculate Interest" then begin
        ClosedatDate := CalcClosedatDate;
        if ClosedatDate <= CALCDATE(FinChrgTerms."Grace Period","Due Date") then
          CalcInterest := false;
      end;
      DetailedCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.","Entry Type","Posting Date");
      DetailedCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
      DetailedCustLedgEntry.SETFILTER("Entry Type",'%1|%2|%3|%4|%5',
        DetailedCustLedgEntry."Entry Type"::"Initial Entry",
        DetailedCustLedgEntry."Entry Type"::Application,
        DetailedCustLedgEntry."Entry Type"::"Payment Tolerance",
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance (VAT Excl.)",
        DetailedCustLedgEntry."Entry Type"::"Payment Discount Tolerance (VAT Adjustment)");
      DetailedCustLedgEntry.SETRANGE("Posting Date",0D,FinChrgMemoHeader."Document Date");
      CumAmount := 0;
      if DetailedCustLedgEntry.FINDSET then
        repeat
          if DetailedCustLedgEntry."Entry Type" = DetailedCustLedgEntry."Entry Type"::"Initial Entry" then
            InterestStartDate := UseDueDate
          else
            if UseDueDate < DetailedCustLedgEntry."Posting Date" then
              InterestStartDate := DetailedCustLedgEntry."Posting Date";
          if InterestCalcDate > InterestStartDate then
            InterestStartDate := InterestCalcDate;
          if InterestStartDate < UseCalcDate then
            CumAmount := CumAmount + (DetailedCustLedgEntry.Amount * (UseCalcDate - InterestStartDate));
        until DetailedCustLedgEntry.NEXT = 0;

      if not FinChrgTerms."Add. Line Fee in Interest" then
        if CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Reminder then
          if IssuedReminderHeader.GET(CustLedgEntry."Document No.") then begin
            IssuedReminderHeader.CALCFIELDS("Add. Fee per Line");
            LineFee := IssuedReminderHeader."Add. Fee per Line" + IssuedReminderHeader.CalculateLineFeeVATAmount;
            CumAmount := CumAmount - LineFee * (FinChrgMemoHeader."Document Date" - InterestStartDate);
            if CumAmount < 0 then
              CumAmount := 0;
          end;

      BaseAmount := CumAmount / UseInterestPeriod;
      if CalcInterest then
        CumAmount := ROUND(CumAmount / UseInterestPeriod * UseInterestRate / 100,Currency."Amount Rounding Precision")
      else
        CumAmount := 0;
    END;

    PROCEDURE LookupDocNo@14();
    BEGIN
      if Type <> Type::"Customer Ledger Entry" then
        exit;
      SetCustLedgEntryView;
      if "Document Type" <> 0 then
        CustLedgEntry.SETRANGE("Document Type","Document Type");
      if "Document No." <> '' then
        CustLedgEntry.SETRANGE("Document No.","Document No.");
      if CustLedgEntry.FINDFIRST then;
      CustLedgEntry.SETRANGE("Document Type");
      CustLedgEntry.SETRANGE("Document No.");
      LookupCustLedgEntry;
    END;

    LOCAL PROCEDURE CalcFinanceChargeInterestRate@17(VAR FinanceChargeInterestRate@1003 : Record "Finance Charge Interest Rate";VAR UseDueDate@1000 : Date;VAR UseInterestRate@1001 : Decimal;VAR UseCalcDate@1002 : Date);
    VAR
      LastRateFound@1004 : Boolean;
    BEGIN
      UseDueDate := CustLedgEntry."Due Date";
      UseInterestRate := FinChrgTerms."Interest Rate";
      UseCalcDate := 0D;
      NrOfLinesToInsert := 0;

      FinanceChargeInterestRate.INIT;
      FinanceChargeInterestRate.SETRANGE("Fin. Charge Terms Code",FinChrgMemoHeader."Fin. Charge Terms Code");
      FinanceChargeInterestRate."Fin. Charge Terms Code" := FinChrgMemoHeader."Fin. Charge Terms Code";
      if FinChrgTerms."Interest Calculation Method" = FinChrgTerms."Interest Calculation Method"::"Average Daily Balance" then
        FinanceChargeInterestRate."Start Date" := CALCDATE('<+1D>',CustLedgEntry."Due Date")
      else
        FinanceChargeInterestRate."Start Date" := FinChrgMemoHeader."Document Date";
      NrOfLinesToInsert := 0;
      NrOfLines := 0;
      LastRateFound := false;
      if FinanceChargeInterestRate.FIND('=<') then begin
        UseInterestRate := FinanceChargeInterestRate."Interest Rate";
        if FinChrgTerms."Interest Calculation Method" = FinChrgTerms."Interest Calculation Method"::"Average Daily Balance" then
          repeat
            if FinanceChargeInterestRate."Start Date" <= FinChrgMemoHeader."Document Date" then begin
              NrOfLines := NrOfLines + 1;
              UseInterestRate := FinanceChargeInterestRate."Interest Rate";
              if CALCDATE(FinChrgTerms."Grace Period","Due Date") < FinChrgMemoHeader."Document Date" then
                NrOfLinesToInsert := NrOfLinesToInsert + 1
            end else
              LastRateFound := true;
          until LastRateFound or (FinanceChargeInterestRate.NEXT = 0);
        if UseCalcDate = 0D then begin
          FinanceChargeInterestRate.NEXT(-1);
          UseCalcDate := FinanceChargeInterestRate."Start Date";
        end;
      end else
        if FinanceChargeInterestRate.COUNT > 0 then
          ERROR(InvalidInterestRateDateErr,FinanceChargeInterestRate."Start Date");
      if (UseCalcDate = 0D) or (UseCalcDate < FinChrgMemoHeader."Document Date") then
        UseCalcDate := FinChrgMemoHeader."Document Date";

      "Interest Rate" := UseInterestRate;
    END;

    LOCAL PROCEDURE CreateMulitplyInterestRateEntries@19(VAR ExtraFinChrgMemoLine@1000 : Record "Finance Charge Memo Line";VAR FinanceChargeInterestRate@1003 : Record "Finance Charge Interest Rate";VAR UseDueDate@1006 : Date;VAR UseCalcDate@1005 : Date;VAR UseInterestRate@1004 : Decimal;VAR BaseAmount@1009 : Decimal;VAR CumAmount@1010 : Decimal) InsertedLines : Boolean;
    VAR
      LineSpacing@1001 : Integer;
      NextLineNo@1002 : Integer;
      CurrInterestRateStartDate@1007 : Date;
      UseInterestPeriod@1008 : Integer;
    BEGIN
      NrOfDays := 0;
      ExtraFinChrgMemoLine.RESET;
      ExtraFinChrgMemoLine.SETRANGE("Finance Charge Memo No.","Finance Charge Memo No.");
      ExtraFinChrgMemoLine := Rec;
      if ExtraFinChrgMemoLine.FIND('>') then begin
        LineSpacing :=
          (ExtraFinChrgMemoLine."Line No." - "Line No.") div (1 + NrOfLinesToInsert);
        if LineSpacing = 0 then
          ERROR(NotEnoughSpaceToInsertErr);
      end else
        LineSpacing := 10000;
      NextLineNo := "Line No." + LineSpacing;
      FinanceChargeInterestRate.INIT;
      FinanceChargeInterestRate.SETRANGE("Fin. Charge Terms Code",FinChrgMemoHeader."Fin. Charge Terms Code");
      FinanceChargeInterestRate."Fin. Charge Terms Code" := FinChrgMemoHeader."Fin. Charge Terms Code";
      FinanceChargeInterestRate."Start Date" := CALCDATE('<+1D>',CustLedgEntry."Due Date");
      if FinanceChargeInterestRate.FIND('=<') then begin
        repeat
          CalcInterest := false;
          FinanceChargeInterestRate.TESTFIELD("Interest Period (Days)");
          UseDueDate := CALCDATE('<-1D>',FinanceChargeInterestRate."Start Date");
          CurrInterestRateStartDate := FinanceChargeInterestRate."Start Date";
          UseInterestRate := FinanceChargeInterestRate."Interest Rate";
          UseInterestPeriod := FinanceChargeInterestRate."Interest Period (Days)";
          if FinanceChargeInterestRate.NEXT <> 0 then begin
            if FinanceChargeInterestRate."Start Date" <= FinChrgMemoHeader."Document Date" then
              UseCalcDate := CALCDATE('<-1D>',FinanceChargeInterestRate."Start Date")
            else
              UseCalcDate := FinChrgMemoHeader."Document Date";
          end else
            UseCalcDate := FinChrgMemoHeader."Document Date";
          if (CustLedgEntry."Closed at Date" <> 0D) and (UseCalcDate > CustLedgEntry."Closed at Date") then
            UseCalcDate := CustLedgEntry."Closed at Date";
          ExtraFinChrgMemoLine := Rec;
          ExtraFinChrgMemoLine."Line No." := NextLineNo;
          ExtraFinChrgMemoLine."Due Date" := CALCDATE('<+1D>',InterestCalcDate);
          if CurrInterestRateStartDate > ExtraFinChrgMemoLine."Due Date" then
            ExtraFinChrgMemoLine."Due Date" := CurrInterestRateStartDate;
          ExtraFinChrgMemoLine."Interest Rate" := UseInterestRate;
          if InterestCalcDate < UseCalcDate then begin
            CumulateDetailedEntries(ExtraFinChrgMemoLine.Amount,UseDueDate,UseCalcDate,
              UseInterestRate,UseInterestPeriod,BaseAmount);
            if ExtraFinChrgMemoLine.Amount <> 0 then begin
              NrOfDays := NrOfDays + (UseCalcDate - UseDueDate);
              BuildDescription(ExtraFinChrgMemoLine.Description,UseInterestRate,UseDueDate,UseCalcDate - UseDueDate,BaseAmount);
              CumAmount := CumAmount + ExtraFinChrgMemoLine.Amount;
              ExtraFinChrgMemoLine."Detailed Interest Rates Entry" := true;
              if not Checking then
                ExtraFinChrgMemoLine.INSERT;
              InsertedLines := true;
              NextLineNo := ExtraFinChrgMemoLine."Line No." + LineSpacing;
            end;
          end;
          NrOfLinesToInsert := NrOfLinesToInsert - 1;
        until NrOfLinesToInsert = 0;
        VALIDATE(Amount,CumAmount);
      end;
    END;

    [Integration]
    PROCEDURE OnAfterCalcFinCharge@13(VAR FinanceChargeMemoLine@1000 : Record "Finance Charge Memo Line");
    BEGIN
    END;

    [Integration]
    PROCEDURE OnBeforeCalcFinCharge@11(VAR FinanceChargeMemoLine@1000 : Record "Finance Charge Memo Line");
    BEGIN
    END;

    BEGIN
    END.
  }
}

