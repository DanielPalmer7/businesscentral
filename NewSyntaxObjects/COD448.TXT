OBJECT Codeunit 448 Job Queue Dispatcher
{
  OBJECT-PROPERTIES
  {
    Date=0D;
    Time=0T;
    Version List=;
  }
  PROPERTIES
  {
    TableNo="Job Queue Entry";
    Permissions=TableData "Job Queue Entry"=rimd;
    OnRun=BEGIN
            SELECTLATESTVERSION;
            GET(ID);
            if IsReadyToStart then
              if IsExpired(CURRENTDATETIME) then
                DeleteTask
              else
                if WaitForOthersWithSameCategory(Rec) then
                  Reschedule(Rec)
                else begin
                  RefreshLocked;
                  if not IsReadyToStart then
                    exit;
                  HandleRequest(Rec);
                end;
            COMMIT;
          END;

  }
  CODE
  {
    VAR
      TypeHelper@1000 : Codeunit "Type Helper";

    LOCAL PROCEDURE HandleRequest@6(VAR JobQueueEntry@1000 : Record "Job Queue Entry");
    VAR
      JobQueueLogEntry@1003 : Record "Job Queue Log Entry";
      WasSuccess@1002 : Boolean;
      PrevStatus@1001 : Option;
    BEGIN
      OnBeforeHandleRequest(JobQueueEntry);
      with JobQueueEntry do begin
        if Status in [Status::Ready,Status::"On Hold with Inactivity Timeout"] then begin
          Status := Status::"In Process";
          "User Session Started" := CURRENTDATETIME;
          MODIFY;
        end;
        InsertLogEntry(JobQueueLogEntry);

        // Codeunit.Run is limited during write transactions because one or more tables will be locked.
        // To avoid NavCSideException we have either to add the COMMIT before the call or do not use a returned value.
        COMMIT;
        WasSuccess := CODEUNIT.RUN(CODEUNIT::"Job Queue Start Codeunit",JobQueueEntry);
        PrevStatus := Status;

        // user may have deleted it in the meantime
        if DoesExistLocked then
          SetResult(WasSuccess,PrevStatus)
        else
          SetResultDeletedEntry;
        COMMIT;
        FinalizeLogEntry(JobQueueLogEntry);

        if DoesExistLocked then
          FinalizeRun;
      end;

      OnAfterHandleRequest(JobQueueEntry,WasSuccess);
    END;

    LOCAL PROCEDURE WaitForOthersWithSameCategory@9(VAR CurrJobQueueEntry@1000 : Record "Job Queue Entry") : Boolean;
    VAR
      JobQueueEntry@1001 : Record "Job Queue Entry";
    BEGIN
      OnBeforeWaitForOthersWithSameCategory(CurrJobQueueEntry);

      if CurrJobQueueEntry."Job Queue Category Code" = '' then
        exit(false);

      with JobQueueEntry do begin
        SETFILTER(ID,'<>%1',CurrJobQueueEntry.ID);
        SETRANGE("Job Queue Category Code",CurrJobQueueEntry."Job Queue Category Code");
        SETFILTER(Status,'%1|%2',Status::"In Process",Status::Ready);
        SETFILTER("Earliest Start Date/Time",'<%1',CURRENTDATETIME + 500); // already started or imminent start
        exit(not ISEMPTY);
      end;
    END;

    LOCAL PROCEDURE Reschedule@15(VAR JobQueueEntry@1000 : Record "Job Queue Entry");
    BEGIN
      with JobQueueEntry do begin
        RANDOMIZE;
        CLEAR("System Task ID"); // to avoid canceling this task, which has already been executed
        "Earliest Start Date/Time" := CURRENTDATETIME + 2000 + RANDOM(5000);
        CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
      end;
    END;

    [External]
    PROCEDURE CalcNextRunTimeForRecurringJob@1(VAR JobQueueEntry@1000 : Record "Job Queue Entry";StartingDateTime@1008 : DateTime) : DateTime;
    VAR
      NewRunDateTime@1002 : DateTime;
    BEGIN
      if JobQueueEntry."No. of Minutes between Runs" > 0 then
        NewRunDateTime := TypeHelper.AddMinutesToDateTime(StartingDateTime,JobQueueEntry."No. of Minutes between Runs")
      else begin
        if JobQueueEntry."Earliest Start Date/Time" <> 0DT then
          StartingDateTime := JobQueueEntry."Earliest Start Date/Time";
        NewRunDateTime := CREATEDATETIME(DT2DATE(StartingDateTime) + 1,0T);
      end;

      exit(CalcRunTimeForRecurringJob(JobQueueEntry,NewRunDateTime));
    END;

    [External]
    PROCEDURE CalcNextRunTimeHoldDuetoInactivityJob@3(VAR JobQueueEntry@1000 : Record "Job Queue Entry";StartingDateTime@1008 : DateTime) : DateTime;
    VAR
      NewRunDateTime@1002 : DateTime;
    BEGIN
      NewRunDateTime := TypeHelper.AddMinutesToDateTime(StartingDateTime,JobQueueEntry."Inactivity Timeout Period");
      exit(CalcRunTimeForRecurringJob(JobQueueEntry,NewRunDateTime));
    END;

    [External]
    PROCEDURE CalcInitialRunTime@4(VAR JobQueueEntry@1000 : Record "Job Queue Entry";StartingDateTime@1008 : DateTime) : DateTime;
    VAR
      EarliestPossibleRunTime@1001 : DateTime;
    BEGIN
      if (JobQueueEntry."Earliest Start Date/Time" <> 0DT) and (JobQueueEntry."Earliest Start Date/Time" > StartingDateTime) then
        EarliestPossibleRunTime := JobQueueEntry."Earliest Start Date/Time"
      else
        EarliestPossibleRunTime := StartingDateTime;

      if JobQueueEntry."Recurring Job" then
        exit(CalcRunTimeForRecurringJob(JobQueueEntry,EarliestPossibleRunTime));

      exit(EarliestPossibleRunTime);
    END;

    LOCAL PROCEDURE CalcRunTimeForRecurringJob@11(VAR JobQueueEntry@1000 : Record "Job Queue Entry";StartingDateTime@1008 : DateTime) : DateTime;
    VAR
      NewRunDateTime@1001 : DateTime;
      RunOnDate@1003 : ARRAY [7] OF Boolean;
      StartingWeekDay@1005 : Integer;
      NoOfExtraDays@1004 : Integer;
      NoOfDays@1007 : Integer;
      Found@1006 : Boolean;
    BEGIN
      with JobQueueEntry do begin
        TESTFIELD("Recurring Job");
        RunOnDate[1] := "Run on Mondays";
        RunOnDate[2] := "Run on Tuesdays";
        RunOnDate[3] := "Run on Wednesdays";
        RunOnDate[4] := "Run on Thursdays";
        RunOnDate[5] := "Run on Fridays";
        RunOnDate[6] := "Run on Saturdays";
        RunOnDate[7] := "Run on Sundays";

        NewRunDateTime := StartingDateTime;
        NoOfDays := 0;
        if ("Ending Time" <> 0T) and (NewRunDateTime > GetEndingDateTime(NewRunDateTime)) then begin
          NewRunDateTime := GetStartingDateTime(NewRunDateTime);
          NoOfDays := NoOfDays + 1;
        end;

        StartingWeekDay := DATE2DWY(DT2DATE(StartingDateTime),1);
        Found := RunOnDate[(StartingWeekDay - 1 + NoOfDays) mod 7 + 1];
        while not Found and (NoOfExtraDays < 7) do begin
          NoOfExtraDays := NoOfExtraDays + 1;
          NoOfDays := NoOfDays + 1;
          Found := RunOnDate[(StartingWeekDay - 1 + NoOfDays) mod 7 + 1];
        end;

        if ("Starting Time" <> 0T) and (NewRunDateTime < GetStartingDateTime(NewRunDateTime)) then
          NewRunDateTime := GetStartingDateTime(NewRunDateTime);

        if (NoOfDays > 0) and (NewRunDateTime > GetStartingDateTime(NewRunDateTime)) then
          NewRunDateTime := GetStartingDateTime(NewRunDateTime);

        if ("Starting Time" = 0T) and (NoOfExtraDays > 0) and ("No. of Minutes between Runs" <> 0) then
          NewRunDateTime := CREATEDATETIME(DT2DATE(NewRunDateTime),0T);

        if Found then
          NewRunDateTime := CREATEDATETIME(DT2DATE(NewRunDateTime) + NoOfDays,DT2TIME(NewRunDateTime));
      end;
      exit(NewRunDateTime);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterHandleRequest@2(VAR JobQueueEntry@1000 : Record "Job Queue Entry";WasSuccess@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeHandleRequest@8(VAR JobQueueEntry@1000 : Record "Job Queue Entry");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeWaitForOthersWithSameCategory@5(VAR CurrJobQueueEntry@1000 : Record "Job Queue Entry");
    BEGIN
    END;

    BEGIN
    END.
  }
}

