OBJECT Codeunit 10093 Export Payments (IAT)
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160928.237T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      BankAccount@1030000 : Record "Bank Account";
      CompanyInformation@1030001 : Record "Company Information";
      Vendor@1030002 : Record Vendor;
      VendorBankAcct@1030003 : Record "Vendor Bank Account";
      Customer@1030004 : Record Customer;
      CustBankAcct@1030005 : Record "Customer Bank Account";
      RBMgt@1030006 : Codeunit "File Management";
      ExportFile@1030007 : File;
      TotalFileDebit@1030008 : Decimal;
      TotalFileCredit@1030009 : Decimal;
      TotalBatchDebit@1030010 : Decimal;
      TotalBatchCredit@1030011 : Decimal;
      RecordLength@1030012 : Integer;
      BlockingFactor@1030013 : Integer;
      BlockCount@1030014 : Integer;
      EntryAddendaCount@1030015 : Integer;
      FileEntryAddendaCount@1030016 : Integer;
      NoOfRec@1030017 : Integer;
      Justification@1030018 : 'Left,Right';
      BatchNo@1030019 : Integer;
      BatchCount@1030020 : Integer;
      FileHashTotal@1030021 : Decimal;
      BatchHashTotal@1030022 : Decimal;
      FileName@1030023 : Text[250];
      FileIsInProcess@1030024 : Boolean;
      BatchIsInProcess@1030025 : Boolean;
      FileDate@1030026 : Date;
      FileTime@1030027 : Time;
      ModifierValues@1030028 : ARRAY [26] OF Code[1];
      TraceNo@1030029 : Integer;
      ClientFile@1030030 : Text[250];
      DestinationAcctType@1030031 : Text[1];
      DestinationAcctNo@1030032 : Code[20];
      DestinationName@1030033 : Text[50];
      DestinationFederalIDNo@1030034 : Text[30];
      DestinationAddress@1030035 : Text[100];
      DestinationCity@1030036 : Text[30];
      DestinationCountryCode@1030037 : Code[10];
      DestinationCounty@1030038 : Text[30];
      DestinationPostCode@1030039 : Code[20];
      DestinationBankName@1030040 : Text[50];
      DestinationBankTransitNo@1030041 : Text[20];
      DestinationBankAcctNo@1030042 : Text[30];
      DestinationBankCountryCode@1030043 : Code[10];
      DestinationBankCurrencyCode@1030044 : Code[10];
      Text000@1030045 : TextConst 'ENU=Cannot start new Export File while %1 is in process.';
      Text001@1030046 : TextConst '@@@=Field Value is not valid;ENU=is not valid';
      Text002@1030047 : TextConst 'ENU=%1 in %2 %3 is invalid.';
      Text003@1030048 : TextConst 'ENU=File %1 already exists. Check the %2 in %3 %4.';
      Text004@1030049 : TextConst 'ENU=Cannot start export batch until an export file is started.';
      Text005@1030050 : TextConst 'ENU=Cannot start new export batch until previous batch is completed.';
      Text006@1030051 : TextConst 'ENU=Cannot export details until an export file is started.';
      Text007@1030052 : TextConst 'ENU=Cannot export details until an export batch is started.';
      Text008@1030053 : TextConst 'ENU=Vendor No. %1 has no bank account setup for electronic payments.';
      Text009@1030054 : TextConst 'ENU=Vendor No. %1 has more than one bank account setup for electronic payments.';
      Text010@1030055 : TextConst 'ENU=Customer No. %1 has no bank account setup for electronic payments.';
      Text011@1030056 : TextConst 'ENU=Customer No. %1 has more than one bank account setup for electronic payments.';
      Text012@1030057 : TextConst 'ENU=Cannot end export batch until an export file is started.';
      Text013@1030058 : TextConst 'ENU=Cannot end export batch until an export batch is started.';
      Text014@1030059 : TextConst 'ENU=Cannot end export file until an export file is started.';
      Text015@1030060 : TextConst 'ENU=Cannot end export file until export batch is ended.';
      Text018@1030061 : TextConst 'ENU=Either %1 or %2 must refer to either a %3 or a %4 for an electronic payment.';
      Text1020100@1030062 : TextConst 'ENU=%1 is blocked for %2 processing';
      PrivacyBlockedErr@1234567 : TextConst '@@@="%1 = account type";ENU=%1 is blocked for privacy.';

    [External]
    PROCEDURE StartExportFile@6(BankAccountNo@1030063 : Code[20];ReferenceCode@1030064 : Code[10]);
    VAR
      FileHeaderRec@1030065 : Text[250];
      i@1030066 : Integer;
    BEGIN
      BuildIDModifier;
      if FileIsInProcess then
        ERROR(Text000,FileName);

      CompanyInformation.GET;
      CompanyInformation.TESTFIELD("Federal ID No.");

      with BankAccount do begin
        LOCKTABLE;
        GET(BankAccountNo);
        TESTFIELD("Export Format","Export Format"::US);
        TESTFIELD("Transit No.");
        if not CheckDigit("Transit No.") then
          FIELDERROR("Transit No.",Text001);
        TESTFIELD("E-Pay Export File Path");
        if "E-Pay Export File Path"[STRLEN("E-Pay Export File Path")] <> '\' then
          ERROR(Text002,
            FIELDCAPTION("E-Pay Export File Path"),
            TABLECAPTION,
            "No.");
        TESTFIELD("Last E-Pay Export File Name");
        TESTFIELD("Bank Acc. Posting Group");
        TESTFIELD(Blocked,false);
        "Last E-Pay Export File Name" := INCSTR("Last E-Pay Export File Name");
        FileName := RBMgt.ServerTempFileName('');

        if "Last ACH File ID Modifier" = '' then
          "Last ACH File ID Modifier" := 'A'
        else begin
          i := 1;
          while (i < ARRAYLEN(ModifierValues)) and
                ("Last ACH File ID Modifier" <> ModifierValues[i])
          do
            i := i + 1;
          if i = ARRAYLEN(ModifierValues) then
            i := 1
          else
            i := i + 1;
          "Last ACH File ID Modifier" := ModifierValues[i];
        end;
        MODIFY;

        if EXISTS(FileName) then
          ERROR(Text003,
            FileName,
            FIELDCAPTION("Last E-Pay Export File Name"),
            TABLECAPTION,
            "No.");
        ExportFile.TEXTMODE(true);
        ExportFile.WRITEMODE(true);
        ExportFile.CREATE(FileName);

        FileIsInProcess := true;
        FileDate := TODAY;
        FileTime := TIME;
        NoOfRec := 0;
        FileHashTotal := 0;
        TotalFileDebit := 0;
        TotalFileCredit := 0;
        FileEntryAddendaCount := 0;
        BatchCount := 0;
        BlockingFactor := 10;
        RecordLength := 94;
        BatchNo := 0;

        FileHeaderRec := '';

        AddNumToPrnString(FileHeaderRec,1,1,1);
        AddNumToPrnString(FileHeaderRec,1,2,2);
        AddToPrnString(FileHeaderRec,"Transit No.",4,10,Justification::Right,' ');
        AddFedIDToPrnString(FileHeaderRec,CompanyInformation."Federal ID No.",14,10);
        AddToPrnString(FileHeaderRec,FORMAT(FileDate,0,'<Year,2><Month,2><Day,2>'),24,6,Justification::Right,'0');
        AddToPrnString(FileHeaderRec,FORMAT(FileTime,0,'<Hours24,2><Minutes,2>'),30,4,Justification::Right,'0');
        AddToPrnString(FileHeaderRec,"Last ACH File ID Modifier",34,1,Justification::Right,'0');
        AddNumToPrnString(FileHeaderRec,RecordLength,35,3);
        AddNumToPrnString(FileHeaderRec,BlockingFactor,38,2);
        AddNumToPrnString(FileHeaderRec,1,40,1);
        AddToPrnString(FileHeaderRec,Name,41,23,Justification::Left,' ');
        AddToPrnString(FileHeaderRec,CompanyInformation.Name,64,23,Justification::Left,' ');
        AddToPrnString(FileHeaderRec,ReferenceCode,87,8,Justification::Left,' ');
        ExportPrnString(FileHeaderRec);
      end;
    END;

    [External]
    PROCEDURE StartExportBatch@7(GenJournalLine@1030067 : Record "Gen. Journal Line";ServiceClassCode@1030139 : Code[10];SettleDate@1030068 : Date);
    VAR
      GLSetup@1030069 : Record "General Ledger Setup";
      BatchHeaderRec@1030070 : Text[250];
    BEGIN
      if not FileIsInProcess then
        ERROR(Text004);
      if BatchIsInProcess then
        ERROR(Text005);

      with GenJournalLine do begin
        if "Account Type" = "Account Type"::Vendor then begin
          DestinationAcctType := 'V';
          DestinationAcctNo := "Account No.";
        end else
          if "Account Type" = "Account Type"::Customer then begin
            DestinationAcctType := 'C';
            DestinationAcctNo := "Account No.";
          end else
            if "Bal. Account Type" = "Bal. Account Type"::Vendor then begin
              DestinationAcctType := 'V';
              DestinationAcctNo := "Bal. Account No.";
            end else
              if "Bal. Account Type" = "Bal. Account Type"::Customer then begin
                DestinationAcctType := 'C';
                DestinationAcctNo := "Bal. Account No.";
              end else
                ERROR(Text018,
                  FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"),Vendor.TABLECAPTION,Customer.TABLECAPTION);

        if DestinationAcctType = 'V' then begin
          Vendor.GET(DestinationAcctNo);
          Vendor.TESTFIELD(Blocked,Vendor.Blocked::" ");
          Vendor.TESTFIELD("Privacy Blocked",false);
          DestinationName := Vendor.Name;
          DestinationFederalIDNo := Vendor."Federal ID No.";
          DestinationAddress := Vendor.Address + ' ' + Vendor."Address 2";
          DestinationCity := Vendor.City;
          DestinationCountryCode := Vendor."Country/Region Code";
          DestinationCounty := Vendor.County;
          DestinationPostCode := Vendor."Post Code";

          VendorBankAcct.SETRANGE("Vendor No.",DestinationAcctNo);
          VendorBankAcct.SETRANGE("Use for Electronic Payments",true);
          VendorBankAcct.FINDFIRST;

          if VendorBankAcct.COUNT < 1 then
            ERROR(Text008,DestinationAcctNo);
          if VendorBankAcct.COUNT > 1 then
            ERROR(Text009,DestinationAcctNo);

          if not CheckDigit(VendorBankAcct."Transit No.") then
            VendorBankAcct.FIELDERROR("Transit No.",Text001);

          VendorBankAcct.TESTFIELD("Bank Account No.");
          DestinationBankName := VendorBankAcct.Name;
          DestinationBankTransitNo := VendorBankAcct."Transit No.";
          DestinationBankAcctNo := VendorBankAcct."Bank Account No.";
          DestinationBankCurrencyCode := VendorBankAcct."Currency Code";
          DestinationBankCountryCode := VendorBankAcct."Country/Region Code";
        end else
          if DestinationAcctType = 'C' then begin
            Customer.GET(DestinationAcctNo);
            if Customer."Privacy Blocked" then
              ERROR(
                STRSUBSTNO(
                  PrivacyBlockedErr,
                  "Account Type"));
            if Customer.Blocked in [Customer.Blocked::All] then
              ERROR(
                STRSUBSTNO(
                  Text1020100,
                  "Account Type",Customer.Blocked));
            DestinationName := Customer.Name;
            DestinationFederalIDNo := ' ';
            DestinationAddress := Customer.Address + ' ' + Customer."Address 2";
            DestinationCity := Customer.City;
            DestinationCountryCode := Customer."Country/Region Code";
            DestinationCounty := Customer.County;
            DestinationPostCode := Customer."Post Code";

            CustBankAcct.SETRANGE("Customer No.",DestinationAcctNo);
            CustBankAcct.SETRANGE("Use for Electronic Payments",true);
            CustBankAcct.FINDFIRST;

            if CustBankAcct.COUNT < 1 then
              ERROR(Text010,DestinationAcctNo);
            if CustBankAcct.COUNT > 1 then
              ERROR(Text011,DestinationAcctNo);

            if not CheckDigit(CustBankAcct."Transit No.") then
              CustBankAcct.FIELDERROR("Transit No.",Text001);
            CustBankAcct.TESTFIELD("Bank Account No.");
            DestinationBankName := CustBankAcct.Name;
            DestinationBankTransitNo := CustBankAcct."Transit No.";
            DestinationBankAcctNo := CustBankAcct."Bank Account No.";
            DestinationBankCurrencyCode := CustBankAcct."Currency Code";
            DestinationBankCountryCode := CustBankAcct."Country/Region Code";
          end;
      end;

      BatchIsInProcess := true;
      BatchNo := BatchNo + 1;
      BatchHashTotal := 0;
      TotalBatchDebit := 0;
      TotalBatchCredit := 0;
      EntryAddendaCount := 0;
      TraceNo := 0;
      BatchHeaderRec := '';

      AddNumToPrnString(BatchHeaderRec,5,1,1);
      AddToPrnString(BatchHeaderRec,ServiceClassCode,2,3,Justification::Right,'0');
      AddToPrnString(BatchHeaderRec,' ',5,16,Justification::Left,' ');
      AddToPrnString(BatchHeaderRec,FORMAT(GenJournalLine."Foreign Exchange Indicator"),21,2,Justification::Left,' ');
      AddToPrnString(BatchHeaderRec,FORMAT(GenJournalLine."Foreign Exchange Ref.Indicator"),23,1,Justification::Left,' ');
      AddToPrnString(BatchHeaderRec,GenJournalLine."Foreign Exchange Reference",24,15,Justification::Left,' ');
      AddToPrnString(BatchHeaderRec,DestinationCountryCode,39,2,Justification::Left,' ');
      AddFedIDToPrnString(BatchHeaderRec,CompanyInformation."Federal ID No.",41,10);
      AddToPrnString(BatchHeaderRec,'IAT',51,3,Justification::Left,' ');
      AddToPrnString(BatchHeaderRec,GenJournalLine."Source Code",54,10,Justification::Left,' ');
      if BankAccount."Currency Code" = '' then begin
        GLSetup.GET;
        AddToPrnString(BatchHeaderRec,GLSetup."LCY Code",64,3,Justification::Left,' ');
      end else
        AddToPrnString(BatchHeaderRec,BankAccount."Currency Code",64,3,Justification::Left,' ');

      if DestinationBankCurrencyCode = '' then begin
        GLSetup.GET;
        AddToPrnString(BatchHeaderRec,GLSetup."LCY Code",67,3,Justification::Left,' ');
      end else
        AddToPrnString(BatchHeaderRec,DestinationBankCurrencyCode,67,3,Justification::Left,' ');

      AddToPrnString(BatchHeaderRec,FORMAT(SettleDate,0,'<Year><Month,2><Day,2>'),70,6,Justification::Left,' ');
      AddToPrnString(BatchHeaderRec,' ',76,3,Justification::Left,' ');
      AddNumToPrnString(BatchHeaderRec,1,79,1);
      AddToPrnString(BatchHeaderRec,BankAccount."Transit No.",80,8,Justification::Left,' ');
      AddNumToPrnString(BatchHeaderRec,BatchNo,88,7);
      ExportPrnString(BatchHeaderRec);
    END;

    [External]
    PROCEDURE ExportElectronicPayment@17(GenJnlLine@1030071 : Record "Gen. Journal Line";PaymentAmount@1030072 : Decimal) : Code[30];
    VAR
      TransitNo@1030073 : Text[20];
      DetailRec@1030074 : Text[250];
      IATEntryTraceNo@1030075 : Text[250];
      EntryDetailSeqNo@1030076 : Text[7];
      FirstAddendaRec@1030077 : Text[250];
      SecondAddendaRec@1030078 : Text[250];
      ThirdAddendaRec@1030079 : Text[250];
      FourthAddendaRec@1030080 : Text[250];
      FifthAddendaRec@1030081 : Text[250];
      SixthAddendaRec@1030082 : Text[250];
      SeventhAddendaRec@1030083 : Text[250];
      DemandCredit@1030084 : Boolean;
    BEGIN
      if not FileIsInProcess then
        ERROR(Text006);
      if not BatchIsInProcess then
        ERROR(Text007);

      if PaymentAmount = 0 then
        exit('');
      DemandCredit := (PaymentAmount < 0);
      PaymentAmount := ABS(PaymentAmount);

      TraceNo := TraceNo + 1;
      DetailRec := '';
      IATEntryTraceNo := '';
      EntryDetailSeqNo := '';
      FirstAddendaRec := '';
      SecondAddendaRec := '';
      ThirdAddendaRec := '';
      FourthAddendaRec := '';
      FifthAddendaRec := '';
      SixthAddendaRec := '';
      SeventhAddendaRec := '';
      TransitNo := '';

      AddNumToPrnString(DetailRec,6,1,1);
      if DemandCredit then
        AddNumToPrnString(DetailRec,22,2,2)
      else
        AddNumToPrnString(DetailRec,27,2,2);
      AddToPrnString(DetailRec,DestinationBankTransitNo,4,8,Justification::Right,' ');
      AddToPrnString(DetailRec,COPYSTR(FORMAT(DestinationBankTransitNo),9,1),12,1,Justification::Right,' ');
      AddNumToPrnString(DetailRec,7,13,4);
      AddToPrnString(DetailRec,' ',17,13,Justification::Left,' ');
      AddAmtToPrnString(DetailRec,PaymentAmount,30,10);
      AddToPrnString(DetailRec,DELCHR(DestinationBankAcctNo,'=',' '),40,35,Justification::Left,' ');
      AddToPrnString(DetailRec,' ',75,2,Justification::Left,' ');
      AddToPrnString(DetailRec,FORMAT(GenJnlLine."Gateway Operator OFAC Scr.Inc"),77,1,Justification::Left,' ');
      AddToPrnString(DetailRec,FORMAT(GenJnlLine."Secondary OFAC Scr.Indicator"),78,1,Justification::Left,' ');
      AddNumToPrnString(DetailRec,1,79,1);
      IATEntryTraceNo := GenerateTraceNoCode(TraceNo);
      AddToPrnString(DetailRec,IATEntryTraceNo,80,15,Justification::Left,' ');

      ExportPrnString(DetailRec);
      EntryAddendaCount := EntryAddendaCount + 1;
      if DemandCredit then
        TotalBatchCredit := TotalBatchCredit + PaymentAmount
      else
        TotalBatchDebit := TotalBatchDebit + PaymentAmount;
      IncrementHashTotal(BatchHashTotal,MakeHash(COPYSTR(TransitNo,1,8)));

      AddNumToPrnString(FirstAddendaRec,7,1,1);
      AddNumToPrnString(FirstAddendaRec,10,2,2);
      AddToPrnString(FirstAddendaRec,FORMAT(GenJnlLine."Transaction Type Code"),4,3,Justification::Left,' ');
      AddAmtToPrnString(FirstAddendaRec,PaymentAmount,7,18);
      AddToPrnString(FirstAddendaRec,' ',25,22,Justification::Left,' ');
      AddToPrnString(FirstAddendaRec,DestinationName,47,35,Justification::Left,' ');
      AddToPrnString(FirstAddendaRec,' ',82,6,Justification::Left,' ');
      EntryDetailSeqNo := COPYSTR(IATEntryTraceNo,STRLEN(IATEntryTraceNo) - 6,STRLEN(IATEntryTraceNo));
      AddToPrnString(FirstAddendaRec,EntryDetailSeqNo,88,7,Justification::Right,'0');

      ExportPrnString(FirstAddendaRec);
      EntryAddendaCount := EntryAddendaCount + 1;

      AddNumToPrnString(SecondAddendaRec,7,1,1);
      AddNumToPrnString(SecondAddendaRec,11,2,2);
      AddToPrnString(SecondAddendaRec,CompanyInformation.Name,4,35,Justification::Left,' ');
      AddToPrnString(SecondAddendaRec,CompanyInformation.Address + ' ' + CompanyInformation."Address 2",39,35,Justification::Left,' ');
      AddToPrnString(SecondAddendaRec,' ',74,14,Justification::Left,' ');
      AddToPrnString(SecondAddendaRec,EntryDetailSeqNo,88,7,Justification::Right,'0');

      ExportPrnString(SecondAddendaRec);
      EntryAddendaCount := EntryAddendaCount + 1;

      AddNumToPrnString(ThirdAddendaRec,7,1,1);
      AddNumToPrnString(ThirdAddendaRec,12,2,2);
      AddToPrnString(ThirdAddendaRec,CompanyInformation.City + '*' + CompanyInformation.County + '\'
        ,4,35,Justification::Left,' ');
      AddToPrnString(ThirdAddendaRec,CompanyInformation."Country/Region Code" + '*' + CompanyInformation."Post Code" + '\'
        ,39,35,Justification::Left,' ');
      AddToPrnString(ThirdAddendaRec,' ',74,14,Justification::Left,' ');
      AddToPrnString(ThirdAddendaRec,EntryDetailSeqNo,88,7,Justification::Right,'0');

      ExportPrnString(ThirdAddendaRec);
      EntryAddendaCount := EntryAddendaCount + 1;

      AddNumToPrnString(FourthAddendaRec,7,1,1);
      AddNumToPrnString(FourthAddendaRec,13,2,2);
      AddToPrnString(FourthAddendaRec,BankAccount.Name,4,35,Justification::Left,' ');
      AddToPrnString(FourthAddendaRec,FORMAT(GenJnlLine."Origin. DFI ID Qualifier"),39,2,Justification::Left,' ');
      AddToPrnString(FourthAddendaRec,PADSTR(BankAccount."Transit No.",8),41,34,Justification::Left,' ');
      AddToPrnString(FourthAddendaRec,BankAccount."Country/Region Code",75,3,Justification::Left,' ');
      AddToPrnString(FourthAddendaRec,' ',78,10,Justification::Left,' ');
      AddToPrnString(FourthAddendaRec,EntryDetailSeqNo,88,7,Justification::Right,'0');

      ExportPrnString(FourthAddendaRec);
      EntryAddendaCount := EntryAddendaCount + 1;

      AddNumToPrnString(FifthAddendaRec,7,1,1);
      AddNumToPrnString(FifthAddendaRec,14,2,2);
      AddToPrnString(FifthAddendaRec,DestinationBankName,4,35,Justification::Left,' ');
      AddToPrnString(FifthAddendaRec,FORMAT(GenJnlLine."Receiv. DFI ID Qualifier"),39,2,Justification::Left,' ');
      AddToPrnString(FifthAddendaRec,DestinationBankTransitNo,41,34,Justification::Left,' ');
      AddToPrnString(FifthAddendaRec,DestinationBankCountryCode,75,3,Justification::Left,' ');
      AddToPrnString(FifthAddendaRec,' ',78,10,Justification::Left,' ');
      AddToPrnString(FifthAddendaRec,EntryDetailSeqNo,88,7,Justification::Right,'0');

      ExportPrnString(FifthAddendaRec);
      EntryAddendaCount := EntryAddendaCount + 1;

      AddNumToPrnString(SixthAddendaRec,7,1,1);
      AddNumToPrnString(SixthAddendaRec,15,2,2);
      AddToPrnString(SixthAddendaRec,DestinationFederalIDNo,4,15,Justification::Left,' ');
      AddToPrnString(SixthAddendaRec,DestinationAddress,19,35,Justification::Left,' ');
      AddToPrnString(SixthAddendaRec,' ',54,34,Justification::Left,' ');
      AddToPrnString(SixthAddendaRec,EntryDetailSeqNo,88,7,Justification::Right,'0');

      ExportPrnString(SixthAddendaRec);
      EntryAddendaCount := EntryAddendaCount + 1;

      AddNumToPrnString(SeventhAddendaRec,7,1,1);
      AddNumToPrnString(SeventhAddendaRec,16,2,2);
      AddToPrnString(SeventhAddendaRec,DestinationCity + '*' + DestinationCounty + '\',
        4,35,Justification::Left,' ');
      AddToPrnString(SeventhAddendaRec,DestinationCountryCode + '*' + DestinationPostCode + '\',
        39,35,Justification::Left,' ');
      AddToPrnString(SeventhAddendaRec,' ',74,14,Justification::Left,' ');
      AddToPrnString(SeventhAddendaRec,EntryDetailSeqNo,88,7,Justification::Right,'0');

      ExportPrnString(SeventhAddendaRec);
      EntryAddendaCount := EntryAddendaCount + 1;

      exit(GenerateFullTraceNoCode(TraceNo));
    END;

    [External]
    PROCEDURE EndExportBatch@9(ServiceClassCode@1030085 : Code[10]);
    VAR
      BatchControlRec@1030086 : Text[250];
    BEGIN
      if not FileIsInProcess then
        ERROR(Text012);
      if not BatchIsInProcess then
        ERROR(Text013);

      BatchIsInProcess := false;
      BatchControlRec := '';

      AddNumToPrnString(BatchControlRec,8,1,1);
      AddToPrnString(BatchControlRec,ServiceClassCode,2,3,Justification::Right,'0');
      AddNumToPrnString(BatchControlRec,EntryAddendaCount,5,6);
      AddToPrnString(BatchControlRec,FORMAT(BatchHashTotal,0,2),11,10,Justification::Right,'0');
      AddAmtToPrnString(BatchControlRec,TotalBatchDebit,21,12);
      AddAmtToPrnString(BatchControlRec,TotalBatchCredit,33,12);
      AddFedIDToPrnString(BatchControlRec,CompanyInformation."Federal ID No.",45,10);
      AddToPrnString(BatchControlRec,' ',55,19,Justification::Right,' ');
      AddToPrnString(BatchControlRec,' ',74,6,Justification::Right,' ');
      AddToPrnString(BatchControlRec,BankAccount."Transit No.",80,8,Justification::Left,' ');
      AddNumToPrnString(BatchControlRec,BatchNo,88,7);
      ExportPrnString(BatchControlRec);

      BatchCount := BatchCount + 1;
      IncrementHashTotal(FileHashTotal,BatchHashTotal);
      TotalFileDebit := TotalFileDebit + TotalBatchDebit;
      TotalFileCredit := TotalFileCredit + TotalBatchCredit;
      FileEntryAddendaCount := FileEntryAddendaCount + EntryAddendaCount;
    END;

    [External]
    PROCEDURE EndExportFile@1030087() : Boolean;
    VAR
      FileControlRec@1030088 : Text[250];
    BEGIN
      if not FileIsInProcess then
        ERROR(Text014);
      if BatchIsInProcess then
        ERROR(Text015);

      FileIsInProcess := false;
      FileControlRec := '';
      BlockCount := (NoOfRec + 1) div BlockingFactor;
      if (NoOfRec + 1) mod BlockingFactor <> 0 then
        BlockCount := BlockCount + 1;

      AddNumToPrnString(FileControlRec,9,1,1);
      AddNumToPrnString(FileControlRec,BatchCount,2,6);
      AddNumToPrnString(FileControlRec,BlockCount,8,6);
      AddNumToPrnString(FileControlRec,FileEntryAddendaCount,14,8);
      AddToPrnString(FileControlRec,FORMAT(FileHashTotal,0,2),22,10,Justification::Right,'0');
      AddAmtToPrnString(FileControlRec,TotalFileDebit,32,12);
      AddAmtToPrnString(FileControlRec,TotalFileCredit,44,12);
      AddToPrnString(FileControlRec,' ',56,39,Justification::Right,' ');
      ExportPrnString(FileControlRec);

      while NoOfRec mod BlockingFactor <> 0 do begin
        FileControlRec := PADSTR('',RecordLength,'9');
        ExportPrnString(FileControlRec);
      end;
      ExportFile.CLOSE;

      ClientFile := BankAccount."E-Pay Export File Path" + BankAccount."Last E-Pay Export File Name";
      if not DOWNLOAD(FileName,'','','',ClientFile) then begin
        ERASE(FileName);
        exit(false);
      end;
      ERASE(FileName);

      exit(true);
    END;

    LOCAL PROCEDURE GenerateFullTraceNoCode@1030089(TraceNo@1030090 : Integer) : Code[30];
    VAR
      TraceCode@1030091 : Text[250];
    BEGIN
      TraceCode := '';
      AddToPrnString(TraceCode,FORMAT(FileDate,0,'<Year,2><Month,2><Day,2>'),1,6,Justification::Left,' ');
      AddToPrnString(TraceCode,BankAccount."Last ACH File ID Modifier",7,1,Justification::Right,'0');
      AddNumToPrnString(TraceCode,BatchNo,8,7);
      AddToPrnString(TraceCode,GenerateTraceNoCode(TraceNo),15,15,Justification::Left,' ');
      exit(TraceCode);
    END;

    LOCAL PROCEDURE GenerateTraceNoCode@1030092(TraceNo@1030093 : Integer) : Code[15];
    VAR
      TraceCode@1030094 : Text[250];
    BEGIN
      TraceCode := '';
      AddToPrnString(TraceCode,BankAccount."Transit No.",1,8,Justification::Left,' ');
      AddNumToPrnString(TraceCode,TraceNo,9,7);
      exit(TraceCode);
    END;

    LOCAL PROCEDURE AddNumToPrnString@1030095(VAR PrnString@1030096 : Text[250];Number@1030097 : Integer;StartPos@1030098 : Integer;Length@1030099 : Integer);
    VAR
      TmpString@1030100 : Text[250];
    BEGIN
      TmpString := DELCHR(FORMAT(Number),'=','.,-');
      AddToPrnString(PrnString,TmpString,StartPos,Length,Justification::Right,'0');
    END;

    LOCAL PROCEDURE AddAmtToPrnString@1030101(VAR PrnString@1030102 : Text[250];Amount@1030103 : Decimal;StartPos@1030104 : Integer;Length@1030105 : Integer);
    VAR
      TmpString@1030106 : Text[250];
      I@1030107 : Integer;
    BEGIN
      TmpString := FORMAT(Amount);
      I := STRPOS(TmpString,'.');
      case true of
        I = 0:
          TmpString := TmpString + '.00';
        I = STRLEN(TmpString) - 1:
          TmpString := TmpString + '0';
      end;
      TmpString := DELCHR(TmpString,'=','.,-');
      AddToPrnString(PrnString,TmpString,StartPos,Length,Justification::Right,'0');
    END;

    [External]
    PROCEDURE AddFedIDToPrnString@1030108(VAR PrnString@1030109 : Text[250];FedID@1030110 : Text[30];StartPos@1030111 : Integer;Length@1030112 : Integer);
    BEGIN
      AddToPrnString(PrnString,'1' + DELCHR(FedID,'=',' .,-'),StartPos,Length,Justification::Left,' ');
    END;

    LOCAL PROCEDURE AddToPrnString@1030113(VAR PrnString@1030114 : Text[250];SubString@1030115 : Text[250];StartPos@1030116 : Integer;Length@1030117 : Integer;Justification@1030118 : 'Left,Right';Filler@1030119 : Text[1]);
    VAR
      I@1030120 : Integer;
      SubStrLen@1030121 : Integer;
    BEGIN
      SubString := UPPERCASE(DELCHR(SubString,'<>',' '));
      SubStrLen := STRLEN(SubString);

      if SubStrLen > Length then begin
        SubString := COPYSTR(SubString,1,Length);
        SubStrLen := Length;
      end;

      if Justification = Justification::Right then
        for I := 1 to (Length - SubStrLen) do
          SubString := Filler + SubString
      else
        for I := SubStrLen + 1 to Length do
          SubString := SubString + Filler;

      if STRLEN(PrnString) >= StartPos then
        if StartPos > 1 then
          PrnString := COPYSTR(PrnString,1,StartPos - 1) + SubString + COPYSTR(PrnString,StartPos)
        else
          PrnString := SubString + PrnString
      else begin
        for I := STRLEN(PrnString) + 1 to StartPos - 1 do
          PrnString := PrnString + ' ';
        PrnString := PrnString + SubString;
      end;
    END;

    LOCAL PROCEDURE ExportPrnString@1030122(VAR PrnString@1030123 : Text[250]);
    BEGIN
      PrnString := PADSTR(PrnString,RecordLength,' ');
      ExportFile.WRITE(PrnString);
      NoOfRec := NoOfRec + 1;
      PrnString := '';
    END;

    [External]
    PROCEDURE CheckDigit@1030124(DigitString@1030125 : Code[20]) : Boolean;
    VAR
      Weight@1030126 : Code[8];
      Digit@1030127 : Integer;
      I@1030128 : Integer;
      Digit1@1030129 : Integer;
      Digit2@1030130 : Integer;
      CheckChar@1030131 : Code[1];
    BEGIN
      Weight := '37137137';
      Digit := 0;

      if STRLEN(DigitString) <= STRLEN(Weight) then
        exit(false);

      for I := 1 to STRLEN(Weight) do begin
        EVALUATE(Digit1,COPYSTR(DigitString,I,1));
        EVALUATE(Digit2,COPYSTR(Weight,I,1));
        Digit := Digit + Digit1 * Digit2;
      end;

      Digit := 10 - Digit mod 10;
      if Digit = 10 then
        CheckChar := '0'
      else
        CheckChar := FORMAT(Digit);
      exit(DigitString[STRLEN(Weight) + 1] = CheckChar[1]);
    END;

    LOCAL PROCEDURE IncrementHashTotal@1030132(VAR HashTotal@1030133 : Decimal;HashIncrement@1030134 : Decimal);
    VAR
      SubTotal@1030135 : Decimal;
    BEGIN
      SubTotal := HashTotal + HashIncrement;
      if SubTotal < 10000000000.0 then
        HashTotal := SubTotal
      else
        HashTotal := SubTotal - 10000000000.0;
    END;

    LOCAL PROCEDURE MakeHash@1030136(InputString@1030137 : Text[30]) : Decimal;
    VAR
      HashAmt@1030138 : Decimal;
    BEGIN
      InputString := DELCHR(InputString,'=','.,- ');
      if EVALUATE(HashAmt,InputString) then
        exit(HashAmt);

      exit(0);
    END;

    LOCAL PROCEDURE BuildIDModifier@1030139();
    BEGIN
      ModifierValues[1] := 'A';
      ModifierValues[2] := 'B';
      ModifierValues[3] := 'C';
      ModifierValues[4] := 'D';
      ModifierValues[5] := 'E';
      ModifierValues[6] := 'F';
      ModifierValues[7] := 'G';
      ModifierValues[8] := 'H';
      ModifierValues[9] := 'I';
      ModifierValues[10] := 'J';
      ModifierValues[11] := 'K';
      ModifierValues[12] := 'L';
      ModifierValues[13] := 'M';
      ModifierValues[14] := 'N';
      ModifierValues[15] := 'O';
      ModifierValues[16] := 'P';
      ModifierValues[17] := 'Q';
      ModifierValues[18] := 'R';
      ModifierValues[19] := 'S';
      ModifierValues[20] := 'T';
      ModifierValues[21] := 'U';
      ModifierValues[22] := 'V';
      ModifierValues[23] := 'W';
      ModifierValues[24] := 'X';
      ModifierValues[25] := 'Y';
      ModifierValues[26] := 'Z';
    END;

    BEGIN
    END.
  }
}

