OBJECT Codeunit 10148 Sales Tax Amount Line Calc
{
  OBJECT-PROPERTIES
  {
    Date=0D;
    Time=0T;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      RecRef@1020004 : RecordRef;
      TaxGroupCodeFieldRef@1020008 : FieldRef;
      LineType@1020003 : Option;
      TaxAreaCode@1020000 : Code[20];
      TaxGroupCode@1020001 : Code[20];
      VATBaseAmount@1020002 : Decimal;
      LineAmount@1020005 : Decimal;
      LineQuantity@1020006 : Decimal;
      TaxLiable@1020007 : Boolean;
      UseTax@1020009 : Boolean;

    LOCAL PROCEDURE Clean@1020002();
    BEGIN
      LineType := 0;
      TaxAreaCode := '';
      TaxGroupCode := '';
      VATBaseAmount := 0;
      LineAmount := 0;
      LineQuantity := 0;
      TaxLiable := false;
      UseTax := false;
      CLEAR(RecRef);
    END;

    [External]
    PROCEDURE InitFromServCrMemoLine@1020000(ServiceCrMemoLine@1020000 : Record "Service Cr.Memo Line");
    BEGIN
      Clean;
      RecRef.GETTABLE(ServiceCrMemoLine);
      TaxGroupCodeFieldRef := RecRef.FIELD(ServiceCrMemoLine.FIELDNO("Tax Group Code"));
      with ServiceCrMemoLine do begin
        LineType := Type;
        TaxAreaCode := "Tax Area Code";
        TaxGroupCode := "Tax Group Code";
        VATBaseAmount := "VAT Base Amount";
        LineAmount := "Line Amount";
        LineQuantity := Quantity;
        TaxLiable := "Tax Liable";
      end;
    END;

    [External]
    PROCEDURE InitFromServInvLine@1020001(ServiceInvoiceLine@1020000 : Record "Service Invoice Line");
    BEGIN
      Clean;
      RecRef.GETTABLE(ServiceInvoiceLine);
      TaxGroupCodeFieldRef := RecRef.FIELD(ServiceInvoiceLine.FIELDNO("Tax Group Code"));
      with ServiceInvoiceLine do begin
        LineType := Type;
        TaxAreaCode := "Tax Area Code";
        TaxGroupCode := "Tax Group Code";
        VATBaseAmount := "VAT Base Amount";
        LineAmount := "Line Amount";
        LineQuantity := Quantity;
        TaxLiable := "Tax Liable";
      end;
    END;

    [External]
    PROCEDURE InitFromPurchCrMemoLine@1020005(PurchCrMemoLine@1020000 : Record "Purch. Cr. Memo Line");
    BEGIN
      Clean;
      RecRef.GETTABLE(PurchCrMemoLine);
      TaxGroupCodeFieldRef := RecRef.FIELD(PurchCrMemoLine.FIELDNO("Tax Group Code"));
      with PurchCrMemoLine do begin
        LineType := Type;
        TaxAreaCode := "Tax Area Code";
        TaxGroupCode := "Tax Group Code";
        VATBaseAmount := "VAT Base Amount";
        LineAmount := "Line Amount";
        LineQuantity := "Quantity (Base)";
        TaxLiable := "Tax Liable";
        UseTax := "Use Tax";
      end;
    END;

    [External]
    PROCEDURE InitFromPurchInvLine@1020004(PurchInvLine@1020000 : Record "Purch. Inv. Line");
    BEGIN
      Clean;
      RecRef.GETTABLE(PurchInvLine);
      TaxGroupCodeFieldRef := RecRef.FIELD(PurchInvLine.FIELDNO("Tax Group Code"));
      with PurchInvLine do begin
        LineType := Type;
        TaxAreaCode := "Tax Area Code";
        TaxGroupCode := "Tax Group Code";
        VATBaseAmount := "VAT Base Amount";
        LineAmount := "Line Amount";
        LineQuantity := "Quantity (Base)";
        TaxLiable := "Tax Liable";
        UseTax := "Use Tax";
      end;
    END;

    [External]
    PROCEDURE InitFromSalesCrMemoLine@1020008(SalesCrMemoLine@1020000 : Record "Sales Cr.Memo Line");
    BEGIN
      Clean;
      RecRef.GETTABLE(SalesCrMemoLine);
      TaxGroupCodeFieldRef := RecRef.FIELD(SalesCrMemoLine.FIELDNO("Tax Group Code"));
      with SalesCrMemoLine do begin
        LineType := Type;
        TaxAreaCode := "Tax Area Code";
        TaxGroupCode := "Tax Group Code";
        VATBaseAmount := "VAT Base Amount";
        LineAmount := "Line Amount";
        LineQuantity := "Quantity (Base)";
        TaxLiable := "Tax Liable";
      end;
    END;

    [External]
    PROCEDURE InitFromSalesInvLine@1020007(SalesInvoiceLine@1020000 : Record "Sales Invoice Line");
    BEGIN
      Clean;
      RecRef.GETTABLE(SalesInvoiceLine);
      TaxGroupCodeFieldRef := RecRef.FIELD(SalesInvoiceLine.FIELDNO("Tax Group Code"));
      with SalesInvoiceLine do begin
        LineType := Type;
        TaxAreaCode := "Tax Area Code";
        TaxGroupCode := "Tax Group Code";
        VATBaseAmount := "VAT Base Amount";
        LineAmount := "Line Amount";
        LineQuantity := "Quantity (Base)";
        TaxLiable := "Tax Liable";
      end;
    END;

    [External]
    PROCEDURE CalcSalesOrServLineSalesTaxAmountLine@1020010(VAR SalesTaxAmountLine@1020000 : Record "Sales Tax Amount Line";VAR TaxAreaLine@1020002 : Record "Tax Area Line";TaxCountry@1020003 : 'US,CA';VAR TaxArea@1020004 : Record "Tax Area";VAR TaxJurisdiction@1020005 : Record "Tax Jurisdiction";ExchangeFactor@1020006 : Decimal);
    BEGIN
      with SalesTaxAmountLine do begin
        RESET;
        if (LineType <> 0 ) and (TaxAreaCode <> '') then begin
          TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
          TaxAreaLine.SETRANGE("Tax Area",TaxAreaCode);
          TaxAreaLine.FINDSET;
          repeat
            case TaxCountry of
              TaxCountry::US:  // Area Code
                SETRANGE("Tax Area Code for Key",TaxAreaCode);
              TaxCountry::CA:  // Jurisdictions
                SETRANGE("Tax Area Code for Key",'');
            end;
            TaxGroupCodeFieldRef.TESTFIELD;
            SETRANGE("Tax Group Code",TaxGroupCode);
            SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
            if not FINDFIRST then begin
              INIT;
              case TaxCountry of
                TaxCountry::US:  // Area Code
                  "Tax Area Code for Key" := TaxAreaCode;
                TaxCountry::CA:  // Jurisdictions
                  "Tax Area Code for Key" := '';
              end;
              "Tax Group Code" := TaxGroupCode;
              "Tax Area Code" := TaxAreaCode;
              "Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
              if TaxCountry = TaxCountry::US then begin
                if "Tax Area Code" <> TaxArea.Code then
                  TaxArea.GET("Tax Area Code");
                "Round Tax" := TaxArea."Round Tax";
                TaxJurisdiction.GET("Tax Jurisdiction Code");
                "Is Report-to Jurisdiction" :=
                  ("Tax Jurisdiction Code" = TaxJurisdiction."Report-to Jurisdiction");
              end;
              "Line Amount" := LineAmount / ExchangeFactor;
              SetTaxBaseAmount(SalesTaxAmountLine,VATBaseAmount,ExchangeFactor,false);
              Quantity := LineQuantity;
              "Tax Liable" := TaxLiable;

              "Calculation Order" := TaxAreaLine."Calculation Order";
              INSERT;
            end else begin
              "Line Amount" := "Line Amount" + (LineAmount / ExchangeFactor);
              SetTaxBaseAmount(SalesTaxAmountLine,VATBaseAmount,ExchangeFactor,true);
              Quantity := Quantity + LineQuantity;
              if TaxLiable then
                "Tax Liable" := TaxLiable;
              MODIFY;
            end;
          until TaxAreaLine.NEXT = 0;
        end;
      end;
    END;

    [External]
    PROCEDURE CalcPurchLineSalesTaxAmountLine@1020003(VAR SalesTaxAmountLine@1020005 : Record "Sales Tax Amount Line";VAR TaxAreaLine@1020004 : Record "Tax Area Line";TaxCountry@1020003 : 'US,CA';VAR TaxArea@1020002 : Record "Tax Area";VAR TaxJurisdiction@1020001 : Record "Tax Jurisdiction";ExchangeFactor@1020000 : Decimal;TaxDetail@1020006 : Record "Tax Detail";PostingDate@1020007 : Date);
    BEGIN
      with SalesTaxAmountLine do begin
        RESET;
        if (LineType <> 0) and (TaxAreaCode <> '') then begin
          TaxAreaLine.SETCURRENTKEY("Tax Area","Calculation Order");
          TaxAreaLine.SETRANGE("Tax Area",TaxAreaCode);
          TaxAreaLine.FINDSET;
          repeat
            case TaxCountry of
              TaxCountry::US:  // Area Code
                SETRANGE("Tax Area Code for Key",TaxAreaCode);
              TaxCountry::CA:  // Jurisdictions
                SETRANGE("Tax Area Code for Key",'');
            end;
            TaxGroupCodeFieldRef.TESTFIELD;
            SETRANGE("Tax Group Code",TaxGroupCode);
            SETRANGE("Use Tax",UseTax);
            SETRANGE("Tax Jurisdiction Code",TaxAreaLine."Tax Jurisdiction Code");
            if not FINDFIRST then begin
              INIT;
              case TaxCountry of
                TaxCountry::US:  // Area Code
                  "Tax Area Code for Key" := TaxAreaCode;
                TaxCountry::CA:  // Jurisdictions
                  "Tax Area Code for Key" := '';
              end;
              "Tax Group Code" := TaxGroupCode;
              "Tax Area Code" := TaxAreaCode;
              "Tax Jurisdiction Code" := TaxAreaLine."Tax Jurisdiction Code";
              if TaxCountry = TaxCountry::US then begin
                if "Tax Area Code" <> TaxArea.Code then
                  TaxArea.GET("Tax Area Code");
                "Round Tax" := TaxArea."Round Tax";
                TaxJurisdiction.GET("Tax Jurisdiction Code");
                "Is Report-to Jurisdiction" :=
                  ("Tax Jurisdiction Code" = TaxJurisdiction."Report-to Jurisdiction");
              end;
              "Line Amount" := LineAmount / ExchangeFactor;
              SetTaxBaseAmount(SalesTaxAmountLine,VATBaseAmount,ExchangeFactor,false);
              Quantity := LineQuantity;
              "Tax Liable" := TaxLiable;
              "Use Tax" := UseTax;

              TaxDetail.RESET;
              TaxDetail.SETRANGE("Tax Jurisdiction Code","Tax Jurisdiction Code");
              if "Tax Group Code" = '' then
                TaxDetail.SETFILTER("Tax Group Code",'%1',"Tax Group Code")
              else
                TaxDetail.SETFILTER("Tax Group Code",'%1|%2','',"Tax Group Code");
              if PostingDate = 0D then
                TaxDetail.SETFILTER("Effective Date",'<=%1',WORKDATE)
              else
                TaxDetail.SETFILTER("Effective Date",'<=%1',PostingDate);
              TaxDetail.SETFILTER("Tax Type",'%1|%2',TaxDetail."Tax Type"::"Sales and Use Tax",
                TaxDetail."Tax Type"::"Sales Tax Only");
              if TaxDetail.FINDLAST then
                "Expense/Capitalize" := TaxDetail."Expense/Capitalize";

              "Calculation Order" := TaxAreaLine."Calculation Order";
              INSERT;
            end else begin
              "Line Amount" := "Line Amount" + (LineAmount / ExchangeFactor);
              SetTaxBaseAmount(SalesTaxAmountLine,VATBaseAmount,ExchangeFactor,true);
              Quantity := Quantity + LineQuantity;
              if TaxLiable then
                "Tax Liable" := TaxLiable;
              MODIFY;
            end;
          until TaxAreaLine.NEXT = 0;
        end;
      end;
    END;

    [External]
    PROCEDURE SetTaxBaseAmount@1020031(VAR SalesTaxAmountLine@1020001 : Record "Sales Tax Amount Line";Value@1020000 : Decimal;ExchangeFactor@1020002 : Decimal;Increment@1020003 : Boolean);
    BEGIN
      with SalesTaxAmountLine do begin
        if Increment then
          "Tax Base Amount FCY" += Value
        else
          "Tax Base Amount FCY" := Value;
        "Tax Base Amount" := "Tax Base Amount FCY" / ExchangeFactor;
      end;
    END;

    BEGIN
    END.
  }
}

