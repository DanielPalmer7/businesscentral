OBJECT Codeunit 8618 Config. Excel Exchange
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160922.27T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ConfigPackage@1019 : Record "Config. Package";
      ConfigXMLExchange@1006 : Codeunit "Config. XML Exchange";
      FileMgt@1003 : Codeunit "File Management";
      ConfigProgressBar@1004 : Codeunit "Config. Progress Bar";
      ConfigValidateMgt@1021 : Codeunit "Config. Validate Management";
      CannotCreateXmlSchemaErr@1016 : TextConst 'ENU=Could not create XML Schema.';
      CreatingExcelMsg@1011 : TextConst 'ENU=Creating Excel worksheet';
      OpenXMLManagement@1023 : Codeunit "OpenXML Management";
      WrkbkReader@1000 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorkbookReader";
      WrkbkWriter@1002 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorkbookWriter";
      WrkShtWriter@1007 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetWriter";
      Worksheet@1025 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Worksheet";
      Workbook@1026 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Workbook";
      WorkBookPart@1030 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WorkbookPart";
      CreateWrkBkFailedErr@1033 : TextConst 'ENU=Could not create the Excel workbook.';
      WrkShtHelper@1001 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetHelper";
      DataSet@1038 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.DataSet";
      DataTable@1037 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.DataTable";
      DataColumn@1040 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.DataColumn";
      StringBld@1014 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      id@1013 : BigInteger;
      HideDialog@1005 : Boolean;
      CommentVmlShapeXmlTxt@1012 : TextConst '@@@={Locked};ENU="<v:shape id=""%1"" type=""#_x0000_t202"" style=''position:absolute;  margin-left:59.25pt;margin-top:1.5pt;width:96pt;height:55.5pt;z-index:1;  visibility:hidden'' fillcolor=""#ffffe1"" o:insetmode=""auto""><v:fill color2=""#ffffe1""/><v:shadow color=""black"" obscured=""t""/><v:path o:connecttype=""none""/><v:textbox style=''mso-direction-alt:auto''><div style=''text-align:left''/></v:textbox><x:ClientData ObjectType=""Note""><x:MoveWithCells/><x:SizeWithCells/><x:Anchor>%2</x:Anchor><x:AutoFill>False</x:AutoFill><x:Row>%3</x:Row><x:Column>%4</x:Column></x:ClientData></v:shape>"';
      VmlDrawingXmlTxt@1015 : TextConst '@@@={Locked};ENU="<xml xmlns:v=""urn:schemas-microsoft-com:vml"" xmlns:o=""urn:schemas-microsoft-com:office:office"" xmlns:x=""urn:schemas-microsoft-com:office:excel""><o:shapelayout v:ext=""edit""><o:idmap v:ext=""edit"" data=""1""/></o:shapelayout><v:shapetype id=""_x0000_t202"" coordsize=""21600,21600"" o:spt=""202""  path=""m,l,21600r21600,l21600,xe""><v:stroke joinstyle=""miter""/><v:path gradientshapeok=""t"" o:connecttype=""rect""/></v:shapetype>"';
      EndXmlTokenTxt@1017 : TextConst '@@@={Locked};ENU=</xml>';
      VmlShapeAnchorTxt@1018 : TextConst '@@@={Locked};ENU=%1,15,%2,10,%3,31,8,9';
      FileExtensionFilterTok@1008 : TextConst 'ENU=Excel Files (*.xlsx)|*.xlsx|All Files (*.*)|*.*';
      ExcelFileNameTok@1009 : TextConst '@@@="%1 = String generated from current datetime to make sure file names are unique ";ENU=*%1.xlsx';
      ExcelFileExtensionTok@1010 : TextConst 'ENU=.xlsx';
      InvalidDataInSheetMsg@1020 : TextConst '@@@="%1=excel sheet name";ENU=Data in sheet ''%1'' could not be imported, because the sheet has an unexpected format.';
      ImportFromExcelTxt@1022 : TextConst 'ENU=Import from Excel';
      FileOnServer@1024 : Boolean;

    [External]
    PROCEDURE ExportExcelFromConfig@19(VAR ConfigLine@1006 : Record "Config. Line") : Text;
    VAR
      ConfigPackageTable@1005 : Record "Config. Package Table";
      ConfigMgt@1000 : Codeunit "Config. Management";
      FileName@1001 : Text;
      Filter@1003 : Text;
    BEGIN
      ConfigLine.FINDFIRST;
      ConfigPackageTable.SETRANGE("Package Code",ConfigLine."Package Code");
      Filter := ConfigMgt.MakeTableFilter(ConfigLine,true);
      if Filter <> '' then
        ConfigPackageTable.SETFILTER("Table ID",Filter);

      ConfigPackageTable.SETRANGE("Dimensions as Columns",true);
      if ConfigPackageTable.FINDSET then
        repeat
          if not (ConfigPackageTable.DimensionPackageDataExist or (ConfigPackageTable.DimensionFieldsCount > 0)) then
            ConfigPackageTable.InitDimensionFields;
        until ConfigPackageTable.NEXT = 0;
      ConfigPackageTable.SETRANGE("Dimensions as Columns");
      ExportExcel(FileName,ConfigPackageTable,true,false);
      exit(FileName);
    END;

    [External]
    PROCEDURE ExportExcelFromPackage@20(ConfigPackage@1000 : Record "Config. Package") : Boolean;
    VAR
      ConfigPackageTable@1006 : Record "Config. Package Table";
      FileName@1001 : Text;
    BEGIN
      ConfigPackageTable.SETRANGE("Package Code",ConfigPackage.Code);
      exit(ExportExcel(FileName,ConfigPackageTable,false,false));
    END;

    [External]
    PROCEDURE ExportExcelFromTables@3(VAR ConfigPackageTable@1000 : Record "Config. Package Table") : Boolean;
    VAR
      FileName@1001 : Text;
    BEGIN
      exit(ExportExcel(FileName,ConfigPackageTable,false,false));
    END;

    [External]
    PROCEDURE ExportExcelTemplateFromTables@21(VAR ConfigPackageTable@1000 : Record "Config. Package Table") : Boolean;
    VAR
      FileName@1001 : Text;
    BEGIN
      exit(ExportExcel(FileName,ConfigPackageTable,false,true));
    END;

    [External]
    PROCEDURE ExportExcel@13(VAR FileName@1025 : Text;VAR ConfigPackageTable@1001 : Record "Config. Package Table";ExportFromWksht@1010 : Boolean;SkipData@1002 : Boolean) : Boolean;
    VAR
      TempBlob@1007 : Record TempBlob;
      VmlDrawingPart@1024 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.VmlDrawingPart";
      TableDefinitionPart@1018 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.TableDefinitionPart";
      TableParts@1027 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.TableParts";
      TablePart@1040 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.TablePart";
      SingleXMLCells@1033 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.SingleXmlCells";
      XmlTextWriter@1015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlTextWriter";
      FileMode@1014 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileMode";
      Encoding@1011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      RootElementName@1003 : Text;
      TempSetupDataFileName@1000 : Text;
      TempSchemaFileName@1004 : Text;
      DataTableCounter@1012 : Integer;
    BEGIN
      OnBeforeExportExcel(ConfigPackageTable);

      TempSchemaFileName := CreateSchemaFile(ConfigPackageTable,RootElementName);
      TempSetupDataFileName := BuildDataSetForPackageTable(ExportFromWksht,ConfigPackageTable);

      CreateBook(TempBlob);
      WrkShtHelper := WrkShtHelper.WorksheetHelper(WrkbkWriter.FirstWorksheet.Worksheet);
      OpenXMLManagement.ImportSchema(WrkbkWriter,TempSchemaFileName,1,RootElementName);
      OpenXMLManagement.CreateSchemaConnection(WrkbkWriter,TempSetupDataFileName);

      DataTableCounter := 1;

      if not HideDialog then
        ConfigProgressBar.Init(ConfigPackageTable.COUNT,1,CreatingExcelMsg);

      DataTable := DataSet.Tables.Item(1);

      if ConfigPackageTable.FINDSET then
        repeat
          if ISNULL(StringBld) then begin
            StringBld := StringBld.StringBuilder;
            StringBld.Append(VmlDrawingXmlTxt);
          end;

          ConfigPackageTable.CALCFIELDS("Table Caption");
          if not HideDialog then
            ConfigProgressBar.Update(ConfigPackageTable."Table Caption");

          // Initialize WorkSheetWriter
          if id < 1 then begin
            WrkShtWriter := WrkbkWriter.FirstWorksheet;
            WrkShtWriter.Name := DELCHR(ConfigPackageTable."Table Caption",'=','/');
          end else
            WrkShtWriter := WrkbkWriter.AddWorksheet(ConfigPackageTable."Table Caption");
          Worksheet := WrkShtWriter.Worksheet;

          // Add and initialize SingleCellTable part
          WrkShtWriter.AddSingleCellTablePart;
          SingleXMLCells := SingleXMLCells.SingleXmlCells;
          Worksheet.WorksheetPart.SingleCellTablePart.SingleXmlCells := SingleXMLCells;
          id += 3;

          OpenXMLManagement.AddAndInitializeCommentsPart(WrkShtWriter,VmlDrawingPart);
          AddPackageAndTableInformation(ConfigPackageTable,SingleXMLCells);
          AddAndInitializeTableDefinitionPart(ConfigPackageTable,ExportFromWksht,DataTableCounter,TableDefinitionPart,SkipData);
          if not SkipData then
            OpenXMLManagement.CopyDataToExcelTable(WrkShtWriter,DataTable);

          DataTableCounter += 2;
          TableParts := WrkShtWriter.CreateTableParts(1);
          WrkShtHelper.AppendElementToOpenXmlElement(Worksheet,TableParts);
          TablePart := WrkShtWriter.CreateTablePart(Worksheet.WorksheetPart.GetIdOfPart(TableDefinitionPart));
          WrkShtHelper.AppendElementToOpenXmlElement(TableParts,TablePart);

          StringBld.Append(EndXmlTokenTxt);

          XmlTextWriter := XmlTextWriter.XmlTextWriter(VmlDrawingPart.GetStream(FileMode.Create),Encoding.UTF8);
          XmlTextWriter.WriteRaw(StringBld.ToString);
          XmlTextWriter.Flush;
          XmlTextWriter.Close;

          CLEAR(StringBld);

        until ConfigPackageTable.NEXT = 0;

      FILE.ERASE(TempSchemaFileName);
      FILE.ERASE(TempSetupDataFileName);

      OpenXMLManagement.CleanMapInfo(WrkbkWriter.Workbook.WorkbookPart.CustomXmlMappingsPart.MapInfo);
      WrkbkWriter.Workbook.Save;
      WrkbkWriter.Close;
      ClearOpenXmlVariables;

      if not HideDialog then
        ConfigProgressBar.Close;

      if FileName = '' then
        FileName :=
          STRSUBSTNO(ExcelFileNameTok,FORMAT(CURRENTDATETIME,0,'<Day,2>_<Month,2>_<Year4>_<Hours24>_<Minutes,2>_<Seconds,2>'));

      if not FileOnServer then
        FileName := FileMgt.BLOBExport(TempBlob,FileName,not HideDialog)
      else
        FileMgt.BLOBExportToServerFile(TempBlob,FileName);

      exit(FileName <> '');
    END;

    [Internal]
    PROCEDURE ImportExcelFromConfig@16(ConfigLine@1000 : Record "Config. Line");
    VAR
      TempBlob@1001 : Record TempBlob;
    BEGIN
      ConfigLine.TESTFIELD("Line Type",ConfigLine."Line Type"::Table);
      ConfigLine.TESTFIELD("Table ID");
      if ConfigPackage.GET(ConfigLine."Package Code") and
         (FileMgt.BLOBImportWithFilter(TempBlob,ImportFromExcelTxt,'',FileExtensionFilterTok,ExcelFileExtensionTok) <> '')
      then
        ImportExcel(TempBlob);
    END;

    [Internal]
    PROCEDURE ImportExcelFromPackage@18() : Boolean;
    VAR
      TempBlob@1002 : Record TempBlob;
    BEGIN
      if FileMgt.BLOBImportWithFilter(TempBlob,ImportFromExcelTxt,'',FileExtensionFilterTok,ExcelFileExtensionTok) <> '' then
        exit(ImportExcel(TempBlob));
      exit(false)
    END;

    [Internal]
    PROCEDURE ImportExcel@24(VAR TempBlob@1000 : Record TempBlob) Imported : Boolean;
    VAR
      TempXMLBuffer@1012 : TEMPORARY Record "XML Buffer";
      WrkShtReader@1010 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetReader";
      DataRow@1006 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.DataRow";
      DataRow2@1025 : DotNet "'System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Data.DataRow";
      Enumerator@1008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      CellData@1003 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.CellData";
      WorkBookPart@1001 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.WorkbookPart";
      Type@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      InStream@1009 : InStream;
      XMLSchemaDataFile@1005 : Text;
      CellValueText@1004 : Text;
      ColumnCount@1016 : Integer;
      TotalColumnCount@1017 : Integer;
      WrkSheetId@1023 : Integer;
      DataColumnTableId@1024 : Integer;
      SheetCount@1022 : Integer;
      RowIn@1014 : Integer;
      SheetHeaderRead@1013 : Boolean;
      CurrentRowIndex@1007 : Integer;
      RowChanged@1011 : Boolean;
      FirstDataRow@1015 : Integer;
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InStream);
      WrkbkReader := WrkbkReader.Open(InStream);
      WorkBookPart := WrkbkReader.Workbook.WorkbookPart;
      XMLSchemaDataFile := OpenXMLManagement.ExtractXMLSchema(WorkBookPart);

      WrkSheetId := WrkbkReader.FirstSheetId;
      SheetCount := WorkBookPart.Workbook.Sheets.ChildElements.Count + WrkSheetId;
      DataSet := DataSet.DataSet;
      DataSet.ReadXmlSchema(XMLSchemaDataFile);

      WrkSheetId := WrkbkReader.FirstSheetId;
      DataColumnTableId := 0;
      repeat
        WrkShtReader := WrkbkReader.GetWorksheetById(FORMAT(WrkSheetId));

        if InitColumnMapping(WrkShtReader,TempXMLBuffer) then begin
          Enumerator := WrkShtReader.GetEnumerator;
          if GetDataTable(DataColumnTableId) then begin
            DataColumn := DataTable.Columns.Item(1);
            DataColumn.DataType := Type.GetType('System.String');
            DataTable.BeginLoadData;
            DataRow := DataTable.NewRow;
            SheetHeaderRead := false;
            DataColumn := DataTable.Columns.Item(1);
            RowIn := 1;
            ColumnCount := 0;
            TotalColumnCount := 0;
            CurrentRowIndex := 1;
            FirstDataRow := 4;
            while Enumerator.MoveNext do begin
              CellData := Enumerator.Current;
              CellValueText := CellData.Value;
              RowChanged := CurrentRowIndex <> CellData.RowNumber;
              if not SheetHeaderRead then begin // Read config and table information
                if (CellData.RowNumber = 1) and (CellData.ColumnNumber = 1) then
                  DataRow.Item(1,CellValueText);
                if (CellData.RowNumber = 1) and (CellData.ColumnNumber = 3) then begin
                  DataColumn := DataTable.Columns.Item(0);
                  DataRow.Item(0,CellValueText);
                  DataTable.Rows.Add(DataRow);
                  DataColumn := DataTable.Columns.Item(2);
                  DataColumn.AllowDBNull(true);
                  DataTable := DataSet.Tables.Item(DataColumnTableId + 1);
                  ColumnCount := 0;
                  TotalColumnCount := DataTable.Columns.Count - 1;
                  repeat
                    DataColumn := DataTable.Columns.Item(ColumnCount);
                    DataColumn.DataType := Type.GetType('System.String');
                    ColumnCount += 1;
                  until ColumnCount = TotalColumnCount;
                  ColumnCount := 0;
                  DataRow2 := DataTable.NewRow;
                  DataRow2.SetParentRow(DataRow);
                  SheetHeaderRead := true;
                end;
              end else begin // Read data rows
                if (RowIn = 1) and (CellData.RowNumber >= FirstDataRow) and (CellData.ColumnNumber = 1) then begin
                  TotalColumnCount := ColumnCount;
                  ColumnCount := 0;
                  RowIn += 1;
                  FirstDataRow := CellData.RowNumber;
                end;

                if RowChanged and (CellData.RowNumber > FirstDataRow) and (RowIn <> 1) then begin
                  DataTable.Rows.Add(DataRow2);
                  DataTable.EndLoadData;
                  DataRow2 := DataTable.NewRow;
                  DataRow2.SetParentRow(DataRow);
                  RowIn += 1;
                  ColumnCount := 0;
                end;

                if RowIn <> 1 then
                  if TempXMLBuffer.GET(CellData.ColumnNumber) then begin
                    DataColumn := DataTable.Columns.Item(TempXMLBuffer."Parent Entry No.");
                    DataColumn.AllowDBNull(true);
                    DataRow2.Item(TempXMLBuffer."Parent Entry No.",CellValueText);
                  end;

                ColumnCount := CellData.ColumnNumber + 1;
              end;
              CurrentRowIndex := CellData.RowNumber;
            end;
            // Add the last row
            DataTable.Rows.Add(DataRow2);
            DataTable.EndLoadData;
          end else
            MESSAGE(InvalidDataInSheetMsg,WrkShtReader.Name);
        end;

        WrkSheetId += 1;
        DataColumnTableId += 2;
      until WrkSheetId >= SheetCount;

      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(InStream);
      DataSet.WriteXml(InStream);
      ConfigXMLExchange.SetExcelMode(true);
      if ConfigXMLExchange.ImportPackageXMLFromStream(InStream) then
        Imported := true;

      exit(Imported);
    END;

    [External]
    PROCEDURE ClearOpenXmlVariables@7();
    BEGIN
      CLEAR(WrkbkReader);
      CLEAR(WrkbkWriter);
      CLEAR(WrkShtWriter);
      CLEAR(Workbook);
      CLEAR(WorkBookPart);
      CLEAR(WrkShtHelper);
    END;

    [External]
    PROCEDURE CreateBook@27(VAR TempBlob@1000 : Record TempBlob);
    VAR
      InStream@1001 : InStream;
    BEGIN
      TempBlob.Blob.CREATEINSTREAM(InStream);
      WrkbkWriter := WrkbkWriter.Create(InStream);
      if ISNULL(WrkbkWriter) then
        ERROR(CreateWrkBkFailedErr);

      Workbook := WrkbkWriter.Workbook;
      WorkBookPart := Workbook.WorkbookPart;
    END;

    [External]
    PROCEDURE SetHideDialog@1(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    LOCAL PROCEDURE CreateSchemaFile@15(VAR ConfigPackageTable@1000 : Record "Config. Package Table";VAR RootElementName@1005 : Text) : Text;
    VAR
      ConfigDataSchema@1004 : XMLport "Config. Data Schema";
      OStream@1002 : OutStream;
      TempSchemaFile@1003 : File;
      TempSchemaFileName@1001 : Text;
    BEGIN
      TempSchemaFile.CREATETEMPFILE;
      TempSchemaFileName := TempSchemaFile.NAME + '.xsd';
      TempSchemaFile.CLOSE;
      TempSchemaFile.CREATE(TempSchemaFileName);
      TempSchemaFile.CREATEOUTSTREAM(OStream);
      RootElementName := ConfigDataSchema.GetRootElementName;
      ConfigDataSchema.SETDESTINATION(OStream);
      ConfigDataSchema.SETTABLEVIEW(ConfigPackageTable);
      if not ConfigDataSchema.EXPORT then
        ERROR(CannotCreateXmlSchemaErr);
      TempSchemaFile.CLOSE;
      exit(TempSchemaFileName);
    END;

    LOCAL PROCEDURE CreateXMLPackage@4(TempSetupDataFileName@1000 : Text;ExportFromWksht@1001 : Boolean;VAR ConfigPackageTable@1002 : Record "Config. Package Table") : Text;
    BEGIN
      CLEAR(ConfigXMLExchange);
      ConfigXMLExchange.SetExcelMode(true);
      ConfigXMLExchange.SetCalledFromCode(true);
      ConfigXMLExchange.SetPrefixMode(true);
      ConfigXMLExchange.SetExportFromWksht(ExportFromWksht);
      ConfigXMLExchange.ExportPackageXML(ConfigPackageTable,TempSetupDataFileName);
      ConfigXMLExchange.SetExcelMode(false);
      exit(TempSetupDataFileName);
    END;

    LOCAL PROCEDURE CreateTableColumnNames@6(VAR ConfigPackageField@1000 : Record "Config. Package Field";VAR ConfigPackageTable@1006 : Record "Config. Package Table";TableColumns@1008 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.TableColumns");
    VAR
      Field@1002 : Record Field;
      Dimension@1004 : Record Dimension;
      XmlColumnProperties@1005 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.XmlColumnProperties";
      TableColumn@1007 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.TableColumn";
      WrkShtWriter2@1011 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetWriter";
      RecRef@1012 : RecordRef;
      FieldRef@1010 : FieldRef;
      TableColumnName@1003 : Text;
      ColumnID@1001 : Integer;
    BEGIN
      RecRef.OPEN(ConfigPackageTable."Table ID");
      ConfigPackageField.SETCURRENTKEY("Package Code","Table ID","Processing Order");
      if ConfigPackageField.FINDSET then begin
        ColumnID := 1;
        repeat
          if Field.GET(ConfigPackageField."Table ID",ConfigPackageField."Field ID") or ConfigPackageField.Dimension then begin
            if ConfigPackageField.Dimension then
              TableColumnName := ConfigPackageField."Field Caption" + ' ' + STRSUBSTNO('(%1)',Dimension.TABLECAPTION)
            else
              TableColumnName := ConfigPackageField."Field Caption";
            XmlColumnProperties := WrkShtWriter2.CreateXmlColumnProperties(
                1,
                '/DataList/' + (ConfigXMLExchange.GetElementName(ConfigPackageTable."Table Caption") + 'List') +
                '/' + ConfigXMLExchange.GetElementName(ConfigPackageTable."Table Caption") +
                '/' + ConfigXMLExchange.GetElementName(ConfigPackageField."Field Caption"),
                WrkShtWriter.XmlDataType2XmlDataValues(
                  ConfigXMLExchange.GetXSDType(ConfigPackageTable."Table ID",ConfigPackageField."Field ID")));
            TableColumn := WrkShtWriter.CreateTableColumn(
                ColumnID,
                TableColumnName,
                ConfigXMLExchange.GetElementName(ConfigPackageField."Field Caption"));
            WrkShtHelper.AppendElementToOpenXmlElement(TableColumn,XmlColumnProperties);
            WrkShtHelper.AppendElementToOpenXmlElement(TableColumns,TableColumn);
            WrkShtWriter.SetCellValueText(
              3,OpenXMLManagement.GetXLColumnID(ColumnID),TableColumnName,WrkShtWriter.DefaultCellDecorator);
            if not ConfigPackageField.Dimension then begin
              FieldRef := RecRef.FIELD(ConfigPackageField."Field ID");
              OpenXMLManagement.SetCellComment(
                WrkShtWriter,OpenXMLManagement.GetXLColumnID(ColumnID) + '3',ConfigValidateMgt.AddComment(FieldRef));
              CreateCommentVmlShapeXml(ColumnID,3);
            end;
          end;
          ColumnID += 1;
        until ConfigPackageField.NEXT = 0;
      end;
      RecRef.CLOSE;
    END;

    LOCAL PROCEDURE CreateCommentVmlShapeXml@23(ColId@1000 : Integer;RowId@1001 : Integer);
    VAR
      Guid@1002 : GUID;
      Anchor@1003 : Text;
      CommentShape@1004 : Text;
    BEGIN
      Guid := CREATEGUID;

      Anchor := CreateCommentVmlAnchor(ColId,RowId);

      CommentShape := STRSUBSTNO(CommentVmlShapeXmlTxt,Guid,Anchor,RowId - 1,ColId - 1);

      StringBld.Append(CommentShape);
    END;

    LOCAL PROCEDURE CreateCommentVmlAnchor@39(ColId@1000 : Integer;RowId@1001 : Integer) : Text;
    BEGIN
      exit(STRSUBSTNO(VmlShapeAnchorTxt,ColId,RowId - 2,ColId + 2));
    END;

    LOCAL PROCEDURE AddPackageAndTableInformation@28(VAR ConfigPackageTable@1002 : Record "Config. Package Table";VAR SingleXMLCells@1001 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.SingleXmlCells");
    VAR
      SingleXMLCell@1000 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.SingleXmlCell";
      RecRef@1003 : RecordRef;
      TableCaptionString@1004 : Text;
    BEGIN
      // Add package name
      SingleXMLCell := WrkShtWriter.AddSingleXmlCell(id);
      WrkShtHelper.AppendElementToOpenXmlElement(SingleXMLCells,SingleXMLCell);
      OpenXMLManagement.AddSingleXMLCellProperties(SingleXMLCell,'A1','/DataList/' +
        (ConfigXMLExchange.GetElementName(ConfigPackageTable."Table Caption") + 'List') + '/' +
        ConfigXMLExchange.GetElementName(ConfigPackageTable.FIELDNAME("Package Code")),1,1);
      WrkShtWriter.SetCellValueText(1,'A',ConfigPackageTable."Package Code",WrkShtWriter.DefaultCellDecorator);

      // Add Table name
      RecRef.OPEN(ConfigPackageTable."Table ID");
      TableCaptionString := RecRef.CAPTION;
      RecRef.CLOSE;
      WrkShtWriter.SetCellValueText(1,'B',TableCaptionString,WrkShtWriter.DefaultCellDecorator);

      // Add Table id
      id += 1;
      SingleXMLCell := WrkShtWriter.AddSingleXmlCell(id);
      WrkShtHelper.AppendElementToOpenXmlElement(SingleXMLCells,SingleXMLCell);

      OpenXMLManagement.AddSingleXMLCellProperties(SingleXMLCell,'C1','/DataList/' +
        (ConfigXMLExchange.GetElementName(ConfigPackageTable."Table Caption") + 'List') + '/' +
        ConfigXMLExchange.GetElementName(ConfigPackageTable.FIELDNAME("Table ID")),1,1);
      WrkShtWriter.SetCellValueText(1,'C',FORMAT(ConfigPackageTable."Table ID"),WrkShtWriter.DefaultCellDecorator);
    END;

    LOCAL PROCEDURE BuildDataSetForPackageTable@12(ExportFromWksht@1001 : Boolean;VAR ConfigPackageTable@1002 : Record "Config. Package Table") : Text;
    VAR
      TempSetupDataFileName@1000 : Text;
    BEGIN
      TempSetupDataFileName := CreateXMLPackage(FileMgt.ServerTempFileName(''),ExportFromWksht,ConfigPackageTable);
      DataSet := DataSet.DataSet;
      DataSet.ReadXml(TempSetupDataFileName);
      exit(TempSetupDataFileName);
    END;

    LOCAL PROCEDURE AddAndInitializeTableDefinitionPart@26(VAR ConfigPackageTable@1003 : Record "Config. Package Table";ExportFromWksht@1004 : Boolean;DataTableCounter@1005 : Integer;VAR TableDefinitionPart@1011 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Packaging.TableDefinitionPart";SkipData@1000 : Boolean);
    VAR
      ConfigPackageField@1002 : Record "Config. Package Field";
      TableColumns@1001 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.TableColumns";
      Table@1007 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Table";
      BooleanValue@1006 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.BooleanValue";
      StringValue@1008 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.StringValue";
      RowsCount@1012 : Integer;
    BEGIN
      TableDefinitionPart := WrkShtWriter.CreateTableDefinitionPart;
      ConfigPackageField.RESET;
      ConfigPackageField.SETRANGE("Package Code",ConfigPackageTable."Package Code");
      ConfigPackageField.SETRANGE("Table ID",ConfigPackageTable."Table ID");
      ConfigPackageField.SETRANGE("Include Field",true);
      if not ExportFromWksht then
        ConfigPackageField.SETRANGE(Dimension,false);

      DataTable := DataSet.Tables.Item(DataTableCounter);

      id += 1;
      if SkipData then
        RowsCount := 1
      else
        RowsCount := DataTable.Rows.Count;
      Table := WrkShtWriter.CreateTable(id);
      Table.TotalsRowShown := BooleanValue.BooleanValue(false);
      Table.Reference :=
        StringValue.StringValue(
          'A3:' + OpenXMLManagement.GetXLColumnID(ConfigPackageField.COUNT) + FORMAT(RowsCount + 3));
      Table.Name := StringValue.StringValue('Table' + FORMAT(id));
      Table.DisplayName := StringValue.StringValue('Table' + FORMAT(id));
      OpenXMLManagement.AppendAutoFilter(Table);
      TableColumns := WrkShtWriter.CreateTableColumns(ConfigPackageField.COUNT);

      CreateTableColumnNames(ConfigPackageField,ConfigPackageTable,TableColumns);
      WrkShtHelper.AppendElementToOpenXmlElement(Table,TableColumns);
      OpenXMLManagement.AppendTableStyleInfo(Table);
      TableDefinitionPart.Table := Table;
    END;

    [TryFunction]
    LOCAL PROCEDURE GetDataTable@41(TableId@1000 : Integer);
    BEGIN
      DataTable := DataSet.Tables.Item(TableId);
    END;

    LOCAL PROCEDURE InitColumnMapping@8(WrkShtReader@1002 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetReader";VAR TempXMLBuffer@1003 : TEMPORARY Record "XML Buffer") : Boolean;
    VAR
      Table@1001 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Table";
      TableColumn@1004 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.TableColumn";
      Enumerable@1009 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerable";
      Enumerator@1008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      XmlColumnProperties@1012 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.XmlColumnProperties";
      OpenXmlElement@1011 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.OpenXmlElement";
      TableStartColumnIndex@1015 : Integer;
      Index@1016 : Integer;
    BEGIN
      TempXMLBuffer.DELETEALL;
      if not OpenXMLManagement.FindTableDefinition(WrkShtReader,Table) then
        exit(false);

      TableStartColumnIndex := GetTableStartColumnIndex(Table);
      Index := 0;
      Enumerable := Table.TableColumns;
      Enumerator := Enumerable.GetEnumerator;
      while Enumerator.MoveNext do begin
        TableColumn := Enumerator.Current;
        XmlColumnProperties := TableColumn.XmlColumnProperties;
        if not ISNULL(XmlColumnProperties) then begin
          OpenXmlElement := XmlColumnProperties.XPath; // identifies column to xsd mapping.
          if not ISNULL(OpenXmlElement) then
            InsertXMLBuffer(Index + TableStartColumnIndex,TempXMLBuffer);
        end;
        Index += 1;
      end;

      // RowCount > 2 means sheet has datarow(s)
      exit(WrkShtReader.RowCount > 2);
    END;

    LOCAL PROCEDURE GetTableStartColumnIndex@31(Table@1000 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.Table") : Integer;
    VAR
      String@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      Index@1002 : Integer;
      Length@1005 : Integer;
      ColumnIndex@1006 : Integer;
    BEGIN
      // <x:table id="5" ... ref="A3:E6" ...>
      // table.Reference = "A3:E6" (A3 - top left table corner, E6 - bottom right corner)
      // we convert "A" - to column index
      String := Table.Reference.Value;
      Length := String.IndexOf(':');
      String := DELCHR(String.Substring(0,Length),'=','0123456789');
      Length := String.Length - 1;
      for Index := 0 to Length do
        ColumnIndex += (String.Chars(Index) - 64) + Index * 26;
      exit(ColumnIndex);
    END;

    LOCAL PROCEDURE InsertXMLBuffer@71(ColumnIndex@1000 : Integer;VAR TempXMLBuffer@1001 : TEMPORARY Record "XML Buffer");
    BEGIN
      TempXMLBuffer.INIT;
      TempXMLBuffer."Entry No." := ColumnIndex; // column index in table definition
      TempXMLBuffer."Parent Entry No." := TempXMLBuffer.COUNT; // column index in dataset
      TempXMLBuffer.INSERT;
    END;

    PROCEDURE SetFileOnServer@29(NewFileOnServer@1000 : Boolean);
    BEGIN
      FileOnServer := NewFileOnServer;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeExportExcel@72(VAR ConfigPackageTable@1000 : Record "Config. Package Table");
    BEGIN
    END;

    BEGIN
    END.
  }
}

