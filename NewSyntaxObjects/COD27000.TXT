OBJECT Codeunit 27000 Export Accounts
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160938.420T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempErrorMessage@1020002 : TEMPORARY Record "Error Message";
      CurrencyExchangeRate@1020019 : Record "Currency Exchange Rate";
      TestFileName@1020004 : Text;
      GLAccountTypeErr@1020012 : TextConst 'ENU=Debit/Credit ''%1'' is not supported in %2.';
      InvalidMonthErr@1020003 : TextConst 'ENU=The Month must be in the range 1-12.';
      InvalidYearErr@1020017 : TextConst 'ENU=The Year must be in the range 2000-2999.';
      MissingUpdateDateErr@1020015 : TextConst 'ENU=You need to specify an update date before export.';
      MissingOrderNumberErr@1020016 : TextConst 'ENU=You need to specify an Order Number before export.';
      NoSATAccountDefinedErr@1020018 : TextConst 'ENU=You need to specify SAT Account Code on G/L Accounts before export.';
      NamespaceTxt@1020006 : TextConst '@@@={Locked};ENU=http://www.sat.gob.mx/esquemas/ContabilidadE/1_3/';
      NamespaceW3Txt@1020020 : TextConst '@@@={Locked};ENU=http://www.w3.org/2001/XMLSchema-instance';
      CatalogoNamespaceTxt@1020007 : TextConst '@@@={Locked};ENU=CatalogoCuentas';
      BalanzaNamespaceTxt@1020008 : TextConst '@@@={Locked};ENU=BalanzaComprobacion';
      PolizasNamespaceTxt@1020013 : TextConst '@@@={Locked};ENU=PolizasPeriodo';
      AuxiliaryAccountNamespaceTxt@1020010 : TextConst '@@@={Locked};ENU=AuxiliarCtas';
      CatalogoNodeTxt@1020014 : TextConst '@@@={Locked};ENU=Catalogo';
      BalanzaNodeTxt@1020009 : TextConst '@@@={Locked};ENU=Balanza';
      PolizasNodeTxt@1020005 : TextConst '@@@={Locked};ENU=Polizas';
      AuxiliaryAccountNodeTxt@1020011 : TextConst '@@@={Locked};ENU=AuxiliarCtas';

    [External]
    PROCEDURE ExportChartOfAccounts@1020000(Year@1020006 : Integer;Month@1020007 : Integer);
    VAR
      GLAccount@1020003 : Record "G/L Account";
      TempXMLBuffer@1020005 : TEMPORARY Record "XML Buffer";
    BEGIN
      TempErrorMessage.ClearLog;
      GLAccount.SETFILTER("SAT Account Code",'<>%1','');

      CreateXMLHeader(TempXMLBuffer,CatalogoNodeTxt,CatalogoNamespaceTxt,Year,Month,'1.3');
      if GLAccount.FINDSET then begin
        repeat
          TempErrorMessage.LogIfEmpty(GLAccount,GLAccount.FIELDNO(Name),TempErrorMessage."Message Type"::Error);

          GLAccount.CALCFIELDS("Debit Amount","Credit Amount");
          TempXMLBuffer.AddGroupElement('Ctas');
          TempXMLBuffer.AddAttribute('CodAgrup',GLAccount."SAT Account Code");
          TempXMLBuffer.AddAttribute('NumCta',GLAccount."No.");
          TempXMLBuffer.AddAttribute('Desc',GLAccount.Name);
          TempXMLBuffer.AddAttribute('Nivel',FORMAT(GLAccount.Indentation + 1));
          case GLAccount."Debit/Credit" of
            GLAccount."Debit/Credit"::Debit:
              TempXMLBuffer.AddAttribute('Natur','D');
            GLAccount."Debit/Credit"::Credit:
              TempXMLBuffer.AddAttribute('Natur','A');
            else
              TempErrorMessage.LogMessage(
                GLAccount,GLAccount.FIELDNO("Debit/Credit"),TempErrorMessage."Message Type"::Error,
                STRSUBSTNO(GLAccountTypeErr,GLAccount."Debit/Credit",GLAccount.RECORDID));
          end;
          TempXMLBuffer.GetParent;
        until GLAccount.NEXT = 0;
      end else
        TempErrorMessage.LogSimpleMessage(TempErrorMessage."Message Type"::Error,NoSATAccountDefinedErr);

      if not TempErrorMessage.HasErrors(true) then
        SaveXMLToClient(TempXMLBuffer,Year,Month,'CT');
      TempErrorMessage.ShowErrorMessages(false);
    END;

    [External]
    PROCEDURE ExportBalanceSheet@1020001(Year@1020009 : Integer;Month@1020010 : Integer;DeliveryType@1020011 : 'Normal,Complementary';UpdateDate@1020012 : Date;ClosingBalanceSheet@1020007 : Boolean);
    VAR
      GLAccount@1020002 : Record "G/L Account";
      GLAccountBalanceIni@1020008 : Record "G/L Account";
      GLAccountBalanceFin@1020013 : Record "G/L Account";
      TempXMLBuffer@1020015 : TEMPORARY Record "XML Buffer";
      StartDate@1020001 : Date;
      EndDate@1020000 : Date;
      FileType@1020014 : Text;
    BEGIN
      TempErrorMessage.ClearLog;

      if not ClosingBalanceSheet then begin
        StartDate := DMY2DATE(1,Month,Year);
        EndDate := CALCDATE('<CM>',StartDate);
      end else begin
        StartDate := DMY2DATE(1,1,Year);
        EndDate := CLOSINGDATE(CALCDATE('<CY>',DMY2DATE(1,1,Year)));
        Month := 13;
      end;

      CreateXMLHeader(TempXMLBuffer,BalanzaNodeTxt,BalanzaNamespaceTxt,Year,Month,'1.3');

      GLAccount.SETRANGE("Date Filter",StartDate,EndDate);
      GLAccount.SETFILTER("SAT Account Code",'<>%1','');

      if DeliveryType = DeliveryType::Normal then
        TempXMLBuffer.AddAttribute('TipoEnvio','N')
      else begin
        TempXMLBuffer.AddAttribute('TipoEnvio','C');
        if UpdateDate = 0D then
          TempErrorMessage.LogSimpleMessage(TempErrorMessage."Message Type"::Error,MissingUpdateDateErr);
        TempXMLBuffer.AddAttribute('FechaModBal',FORMAT(UpdateDate,0,9));
      end;

      if GLAccount.FINDSET then
        repeat
          GLAccount.CALCFIELDS("Debit Amount","Credit Amount");

          GLAccountBalanceIni.GET(GLAccount."No.");
          GLAccountBalanceIni.SETFILTER("Date Filter",'..%1',CLOSINGDATE(StartDate - 1));
          GLAccountBalanceIni.CALCFIELDS("Balance at Date");

          GLAccountBalanceFin.GET(GLAccount."No.");
          GLAccountBalanceFin.SETFILTER("Date Filter",'..%1',EndDate);
          GLAccountBalanceFin.CALCFIELDS("Balance at Date");

          TempXMLBuffer.AddGroupElement('Ctas');
          TempXMLBuffer.AddAttribute('NumCta',GLAccount."No.");
          TempXMLBuffer.AddAttribute('SaldoIni',FormatDecimal(GLAccountBalanceIni."Balance at Date"));
          TempXMLBuffer.AddAttribute('Debe',FormatDecimal(GLAccount."Debit Amount"));
          TempXMLBuffer.AddAttribute('Haber',FormatDecimal(GLAccount."Credit Amount"));
          TempXMLBuffer.AddAttribute('SaldoFin',FormatDecimal(GLAccountBalanceFin."Balance at Date"));
          TempXMLBuffer.GetParent;
        until GLAccount.NEXT = 0;

      if DeliveryType = DeliveryType::Normal then
        FileType := 'BN'
      else
        FileType := 'BC';

      if not TempErrorMessage.HasErrors(true) then
        SaveXMLToClient(TempXMLBuffer,Year,Month,FileType);

      TempErrorMessage.ShowErrorMessages(false);
    END;

    [External]
    PROCEDURE ExportTransactions@1020002(Year@1020000 : Integer;Month@1020001 : Integer;RequestType@1020016 : 'AF,FC,DE,CO';OrderNumber@1020015 : Text[13];ProcessNumber@1020009 : Text[14]);
    VAR
      GLEntry@1020002 : Record "G/L Entry";
      TempXMLBuffer@1020003 : TEMPORARY Record "XML Buffer";
      StartDate@1020010 : Date;
      EndDate@1020011 : Date;
      TransactionNoCurrent@1020014 : Integer;
    BEGIN
      TempErrorMessage.ClearLog;
      StartDate := DMY2DATE(1,Month,Year);
      EndDate := CALCDATE('<CM>',StartDate);

      CreateXMLHeader(TempXMLBuffer,PolizasNodeTxt,PolizasNamespaceTxt,Year,Month,'1.3');
      TempXMLBuffer.AddAttribute('TipoSolicitud',FORMAT(RequestType));
      if RequestType in [RequestType::AF,RequestType::FC] then begin
        if OrderNumber <> '' then
          TempXMLBuffer.AddAttribute('NumOrden',OrderNumber)
        else
          TempErrorMessage.LogSimpleMessage(TempErrorMessage."Message Type"::Error,MissingOrderNumberErr);
      end else begin
        if ProcessNumber <> '' then
          TempXMLBuffer.AddAttribute('NumTramite',ProcessNumber)
        else
          TempErrorMessage.LogSimpleMessage(TempErrorMessage."Message Type"::Error,MissingOrderNumberErr);
      end;

      GLEntry.SETCURRENTKEY("Transaction No.");
      GLEntry.SETRANGE("Posting Date",StartDate,EndDate);

      if GLEntry.FINDSET then begin
        repeat
          if TransactionNoCurrent <> GLEntry."Transaction No." then begin
            if TransactionNoCurrent <> 0 then
              TempXMLBuffer.GetParent;
            TransactionNoCurrent := GLEntry."Transaction No.";
            CreatePolizaNode(TempXMLBuffer,GLEntry);
          end;
          CreateTransaccionNode(TempXMLBuffer,GLEntry);
        until GLEntry.NEXT = 0;
        TempXMLBuffer.GetParent;
      end;

      if not TempErrorMessage.HasErrors(true) then
        SaveXMLToClient(TempXMLBuffer,Year,Month,'PL');

      TempErrorMessage.ShowErrorMessages(false);
    END;

    [External]
    PROCEDURE ExportAuxiliaryAccounts@1020023(Year@1020006 : Integer;Month@1020007 : Integer;RequestType@1020015 : 'AF,FC,DE,CO';OrderNumber@1020014 : Text[13];ProcessNumber@1020013 : Text[14]);
    VAR
      GLAccount@1020003 : Record "G/L Account";
      GLAccountBalanceIni@1020010 : Record "G/L Account";
      GLAccountBalanceFin@1020012 : Record "G/L Account";
      GLEntry@1020011 : Record "G/L Entry";
      TempXMLBuffer@1020016 : TEMPORARY Record "XML Buffer";
      StartDate@1020009 : Date;
      EndDate@1020008 : Date;
    BEGIN
      TempErrorMessage.ClearLog;
      StartDate := DMY2DATE(1,Month,Year);
      EndDate := CALCDATE('<CM>',StartDate);

      GLAccount.SETRANGE("Date Filter",StartDate,EndDate);
      GLAccount.SETFILTER("SAT Account Code",'<>%1','');

      CreateXMLHeader(TempXMLBuffer,AuxiliaryAccountNodeTxt,AuxiliaryAccountNamespaceTxt,Year,Month,'1.3');
      TempXMLBuffer.AddAttribute('TipoSolicitud',FORMAT(RequestType));
      if RequestType in [RequestType::AF,RequestType::FC] then begin
        if OrderNumber <> '' then
          TempXMLBuffer.AddAttribute('NumOrden',OrderNumber)
        else
          TempErrorMessage.LogSimpleMessage(TempErrorMessage."Message Type"::Error,MissingOrderNumberErr);
      end else begin
        if ProcessNumber <> '' then
          TempXMLBuffer.AddAttribute('NumTramite',ProcessNumber)
        else
          TempErrorMessage.LogSimpleMessage(TempErrorMessage."Message Type"::Error,MissingOrderNumberErr);
      end;

      if GLAccount.FINDSET then begin
        repeat
          GLEntry.SETRANGE("G/L Account No.",GLAccount."No.");
          GLEntry.SETRANGE("Posting Date",StartDate,EndDate);
          if GLEntry.FINDSET then begin
            GLAccountBalanceIni.GET(GLAccount."No.");
            GLAccountBalanceIni.SETFILTER("Date Filter",'..%1',CLOSINGDATE(StartDate - 1));
            GLAccountBalanceIni.CALCFIELDS("Balance at Date");

            GLAccountBalanceFin.GET(GLAccount."No.");
            GLAccountBalanceFin.SETFILTER("Date Filter",'..%1',EndDate);
            GLAccountBalanceFin.CALCFIELDS("Balance at Date");

            TempErrorMessage.LogIfEmpty(GLAccount,GLAccount.FIELDNO(Name),TempErrorMessage."Message Type"::Error);

            TempXMLBuffer.AddGroupElement('Cuenta');
            TempXMLBuffer.AddAttribute('NumCta',GLAccount."No.");
            TempXMLBuffer.AddAttribute('DesCta',GLAccount.Name);
            TempXMLBuffer.AddAttribute('SaldoIni',FormatDecimal(GLAccountBalanceIni."Balance at Date"));
            TempXMLBuffer.AddAttribute('SaldoFin',FormatDecimal(GLAccountBalanceFin."Balance at Date"));

            repeat
              TempErrorMessage.LogIfEmpty(GLEntry,GLEntry.FIELDNO("Source Code"),TempErrorMessage."Message Type"::Warning);
              TempXMLBuffer.AddGroupElement('DetalleAux');
              TempXMLBuffer.AddAttribute('Fecha',FORMAT(GLEntry."Posting Date",0,9));
              TempXMLBuffer.AddAttribute('NumUnIdenPol',FORMAT(GLEntry."Transaction No."));
              TempXMLBuffer.AddAttribute('Concepto',GLEntry."Source Code");
              TempXMLBuffer.AddAttribute('Debe',FormatDecimal(GLEntry."Debit Amount"));
              TempXMLBuffer.AddAttribute('Haber',FormatDecimal(GLEntry."Credit Amount"));
              TempXMLBuffer.GetParent;
            until GLEntry.NEXT = 0;
            TempXMLBuffer.GetParent;
          end;
        until GLAccount.NEXT = 0;
      end;

      if not TempErrorMessage.HasErrors(true) then
        SaveXMLToClient(TempXMLBuffer,Year,Month,'XC');

      TempErrorMessage.ShowErrorMessages(false);
    END;

    LOCAL PROCEDURE CreateXMLHeader@1020003(VAR TempXMLBuffer@1020004 : TEMPORARY Record "XML Buffer";RootNodeName@1020003 : Text;NodeNameSpace@1020005 : Text;Year@1020007 : Integer;Month@1020008 : Integer;Version@1020002 : Text);
    VAR
      CompanyInformation@1020006 : Record "Company Information";
      FullNameSpace@1020009 : Text;
    BEGIN
      CompanyInformation.GET;

      TempErrorMessage.LogIfEmpty(CompanyInformation,CompanyInformation.FIELDNO("RFC No."),TempErrorMessage."Message Type"::Error);
      if (Month < 1) or (Month > 13) then
        TempErrorMessage.LogSimpleMessage(TempErrorMessage."Message Type"::Error,InvalidMonthErr);
      if (Year < 2000) or (Month > 2999) then
        TempErrorMessage.LogSimpleMessage(TempErrorMessage."Message Type"::Error,InvalidYearErr);

      FullNameSpace := NamespaceTxt + NodeNameSpace;
      TempXMLBuffer.CreateRootElement(RootNodeName);
      TempXMLBuffer.AddNamespace('',FullNameSpace);

      TempXMLBuffer.AddAttribute('Version',Version);
      TempXMLBuffer.AddAttribute('RFC',CompanyInformation."RFC No.");
      TempXMLBuffer.AddAttribute('Mes',FORMAT(Month,2,'<Integer,2><Filler Character,0>'));
      TempXMLBuffer.AddAttribute('Anio',FORMAT(Year));
      TempXMLBuffer.AddAttribute('xsi:schemaLocation',
        FullNameSpace + ' ' + FullNameSpace + '/' + NodeNameSpace + '_1_3.xsd');
      TempXMLBuffer.AddAttribute('xmlns:xsi',NamespaceW3Txt);
    END;

    LOCAL PROCEDURE CreatePolizaNode@1020004(VAR TempXMLBuffer@1020001 : TEMPORARY Record "XML Buffer";GLEntry@1020004 : Record "G/L Entry");
    BEGIN
      TempErrorMessage.LogIfEmpty(GLEntry,GLEntry.FIELDNO("Source Code"),TempErrorMessage."Message Type"::Warning);

      TempXMLBuffer.AddGroupElement('Poliza');
      TempXMLBuffer.AddAttribute('NumUnIdenPol',FORMAT(GLEntry."Transaction No."));
      TempXMLBuffer.AddAttribute('Fecha',FORMAT(GLEntry."Posting Date",0,9));
      TempXMLBuffer.AddAttribute('Concepto',GLEntry."Source Code");
    END;

    LOCAL PROCEDURE CreateTransaccionNode@1020005(VAR TempXMLBuffer@1020002 : Record "XML Buffer";GLEntry@1020004 : Record "G/L Entry");
    VAR
      GeneralLedgerSetup@1020003 : Record "General Ledger Setup";
      GLAccount@1020001 : Record "G/L Account";
    BEGIN
      GeneralLedgerSetup.GET;
      GLAccount.GET(GLEntry."G/L Account No.");

      TempErrorMessage.LogIfEmpty(GLAccount,GLAccount.FIELDNO(Name),TempErrorMessage."Message Type"::Error);
      TempErrorMessage.LogIfEmpty(GLEntry,GLEntry.FIELDNO(Description),TempErrorMessage."Message Type"::Warning);

      TempXMLBuffer.AddGroupElement('Transaccion');
      TempXMLBuffer.AddAttribute('NumCta',GLAccount."No.");
      TempXMLBuffer.AddAttribute('DesCta',GLAccount.Name);
      TempXMLBuffer.AddAttribute('Concepto',GLEntry.Description);
      TempXMLBuffer.AddAttribute('Debe',FormatDecimal(GLEntry."Debit Amount"));
      TempXMLBuffer.AddAttribute('Haber',FormatDecimal(GLEntry."Credit Amount"));

      CreateCustomerReceipts(TempXMLBuffer,GLEntry,false);
      CreateVendorReceipts(TempXMLBuffer,GLEntry,false);

      CreateTransfers(TempXMLBuffer,GLEntry);
      TempXMLBuffer.GetParent;
    END;

    LOCAL PROCEDURE CreateVendorReceipts@1020008(VAR TempXMLBuffer@1020000 : Record "XML Buffer";GLEntry@1020001 : Record "G/L Entry";IsAuxiliary@1020009 : Boolean);
    VAR
      VendorLedgerEntry@1020011 : Record "Vendor Ledger Entry";
      AppliedVendorLedgerEntry@1020005 : Record "Vendor Ledger Entry";
      VendorPostingGroup@1020002 : Record "Vendor Posting Group";
    BEGIN
      VendorLedgerEntry.SETRANGE("Transaction No.",GLEntry."Transaction No.");

      if VendorLedgerEntry.FINDSET then
        repeat
          VendorPostingGroup.GET(VendorLedgerEntry."Vendor Posting Group");
          if VendorPostingGroup."Payables Account" = GLEntry."G/L Account No." then begin
            if VendorLedgerEntry."Document Type" in [VendorLedgerEntry."Document Type"::Payment,
                                                     VendorLedgerEntry."Document Type"::Refund]
            then begin
              FindAppliedVendorReceipts(AppliedVendorLedgerEntry,VendorLedgerEntry."Entry No.");
              if AppliedVendorLedgerEntry.FINDSET then
                repeat
                  CreateReceipt(TempXMLBuffer,AppliedVendorLedgerEntry,IsAuxiliary);
                until AppliedVendorLedgerEntry.NEXT = 0;
            end else
              CreateReceipt(TempXMLBuffer,VendorLedgerEntry,IsAuxiliary);
          end;
        until VendorLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateCustomerReceipts@1020037(VAR TempXMLBuffer@1020000 : Record "XML Buffer";GLEntry@1020001 : Record "G/L Entry";IsAuxiliary@1020009 : Boolean);
    VAR
      CustLedgerEntry@1020011 : Record "Cust. Ledger Entry";
      AppliedCustLedgerEntry@1020005 : Record "Cust. Ledger Entry";
      CustomerPostingGroup@1020002 : Record "Customer Posting Group";
    BEGIN
      CustLedgerEntry.SETRANGE("Transaction No.",GLEntry."Transaction No.");

      if CustLedgerEntry.FINDSET then
        repeat
          CustomerPostingGroup.GET(CustLedgerEntry."Customer Posting Group");
          if CustomerPostingGroup."Receivables Account" = GLEntry."G/L Account No." then begin
            if CustLedgerEntry."Document Type" in [CustLedgerEntry."Document Type"::Payment,
                                                   CustLedgerEntry."Document Type"::Refund]
            then begin
              FindAppliedCustomerReceipts(AppliedCustLedgerEntry,CustLedgerEntry."Entry No.");
              if AppliedCustLedgerEntry.FINDSET then
                repeat
                  CreateReceipt(TempXMLBuffer,AppliedCustLedgerEntry,IsAuxiliary);
                until AppliedCustLedgerEntry.NEXT = 0;
            end else
              CreateReceipt(TempXMLBuffer,CustLedgerEntry,IsAuxiliary);
          end;
        until CustLedgerEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE FindAppliedVendorReceipts@1020015(VAR AppliedVendorLedgerEntry@1020005 : Record "Vendor Ledger Entry";EntryNo@1020000 : Integer);
    VAR
      DetailedVendorLedgEntry1@1020003 : Record "Detailed Vendor Ledg. Entry";
      DetailedVendorLedgEntry2@1020002 : Record "Detailed Vendor Ledg. Entry";
      VendorLedgerEntry@1020001 : Record "Vendor Ledger Entry";
    BEGIN
      with AppliedVendorLedgerEntry do begin
        RESET;

        VendorLedgerEntry.GET(EntryNo);

        DetailedVendorLedgEntry1.SETCURRENTKEY("Vendor Ledger Entry No.");
        DetailedVendorLedgEntry1.SETRANGE("Vendor Ledger Entry No.",VendorLedgerEntry."Entry No.");
        DetailedVendorLedgEntry1.SETRANGE(Unapplied,false);
        if DetailedVendorLedgEntry1.FIND('-') then
          repeat
            if DetailedVendorLedgEntry1."Vendor Ledger Entry No." =
               DetailedVendorLedgEntry1."Applied Vend. Ledger Entry No."
            then begin
              DetailedVendorLedgEntry2.INIT;
              DetailedVendorLedgEntry2.SETCURRENTKEY("Applied Vend. Ledger Entry No.","Entry Type");
              DetailedVendorLedgEntry2.SETRANGE(
                "Applied Vend. Ledger Entry No.",DetailedVendorLedgEntry1."Applied Vend. Ledger Entry No.");
              DetailedVendorLedgEntry2.SETRANGE("Entry Type",DetailedVendorLedgEntry2."Entry Type"::Application);
              DetailedVendorLedgEntry2.SETRANGE(Unapplied,false);
              if DetailedVendorLedgEntry2.FIND('-') then
                repeat
                  if DetailedVendorLedgEntry2."Vendor Ledger Entry No." <> DetailedVendorLedgEntry2."Applied Vend. Ledger Entry No."
                  then begin
                    SETCURRENTKEY("Entry No.");
                    SETRANGE("Entry No.",DetailedVendorLedgEntry2."Vendor Ledger Entry No.");
                    if FIND('-') then
                      MARK(true);
                  end;
                until DetailedVendorLedgEntry2.NEXT = 0;
            end else begin
              SETCURRENTKEY("Entry No.");
              SETRANGE("Entry No.",DetailedVendorLedgEntry1."Applied Vend. Ledger Entry No.");
              if FIND('-') then
                MARK(true);
            end;
          until DetailedVendorLedgEntry1.NEXT = 0;

        SETCURRENTKEY("Entry No.");
        SETRANGE("Entry No.");

        if VendorLedgerEntry."Closed by Entry No." <> 0 then begin
          "Entry No." := VendorLedgerEntry."Closed by Entry No.";
          MARK(true);
        end;

        SETCURRENTKEY("Closed by Entry No.");
        SETRANGE("Closed by Entry No.",VendorLedgerEntry."Entry No.");
        if FIND('-') then
          repeat
            MARK(true);
          until NEXT = 0;

        SETCURRENTKEY("Entry No.");
        SETRANGE("Closed by Entry No.");
        MARKEDONLY(true);
      end;
    END;

    LOCAL PROCEDURE FindAppliedCustomerReceipts@1020033(VAR AppliedCustLedgerEntry@1020005 : Record "Cust. Ledger Entry";EntryNo@1020000 : Integer);
    VAR
      DetailedCustLedgEntry1@1020003 : Record "Detailed Cust. Ledg. Entry";
      DetailedCustLedgEntry2@1020002 : Record "Detailed Cust. Ledg. Entry";
      CustLedgerEntry@1020001 : Record "Cust. Ledger Entry";
    BEGIN
      with AppliedCustLedgerEntry do begin
        RESET;

        CustLedgerEntry.GET(EntryNo);

        DetailedCustLedgEntry1.SETCURRENTKEY("Cust. Ledger Entry No.");
        DetailedCustLedgEntry1.SETRANGE("Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
        DetailedCustLedgEntry1.SETRANGE(Unapplied,false);
        if DetailedCustLedgEntry1.FIND('-') then
          repeat
            if DetailedCustLedgEntry1."Cust. Ledger Entry No." = DetailedCustLedgEntry1."Applied Cust. Ledger Entry No." then begin
              DetailedCustLedgEntry2.INIT;
              DetailedCustLedgEntry2.SETCURRENTKEY("Applied Cust. Ledger Entry No.","Entry Type");
              DetailedCustLedgEntry2.SETRANGE(
                "Applied Cust. Ledger Entry No.",DetailedCustLedgEntry1."Applied Cust. Ledger Entry No.");
              DetailedCustLedgEntry2.SETRANGE("Entry Type",DetailedCustLedgEntry2."Entry Type"::Application);
              DetailedCustLedgEntry2.SETRANGE(Unapplied,false);
              if DetailedCustLedgEntry2.FIND('-') then
                repeat
                  if DetailedCustLedgEntry2."Cust. Ledger Entry No." <> DetailedCustLedgEntry2."Applied Cust. Ledger Entry No."
                  then begin
                    SETCURRENTKEY("Entry No.");
                    SETRANGE("Entry No.",DetailedCustLedgEntry2."Cust. Ledger Entry No.");
                    if FIND('-') then
                      MARK(true);
                  end;
                until DetailedCustLedgEntry2.NEXT = 0;
            end else begin
              SETCURRENTKEY("Entry No.");
              SETRANGE("Entry No.",DetailedCustLedgEntry1."Applied Cust. Ledger Entry No.");
              if FIND('-') then
                MARK(true);
            end;
          until DetailedCustLedgEntry1.NEXT = 0;

        SETCURRENTKEY("Entry No.");
        SETRANGE("Entry No.");

        if CustLedgerEntry."Closed by Entry No." <> 0 then begin
          "Entry No." := CustLedgerEntry."Closed by Entry No.";
          MARK(true);
        end;

        SETCURRENTKEY("Closed by Entry No.");
        SETRANGE("Closed by Entry No.",CustLedgerEntry."Entry No.");
        if FIND('-') then
          repeat
            MARK(true);
          until NEXT = 0;

        SETCURRENTKEY("Entry No.");
        SETRANGE("Closed by Entry No.");
        MARKEDONLY(true);
      end;
    END;

    LOCAL PROCEDURE CreateReceipt@1020010(VAR TempXMLBuffer@1020000 : Record "XML Buffer";LedgerEntry@1020014 : Variant;IsAuxiliary@1020009 : Boolean);
    VAR
      SourceCodeSetup@1020002 : Record "Source Code Setup";
      CompanyInformation@1020007 : Record "Company Information";
      PaymentMethod@1020005 : Record "Payment Method";
      LedgerEntryRecordRef@1020001 : RecordRef;
      AmountFieldRef@1020015 : FieldRef;
      CountryRegion@1020016 : Code[10];
      DocumentNo@1020017 : Code[20];
      RFCNo@1020018 : Code[13];
      CurrencyCode@1020020 : Code[10];
      PaymentMethodCode@1020004 : Code[10];
      UUIDCFDI@1020008 : Text;
      VATRegistrationNo@1020019 : Text[20];
      CustVendName@1020022 : Text;
      Amount@1020003 : Decimal;
      AdjustedCurrencyFactor@1020021 : Decimal;
    BEGIN
      SourceCodeSetup.GET;
      CompanyInformation.GET;

      LedgerEntryRecordRef.GETTABLE(LedgerEntry);
      FindCustVendDetails(LedgerEntryRecordRef,CountryRegion,RFCNo,VATRegistrationNo,CustVendName);
      AmountFieldRef := LedgerEntryRecordRef.FIELD(13);
      AmountFieldRef.CALCFIELD;
      Amount := AmountFieldRef.VALUE;
      CurrencyCode := LedgerEntryRecordRef.FIELD(11).VALUE;
      AdjustedCurrencyFactor := LedgerEntryRecordRef.FIELD(73).VALUE;
      PaymentMethodCode := LedgerEntryRecordRef.FIELD(172).VALUE;

      DocumentNo := LedgerEntryRecordRef.FIELD(6).VALUE;
      if (CountryRegion = CompanyInformation."Country/Region Code") or (CountryRegion = '') then begin
        UUIDCFDI := FindUUIDCFDI(LedgerEntryRecordRef);

        if UUIDCFDI <> '' then begin
          if IsAuxiliary then
            TempXMLBuffer.AddGroupElement('ComprNal')
          else
            TempXMLBuffer.AddGroupElement('CompNal');
          TempXMLBuffer.AddAttribute('UUID_CFDI',UUIDCFDI);
        end else begin
          if IsAuxiliary then
            TempXMLBuffer.AddGroupElement('ComprNalOtr')
          else
            TempXMLBuffer.AddGroupElement('CompNalOtr');
          TempErrorMessage.LogIfInvalidCharacters(LedgerEntryRecordRef,6,TempErrorMessage."Message Type"::Warning,'0123456789');
          DocumentNo := DELCHR(DocumentNo,'=',DELCHR(DocumentNo,'=','0123456789'));
          TempXMLBuffer.AddAttribute('CFD_CBB_NumFol',DocumentNo);
        end;
        TempXMLBuffer.AddAttribute('RFC',RFCNo);
      end else begin
        if IsAuxiliary then
          TempXMLBuffer.AddGroupElement('ComprExt')
        else
          TempXMLBuffer.AddGroupElement('CompExt');
        TempXMLBuffer.AddAttribute('NumFactExt',DocumentNo);
        TempXMLBuffer.AddAttribute('TaxID',VATRegistrationNo);
      end;

      if IsAuxiliary and PaymentMethod.GET(PaymentMethodCode) then begin
        TempErrorMessage.LogIfEmpty(
          PaymentMethod,PaymentMethod.FIELDNO("SAT Payment Method Code"),TempErrorMessage."Message Type"::Error);
        TempXMLBuffer.AddAttribute('MetPagoAux',PaymentMethod."SAT Payment Method Code");
      end;

      if LedgerEntryRecordRef.NUMBER = DATABASE::"Vendor Ledger Entry" then
        Amount := -Amount;
      TempXMLBuffer.AddAttribute('MontoTotal',FormatDecimal(Amount));
      if CurrencyCode <> '' then begin
        TempXMLBuffer.AddAttribute('Moneda',CurrencyCode);
        TempXMLBuffer.AddAttribute('TipCamb',FormatDecimal(1 / AdjustedCurrencyFactor));
      end;
      TempXMLBuffer.GetParent;
    END;

    LOCAL PROCEDURE CreateTransfers@1020031(VAR TempXMLBuffer@1020003 : TEMPORARY Record "XML Buffer";GLEntry@1020002 : Record "G/L Entry");
    VAR
      BankAccountLedgerEntry@1020004 : Record "Bank Account Ledger Entry";
      CheckLedgerEntry@1020005 : Record "Check Ledger Entry";
      BankAccountPostingGroup@1020000 : Record "Bank Account Posting Group";
      PaymentHandled@1020006 : Boolean;
    BEGIN
      BankAccountLedgerEntry.SETCURRENTKEY("Transaction No.");
      CheckLedgerEntry.SETCURRENTKEY("Bank Account Ledger Entry No.");

      BankAccountLedgerEntry.SETRANGE("Transaction No.",GLEntry."Transaction No.");
      BankAccountLedgerEntry.SETFILTER("Credit Amount",'>0');
      if BankAccountLedgerEntry.FINDSET then
        repeat
          BankAccountPostingGroup.GET(BankAccountLedgerEntry."Bank Acc. Posting Group");
          if BankAccountPostingGroup."G/L Bank Account No." = GLEntry."G/L Account No." then begin
            CheckLedgerEntry.SETRANGE("Bank Account Ledger Entry No.",BankAccountLedgerEntry."Entry No.");
            if CheckLedgerEntry.FINDSET then
              repeat
                PaymentHandled := CreateChequeNode(TempXMLBuffer,CheckLedgerEntry) or PaymentHandled;
              until CheckLedgerEntry.NEXT = 0
            else
              PaymentHandled := CreateTransferenciaNode(TempXMLBuffer,BankAccountLedgerEntry) or PaymentHandled
          end else
            PaymentHandled := true;
        until BankAccountLedgerEntry.NEXT = 0;

      with GLEntry do
        if (not PaymentHandled) and
           ("Credit Amount" > 0) and
           ("Document Type" = "Document Type"::Payment)
        then begin
          CreateOtrMetodoPagoNode(TempXMLBuffer,DATABASE::"Cust. Ledger Entry","Transaction No.");
          CreateOtrMetodoPagoNode(TempXMLBuffer,DATABASE::"Vendor Ledger Entry","Transaction No.");
        end
    END;

    LOCAL PROCEDURE CreateChequeNode@1020007(VAR TempXMLBuffer@1020005 : TEMPORARY Record "XML Buffer";CheckLedgerEntry@1020001 : Record "Check Ledger Entry") : Boolean;
    VAR
      BankAccountLedgerEntry@1020012 : Record "Bank Account Ledger Entry";
      Vendor@1020003 : Record Vendor;
      Customer@1020008 : Record Customer;
      BankAccount@1020007 : Record "Bank Account";
      RecipientBankAccount@1020002 : Record "Bank Account";
      CompanyInformation@1020011 : Record "Company Information";
      Benef@1020009 : Text[300];
      RFC@1020010 : Code[13];
      ExchangeRate@1020014 : Decimal;
    BEGIN
      BankAccountLedgerEntry.GET(CheckLedgerEntry."Bank Account Ledger Entry No.");
      BankAccount.GET(CheckLedgerEntry."Bank Account No.");

      TempErrorMessage.LogIfEmpty(CheckLedgerEntry,CheckLedgerEntry.FIELDNO("Check No."),TempErrorMessage."Message Type"::Warning);
      TempErrorMessage.LogIfEmpty(CheckLedgerEntry,CheckLedgerEntry.FIELDNO("Check Date"),TempErrorMessage."Message Type"::Warning);
      TempErrorMessage.LogIfEmpty(BankAccount,BankAccount.FIELDNO("Bank Code"),TempErrorMessage."Message Type"::Error);
      TempErrorMessage.LogIfEmpty(BankAccount,BankAccount.FIELDNO("Bank Account No."),TempErrorMessage."Message Type"::Error);
      TempErrorMessage.LogIfEmpty(BankAccount,BankAccount.FIELDNO(Name),TempErrorMessage."Message Type"::Error);

      case CheckLedgerEntry."Bal. Account Type" of
        CheckLedgerEntry."Bal. Account Type"::Vendor:
          begin
            Vendor.GET(CheckLedgerEntry."Bal. Account No.");
            TempErrorMessage.LogIfEmpty(Vendor,Vendor.FIELDNO(Name),TempErrorMessage."Message Type"::Error);
            TempErrorMessage.LogIfEmpty(Vendor,Vendor.FIELDNO("RFC No."),TempErrorMessage."Message Type"::Error);
            Benef := Vendor.Name;
            RFC := Vendor."RFC No.";
          end;
        CheckLedgerEntry."Bal. Account Type"::Customer:
          begin
            Customer.GET(CheckLedgerEntry."Bal. Account No.");
            TempErrorMessage.LogIfEmpty(Customer,Customer.FIELDNO(Name),TempErrorMessage."Message Type"::Error);
            TempErrorMessage.LogIfEmpty(Customer,Customer.FIELDNO("RFC No."),TempErrorMessage."Message Type"::Error);
            Benef := Customer.Name;
            RFC := Customer."RFC No.";
          end;
        CheckLedgerEntry."Bal. Account Type"::"Bank Account":
          begin
            CompanyInformation.GET;
            RecipientBankAccount.GET(CheckLedgerEntry."Bal. Account No.");
            TempErrorMessage.LogIfEmpty(
              RecipientBankAccount,RecipientBankAccount.FIELDNO(Name),TempErrorMessage."Message Type"::Error);
            TempErrorMessage.LogIfEmpty(
              CompanyInformation,CompanyInformation.FIELDNO("RFC No."),TempErrorMessage."Message Type"::Error);
            Benef := RecipientBankAccount.Name;
            RFC := CompanyInformation."RFC No.";
          end;
      end;

      TempXMLBuffer.AddGroupElement('Cheque');
      TempXMLBuffer.AddAttribute('Num',CheckLedgerEntry."Check No.");
      TempXMLBuffer.AddAttribute('BanEmisNal',BankAccount."Bank Code");
      TempXMLBuffer.AddAttribute('BanEmisExt',BankAccount.Name);
      TempXMLBuffer.AddAttribute('CtaOri',BankAccount."Bank Account No.");
      TempXMLBuffer.AddAttribute('Fecha',FORMAT(CheckLedgerEntry."Check Date",0,9));
      TempXMLBuffer.AddAttribute('Benef',Benef);
      TempXMLBuffer.AddAttribute('RFC',RFC);
      TempXMLBuffer.AddAttribute('Monto',FormatDecimal(CheckLedgerEntry.Amount));

      if BankAccountLedgerEntry."Currency Code" <> '' then begin
        ExchangeRate := CurrencyExchangeRate.ExchangeRate(CheckLedgerEntry."Posting Date",BankAccountLedgerEntry."Currency Code");
        TempXMLBuffer.AddAttribute('Moneda',BankAccountLedgerEntry."Currency Code");
        TempXMLBuffer.AddAttribute('TipCamb',FormatDecimal(1 / ExchangeRate));
      end;
      TempXMLBuffer.GetParent;

      exit(true);
    END;

    LOCAL PROCEDURE CreateTransferenciaNode@1020006(VAR TempXMLBuffer@1020002 : TEMPORARY Record "XML Buffer";BankAccountLedgerEntry@1020001 : Record "Bank Account Ledger Entry") : Boolean;
    VAR
      CustLedgerEntry@1020005 : Record "Cust. Ledger Entry";
      VendorLedgerEntry@1020006 : Record "Vendor Ledger Entry";
      Customer@1020008 : Record Customer;
      Vendor@1020010 : Record Vendor;
      BankAccount@1020011 : Record "Bank Account";
      CustomerBankAccount@1020012 : Record "Customer Bank Account";
      VendorBankAccount@1020021 : Record "Vendor Bank Account";
      CompanyInformation@1020022 : Record "Company Information";
      RecipientBankAccount@1020023 : Record "Bank Account";
      CtaDest@1020017 : Text[50];
      BancoDestNal@1020016 : Code[3];
      BancoDestExt@1020024 : Text;
      Benef@1020015 : Text[300];
      RFC@1020014 : Code[13];
      ExchangeRate@1020025 : Decimal;
    BEGIN
      case BankAccountLedgerEntry."Bal. Account Type" of
        BankAccountLedgerEntry."Bal. Account Type"::Customer:
          begin
            CustLedgerEntry.SETCURRENTKEY("Transaction No.");
            CustLedgerEntry.SETRANGE("Transaction No.",BankAccountLedgerEntry."Transaction No.");
            CustLedgerEntry.SETFILTER("Recipient Bank Account",'<>%1','');
            if not CustLedgerEntry.FINDFIRST then
              exit(false);
            Customer.GET(CustLedgerEntry."Customer No.");
            CustomerBankAccount.GET(Customer."No.",CustLedgerEntry."Recipient Bank Account");

            TempErrorMessage.LogIfEmpty(
              CustomerBankAccount,CustomerBankAccount.FIELDNO("Bank Account No."),TempErrorMessage."Message Type"::Error);
            TempErrorMessage.LogIfEmpty(
              CustomerBankAccount,CustomerBankAccount.FIELDNO("Bank Code"),TempErrorMessage."Message Type"::Error);
            TempErrorMessage.LogIfEmpty(CustomerBankAccount,CustomerBankAccount.FIELDNO(Name),TempErrorMessage."Message Type"::Error);
            TempErrorMessage.LogIfEmpty(Customer,Customer.FIELDNO(Name),TempErrorMessage."Message Type"::Error);
            TempErrorMessage.LogIfEmpty(Customer,Customer.FIELDNO("RFC No."),TempErrorMessage."Message Type"::Error);

            CtaDest := CustomerBankAccount."Bank Account No.";
            BancoDestNal := CustomerBankAccount."Bank Code";
            BancoDestExt := CustomerBankAccount.Name;
            Benef := Customer.Name;
            RFC := Customer."RFC No.";
          end;
        BankAccountLedgerEntry."Bal. Account Type"::Vendor:
          begin
            VendorLedgerEntry.SETCURRENTKEY("Transaction No.");
            VendorLedgerEntry.SETRANGE("Transaction No.",BankAccountLedgerEntry."Transaction No.");
            VendorLedgerEntry.SETFILTER("Recipient Bank Account",'<>%1','');
            if not VendorLedgerEntry.FINDFIRST then
              exit(false);
            Vendor.GET(VendorLedgerEntry."Vendor No.");
            VendorBankAccount.GET(Vendor."No.",VendorLedgerEntry."Recipient Bank Account");

            TempErrorMessage.LogIfEmpty(
              VendorBankAccount,VendorBankAccount.FIELDNO("Bank Account No."),TempErrorMessage."Message Type"::Error);
            TempErrorMessage.LogIfEmpty(
              VendorBankAccount,VendorBankAccount.FIELDNO("Bank Code"),TempErrorMessage."Message Type"::Error);
            TempErrorMessage.LogIfEmpty(VendorBankAccount,VendorBankAccount.FIELDNO(Name),TempErrorMessage."Message Type"::Error);
            TempErrorMessage.LogIfEmpty(Vendor,Vendor.FIELDNO(Name),TempErrorMessage."Message Type"::Error);
            TempErrorMessage.LogIfEmpty(Vendor,Vendor.FIELDNO("RFC No."),TempErrorMessage."Message Type"::Error);

            CtaDest := VendorBankAccount."Bank Account No.";
            BancoDestNal := VendorBankAccount."Bank Code";
            BancoDestExt := VendorBankAccount.Name;
            Benef := Vendor.Name;
            RFC := Vendor."RFC No.";
          end;
        BankAccountLedgerEntry."Bal. Account Type"::"Bank Account":
          begin
            if not RecipientBankAccount.GET(BankAccountLedgerEntry."Bal. Account No.") then
              exit(false);
            CompanyInformation.GET;

            TempErrorMessage.LogIfEmpty(
              RecipientBankAccount,RecipientBankAccount.FIELDNO("Bank Account No."),TempErrorMessage."Message Type"::Error);
            TempErrorMessage.LogIfEmpty(
              RecipientBankAccount,RecipientBankAccount.FIELDNO("Bank Code"),TempErrorMessage."Message Type"::Error);
            TempErrorMessage.LogIfEmpty(
              RecipientBankAccount,RecipientBankAccount.FIELDNO(Name),TempErrorMessage."Message Type"::Error);
            TempErrorMessage.LogIfEmpty(CompanyInformation,CompanyInformation.FIELDNO(Name),TempErrorMessage."Message Type"::Error);
            TempErrorMessage.LogIfEmpty(
              CompanyInformation,CompanyInformation.FIELDNO("RFC No."),TempErrorMessage."Message Type"::Error);

            CtaDest := RecipientBankAccount."Bank Account No.";
            BancoDestNal := RecipientBankAccount."Bank Code";
            BancoDestExt := RecipientBankAccount.Name;
            Benef := CompanyInformation.Name;
            RFC := CompanyInformation."RFC No.";
          end;
        else
          exit(false);
      end;

      BankAccount.GET(BankAccountLedgerEntry."Bank Account No.");

      TempErrorMessage.LogIfEmpty(BankAccount,BankAccount.FIELDNO("Bank Account No."),TempErrorMessage."Message Type"::Error);
      TempErrorMessage.LogIfEmpty(BankAccount,BankAccount.FIELDNO("Bank Code"),TempErrorMessage."Message Type"::Error);
      TempErrorMessage.LogIfEmpty(BankAccount,BankAccount.FIELDNO(Name),TempErrorMessage."Message Type"::Error);

      TempXMLBuffer.AddGroupElement('Transferencia');
      TempXMLBuffer.AddAttribute('CtaOri',BankAccount."Bank Account No.");
      TempXMLBuffer.AddAttribute('BancoOriNal',BankAccount."Bank Code");
      TempXMLBuffer.AddAttribute('BancoOriExt',BankAccount.Name);
      TempXMLBuffer.AddAttribute('CtaDest',CtaDest);
      TempXMLBuffer.AddAttribute('BancoDestNal',BancoDestNal);
      TempXMLBuffer.AddAttribute('BancoDestExt',BancoDestExt);
      TempXMLBuffer.AddAttribute('Fecha',FORMAT(BankAccountLedgerEntry."Posting Date",0,9));
      TempXMLBuffer.AddAttribute('Benef',Benef);
      TempXMLBuffer.AddAttribute('RFC',RFC);
      TempXMLBuffer.AddAttribute('Monto',FormatDecimal(BankAccountLedgerEntry."Credit Amount"));

      if BankAccountLedgerEntry."Currency Code" <> '' then begin
        ExchangeRate :=
          CurrencyExchangeRate.ExchangeRate(BankAccountLedgerEntry."Posting Date",BankAccountLedgerEntry."Currency Code");
        TempXMLBuffer.AddAttribute('Moneda',BankAccountLedgerEntry."Currency Code");
        TempXMLBuffer.AddAttribute('TipCamb',FormatDecimal(1 / ExchangeRate));
      end;
      TempXMLBuffer.GetParent;

      exit(true);
    END;

    LOCAL PROCEDURE CreateOtrMetodoPagoNode@1020021(VAR TempXMLBuffer@1020002 : Record "XML Buffer";LedgerEntryTableNo@1020012 : Integer;TransactionNo@1020001 : Integer);
    VAR
      PaymentMethod@1020008 : Record "Payment Method";
      PaymentMethodFieldRef@1020013 : FieldRef;
      LedgerEntryRecordRef@1020014 : RecordRef;
      TransactionNoFieldRef@1020024 : FieldRef;
      AmountFieldRef@1020023 : FieldRef;
      CountryRegion@1020022 : Code[10];
      RFCNo@1020020 : Code[13];
      CurrencyCode@1020019 : Code[10];
      VATRegistrationNo@1020018 : Text[20];
      Amount@1020003 : Decimal;
      AdjustedCurrencyFactor@1020017 : Decimal;
      Name@1020016 : Text;
      PostingDate@1020015 : Date;
    BEGIN
      LedgerEntryRecordRef.OPEN(LedgerEntryTableNo);
      TransactionNoFieldRef := LedgerEntryRecordRef.FIELD(53);
      TransactionNoFieldRef.SETRANGE(TransactionNo);
      PaymentMethodFieldRef := LedgerEntryRecordRef.FIELD(172);
      PaymentMethodFieldRef.SETFILTER('<> %1','');
      if LedgerEntryRecordRef.FINDSET then
        repeat
          PaymentMethod.GET(PaymentMethodFieldRef.VALUE);

          TempErrorMessage.LogIfEmpty(
            PaymentMethod,PaymentMethod.FIELDNO("SAT Payment Method Code"),TempErrorMessage."Message Type"::Error);

          FindCustVendDetails(LedgerEntryRecordRef,CountryRegion,RFCNo,VATRegistrationNo,Name);
          AmountFieldRef := LedgerEntryRecordRef.FIELD(13);
          AmountFieldRef.CALCFIELD;
          Amount := AmountFieldRef.VALUE;
          CurrencyCode := LedgerEntryRecordRef.FIELD(11).VALUE;
          AdjustedCurrencyFactor := LedgerEntryRecordRef.FIELD(73).VALUE;
          PostingDate := LedgerEntryRecordRef.FIELD(4).VALUE;

          TempXMLBuffer.AddGroupElement('OtrMetodoPago');
          TempXMLBuffer.AddAttribute('MetPagoPol',PaymentMethod."SAT Payment Method Code");
          TempXMLBuffer.AddAttribute('Fecha',FORMAT(PostingDate,0,9));
          TempXMLBuffer.AddAttribute('Benef',Name);
          TempXMLBuffer.AddAttribute('RFC',RFCNo);

          TempXMLBuffer.AddAttribute('Monto',FormatDecimal(ABS(Amount)));
          if CurrencyCode <> '' then begin
            TempXMLBuffer.AddAttribute('Moneda',CurrencyCode);
            TempXMLBuffer.AddAttribute('TipCamb',FormatDecimal(1 / AdjustedCurrencyFactor));
          end;
          TempXMLBuffer.GetParent;
        until LedgerEntryRecordRef.NEXT = 0;
    END;

    LOCAL PROCEDURE FindUUIDCFDI@1020014(CustVendLedgerEntry@1020000 : Variant) : Text;
    VAR
      SalesInvoiceHeader@1020008 : Record "Sales Invoice Header";
      SalesCrMemoHeader@1020007 : Record "Sales Cr.Memo Header";
      ServiceInvoiceHeader@1020006 : Record "Service Invoice Header";
      ServiceCrMemoHeader@1020005 : Record "Service Cr.Memo Header";
      PurchInvHeader@1020012 : Record "Purch. Inv. Header";
      PurchCrMemoHdr@1020013 : Record "Purch. Cr. Memo Hdr.";
      SourceCodeSetup@1020009 : Record "Source Code Setup";
      RecordRef@1020001 : RecordRef;
      DocumentType@1020003 : '" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund';
      DocumentNo@1020010 : Code[20];
      SourceCode@1020011 : Code[10];
    BEGIN
      SourceCodeSetup.GET;
      RecordRef.GETTABLE(CustVendLedgerEntry);
      DocumentType := RecordRef.FIELD(5).VALUE;
      DocumentNo := RecordRef.FIELD(6).VALUE;
      SourceCode := RecordRef.FIELD(28).VALUE;
      case SourceCode of
        SourceCodeSetup.Sales:
          case DocumentType of
            DocumentType::Invoice:
              if SalesInvoiceHeader.GET(DocumentNo) then
                exit(SalesInvoiceHeader."Fiscal Invoice Number PAC");
            DocumentType::"Credit Memo":
              if SalesCrMemoHeader.GET(DocumentNo) then
                exit(SalesCrMemoHeader."Fiscal Invoice Number PAC");
          end;
        SourceCodeSetup."Service Management":
          case DocumentType of
            DocumentType::Invoice:
              if ServiceInvoiceHeader.GET(DocumentNo) then
                exit(ServiceInvoiceHeader."Fiscal Invoice Number PAC");
            DocumentType::"Credit Memo":
              if ServiceCrMemoHeader.GET(DocumentNo) then
                exit(ServiceCrMemoHeader."Fiscal Invoice Number PAC");
          end;
        SourceCodeSetup.Purchases:
          case DocumentType of
            DocumentType::Invoice:
              if PurchInvHeader.GET(DocumentNo) then
                exit(PurchInvHeader."Fiscal Invoice Number PAC");
            DocumentType::"Credit Memo":
              if PurchCrMemoHdr.GET(DocumentNo) then
                exit(PurchCrMemoHdr."Fiscal Invoice Number PAC");
          end;
      end;
    END;

    LOCAL PROCEDURE FindCustVendDetails@1020040(LedgerEntryRecordRef@1020000 : RecordRef;VAR CountryRegion@1020004 : Code[10];VAR RFCNo@1020002 : Code[13];VAR VATRegistrationNo@1020001 : Text[20];VAR Name@1020007 : Text);
    VAR
      Customer@1020005 : Record Customer;
      Vendor@1020006 : Record Vendor;
      CustVendNo@1020003 : Code[20];
    BEGIN
      CustVendNo := LedgerEntryRecordRef.FIELD(3).VALUE;
      if LedgerEntryRecordRef.NUMBER = DATABASE::"Cust. Ledger Entry" then begin
        Customer.GET(CustVendNo);

        TempErrorMessage.LogIfEmpty(Customer,Customer.FIELDNO(Name),TempErrorMessage."Message Type"::Error);
        TempErrorMessage.LogIfEmpty(Customer,Customer.FIELDNO("VAT Registration No."),TempErrorMessage."Message Type"::Error);
        TempErrorMessage.LogIfEmpty(Customer,Customer.FIELDNO("RFC No."),TempErrorMessage."Message Type"::Error);

        CountryRegion := Customer."Country/Region Code";
        RFCNo := Customer."RFC No.";
        VATRegistrationNo := Customer."VAT Registration No.";
        Name := Customer.Name;
      end else begin
        Vendor.GET(CustVendNo);

        TempErrorMessage.LogIfEmpty(Vendor,Vendor.FIELDNO(Name),TempErrorMessage."Message Type"::Error);
        TempErrorMessage.LogIfEmpty(Vendor,Vendor.FIELDNO("VAT Registration No."),TempErrorMessage."Message Type"::Error);
        TempErrorMessage.LogIfEmpty(Vendor,Vendor.FIELDNO("RFC No."),TempErrorMessage."Message Type"::Error);

        CountryRegion := Vendor."Country/Region Code";
        RFCNo := Vendor."RFC No.";
        VATRegistrationNo := Vendor."VAT Registration No.";
        Name := Vendor.Name;
      end;
    END;

    LOCAL PROCEDURE SaveXMLToClient@1020016(VAR TempXMLBuffer@1020001 : TEMPORARY Record "XML Buffer";Year@1020002 : Integer;Month@1020003 : Integer;Type@1020004 : Text) : Boolean;
    VAR
      CompanyInformation@1020006 : Record "Company Information";
      FileManagement@1020007 : Codeunit "File Management";
      TempXMLFilePath@1020000 : Text;
      ClientFileName@1020005 : Text;
      ZipFilePath@1020008 : Text;
    BEGIN
      if TestFileName <> '' then
        TempXMLBuffer.Save(TestFileName)
      else begin
        CompanyInformation.GET;
        ClientFileName := CompanyInformation."RFC No." + FORMAT(Year) +
          FORMAT(Month,2,'<Integer,2><Filler Character,0>') + Type;
        TempXMLFilePath := FileManagement.ServerTempFileName('xml');
        TempXMLBuffer.Save(TempXMLFilePath);
        ZipFilePath := FileManagement.CreateZipArchiveObject;
        FileManagement.AddFileToZipArchive(TempXMLFilePath,ClientFileName + '.xml');
        FileManagement.CloseZipArchive;
        exit(
          FileManagement.DownloadHandler(
            ZipFilePath,'','',FileManagement.GetToFilterText('',TempXMLFilePath),ClientFileName + '.zip'));
      end;
    END;

    LOCAL PROCEDURE FormatDecimal@1020017(Amount@1020000 : Decimal) : Text;
    BEGIN
      exit(FORMAT(Amount,0,'<Precision,2:2><Standard Format,9>'));
    END;

    [External]
    PROCEDURE InitializeRequest@1020019(FileName@1020000 : Text);
    BEGIN
      TestFileName := FileName;
    END;

    BEGIN
    END.
  }
}

