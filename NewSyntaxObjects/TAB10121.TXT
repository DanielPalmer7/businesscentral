OBJECT Table 10121 Bank Rec. Line
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160236.240T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               if "Document No." = '' then
                 GenerateDocNo;
               UpdateLedgers;
             END;

    OnModify=BEGIN
               UpdateLedgers;
             END;

    OnDelete=VAR
               BankRecSubLine@1020000 : Record "Bank Rec. Sub-line";
             BEGIN
               BankRecCommentLine.SETRANGE("Table Name",BankRecCommentLine."Table Name"::"Bank Rec.");
               BankRecCommentLine.SETRANGE("Bank Account No.","Bank Account No.");
               BankRecCommentLine.SETRANGE("No.","Statement No.");
               BankRecCommentLine.SETRANGE("Line No.","Line No.");
               BankRecCommentLine.DELETEALL;
               BankRecPost.UpdateLedgers(Rec,SetStatus::Open);

               BankRecSubLine.SETRANGE("Bank Account No.","Bank Account No.");
               BankRecSubLine.SETRANGE("Statement No.","Statement No.");
               BankRecSubLine.SETRANGE("Bank Rec. Line No.","Line No.");
               BankRecSubLine.DELETEALL;
             END;

    OnRename=BEGIN
               ERROR(Text003,TABLECAPTION);
             END;

    CaptionML=ENU=Bank Rec. Line;
    LookupPageID="Bank Rec. Lines";
    DrillDownPageID="Bank Rec. Lines";
  }
  FIELDS
  {
    { 1   ;   ;Bank Account No.    ;Code20        ;TableRelation="Bank Account";
                                                   CaptionML=ENU=Bank Account No. }
    { 2   ;   ;Statement No.       ;Code20        ;TableRelation="Bank Rec. Header"."Statement No." WHERE ("Bank Account No."=FIELD("Bank Account No."));
                                                   CaptionML=ENU=Statement No. }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 4   ;   ;Record Type         ;Option        ;CaptionML=ENU=Record Type;
                                                   OptionCaptionML=ENU=Check,Deposit,Adjustment;
                                                   OptionString=Check,Deposit,Adjustment }
    { 5   ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 6   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund }
    { 7   ;   ;Document No.        ;Code20        ;OnValidate=BEGIN
                                                                if "Document No." = '' then
                                                                  GenerateDocNo;
                                                              END;

                                                   CaptionML=ENU=Document No. }
    { 8   ;   ;Account Type        ;Option        ;CaptionML=ENU=Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset;
                                                   OptionString="G/L Account",Customer,Vendor,"Bank Account","Fixed Asset" }
    { 9   ;   ;Account No.         ;Code20        ;TableRelation=IF ("Account Type"=CONST("G/L Account")) "G/L Account"
                                                                 ELSE IF ("Account Type"=CONST(Customer)) Customer
                                                                 ELSE IF ("Account Type"=CONST(Vendor)) Vendor
                                                                 ELSE IF ("Account Type"=CONST("Bank Account")) "Bank Account"
                                                                 ELSE IF ("Account Type"=CONST("Fixed Asset")) "Fixed Asset";
                                                   OnValidate=BEGIN
                                                                if "Account No." = '' then begin
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    0,'',
                                                                    0,'',
                                                                    0,'');
                                                                  exit;
                                                                end;

                                                                case "Account Type" of
                                                                  "Account Type"::"G/L Account":
                                                                    begin
                                                                      GLAcc.GET("Account No.");
                                                                      CheckGLAcc;
                                                                      ReplaceInfo := "Bal. Account No." = '';
                                                                      if ReplaceInfo then
                                                                        Description := GLAcc.Name;

                                                                      if "Bal. Account No." = '' then
                                                                        "Currency Code" := '';
                                                                    end;
                                                                  "Account Type"::Customer:
                                                                    begin
                                                                      Cust.GET("Account No.");
                                                                      if Cust."Privacy Blocked" then
                                                                        ERROR(STRSUBSTNO(PrivacyBlockedErr,"Account Type"));
                                                                      if Cust.Blocked in [Cust.Blocked::All] then
                                                                        ERROR(STRSUBSTNO(Text1020100,"Account Type",Cust.Blocked));
                                                                      Description := Cust.Name;
                                                                      if SetCurrencyCode("Bal. Account Type","Bal. Account No.") then
                                                                        Cust.TESTFIELD("Currency Code","Currency Code")
                                                                      else
                                                                        "Currency Code" := Cust."Currency Code";
                                                                      if Cust."Bill-to Customer No." <> '' then begin
                                                                        Ok := CONFIRM(Text014,false,Cust.TABLECAPTION,Cust."No.",Cust.FIELDCAPTION("Bill-to Customer No."),
                                                                            Cust."Bill-to Customer No.");
                                                                        if not Ok then
                                                                          ERROR('');
                                                                      end;
                                                                    end;
                                                                  "Account Type"::Vendor:
                                                                    begin
                                                                      Vend.GET("Account No.");
                                                                      Vend.TESTFIELD("Privacy Blocked",false);
                                                                      Vend.TESTFIELD(Blocked,Vend.Blocked::" ");
                                                                      Description := Vend.Name;
                                                                      if SetCurrencyCode("Bal. Account Type","Bal. Account No.") then
                                                                        Vend.TESTFIELD("Currency Code","Currency Code")
                                                                      else
                                                                        "Currency Code" := Vend."Currency Code";
                                                                      if Vend."Pay-to Vendor No." <> '' then begin
                                                                        Ok := CONFIRM(Text014,false,Vend.TABLECAPTION,Vend."No.",Vend.FIELDCAPTION("Pay-to Vendor No."),
                                                                            Vend."Pay-to Vendor No.");
                                                                        if not Ok then
                                                                          ERROR('');
                                                                      end;
                                                                    end;
                                                                  "Account Type"::"Bank Account":
                                                                    begin
                                                                      BankAcc.GET("Account No.");
                                                                      BankAcc.TESTFIELD(Blocked,false);
                                                                      ReplaceInfo := "Bal. Account No." = '';
                                                                      if ReplaceInfo then
                                                                        Description := BankAcc.Name;

                                                                      if BankAcc."Currency Code" = '' then begin
                                                                        if "Bal. Account No." = '' then
                                                                          "Currency Code" := '';
                                                                      end else
                                                                        if SetCurrencyCode("Bal. Account Type","Bal. Account No.") then
                                                                          BankAcc.TESTFIELD("Currency Code","Currency Code")
                                                                        else
                                                                          "Currency Code" := BankAcc."Currency Code";
                                                                    end;
                                                                  "Account Type"::"Fixed Asset":
                                                                    begin
                                                                      FA.GET("Account No.");
                                                                      FA.TESTFIELD(Blocked,false);
                                                                      FA.TESTFIELD(Inactive,false);
                                                                      FA.TESTFIELD("Budgeted Asset",false);
                                                                      Description := FA.Description;
                                                                    end;
                                                                end;

                                                                VALIDATE("Currency Code");
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  0,'',
                                                                  0,'',
                                                                  0,'');
                                                              END;

                                                   CaptionML=ENU=Account No. }
    { 10  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 11  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                if Cleared and ("Record Type" = "Record Type"::Adjustment) then
                                                                  "Cleared Amount" := Amount;
                                                              END;

                                                   CaptionML=ENU=Amount }
    { 12  ;   ;Cleared             ;Boolean       ;OnValidate=BEGIN
                                                                if Cleared then
                                                                  "Cleared Amount" := Amount
                                                                else
                                                                  "Cleared Amount" := 0;
                                                              END;

                                                   CaptionML=ENU=Cleared }
    { 13  ;   ;Cleared Amount      ;Decimal       ;CaptionML=ENU=Cleared Amount }
    { 14  ;   ;Bal. Account Type   ;Option        ;CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset;
                                                   OptionString="G/L Account",Customer,Vendor,"Bank Account","Fixed Asset" }
    { 15  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF ("Bal. Account Type"=CONST("G/L Account")) "G/L Account"
                                                                 ELSE IF ("Bal. Account Type"=CONST(Customer)) Customer
                                                                 ELSE IF ("Bal. Account Type"=CONST(Vendor)) Vendor
                                                                 ELSE IF ("Bal. Account Type"=CONST("Bank Account")) "Bank Account"
                                                                 ELSE IF ("Bal. Account Type"=CONST("Fixed Asset")) "Fixed Asset";
                                                   OnValidate=BEGIN
                                                                if "Bal. Account No." = '' then begin
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    0,'',
                                                                    0,'',
                                                                    0,'');
                                                                  exit;
                                                                end;

                                                                case "Bal. Account Type" of
                                                                  "Bal. Account Type"::"G/L Account":
                                                                    begin
                                                                      GLAcc.GET("Bal. Account No.");
                                                                      CheckGLAcc;
                                                                      if "Account No." = '' then begin
                                                                        Description := GLAcc.Name;
                                                                        "Currency Code" := '';
                                                                      end;
                                                                    end;
                                                                  "Bal. Account Type"::Customer:
                                                                    begin
                                                                      Cust.GET("Bal. Account No.");
                                                                      if Cust."Privacy Blocked" then
                                                                        ERROR(STRSUBSTNO(PrivacyBlockedErr,"Account Type"));
                                                                      if Cust.Blocked in [Cust.Blocked::All] then
                                                                        ERROR(STRSUBSTNO(Text1020100,"Account Type",Cust.Blocked));
                                                                      if "Account No." = '' then
                                                                        Description := Cust.Name;

                                                                      if ("Account No." = '') or ("Account Type" = "Account Type"::"G/L Account") then
                                                                        "Currency Code" := Cust."Currency Code";
                                                                      if ("Account Type" = "Account Type"::"Bank Account") and ("Currency Code" = '') then
                                                                        "Currency Code" := Cust."Currency Code";
                                                                      if Cust."Bill-to Customer No." <> '' then begin
                                                                        Ok := CONFIRM(Text014,false,Cust.TABLECAPTION,Cust."No.",Cust.FIELDCAPTION("Bill-to Customer No."),
                                                                            Cust."Bill-to Customer No.");
                                                                        if not Ok then
                                                                          ERROR('');
                                                                      end;
                                                                    end;
                                                                  "Bal. Account Type"::Vendor:
                                                                    begin
                                                                      Vend.GET("Bal. Account No.");
                                                                      Vend.TESTFIELD("Privacy Blocked",false);
                                                                      Vend.TESTFIELD(Blocked,Vend.Blocked::" ");
                                                                      if "Account No." = '' then
                                                                        Description := Vend.Name;

                                                                      if ("Account No." = '') or ("Account Type" = "Account Type"::"G/L Account") then
                                                                        "Currency Code" := Vend."Currency Code";
                                                                      if ("Account Type" = "Account Type"::"Bank Account") and ("Currency Code" = '') then
                                                                        "Currency Code" := Vend."Currency Code";
                                                                      if Vend."Pay-to Vendor No." <> '' then begin
                                                                        Ok := CONFIRM(Text014,false,Vend.TABLECAPTION,Vend."No.",Vend.FIELDCAPTION("Pay-to Vendor No."),
                                                                            Vend."Pay-to Vendor No.");
                                                                        if not Ok then
                                                                          ERROR('');
                                                                      end;
                                                                    end;
                                                                  "Bal. Account Type"::"Bank Account":
                                                                    begin
                                                                      BankAcc.GET("Bal. Account No.");
                                                                      BankAcc.TESTFIELD(Blocked,false);
                                                                      if "Account No." = '' then begin
                                                                        Description := BankAcc.Name;
                                                                        "Currency Code" := BankAcc."Currency Code";
                                                                      end;
                                                                      if BankAcc."Currency Code" = '' then begin
                                                                        if "Account No." = '' then
                                                                          "Currency Code" := '';
                                                                      end else
                                                                        if SetCurrencyCode("Bal. Account Type","Bal. Account No.") then
                                                                          BankAcc.TESTFIELD("Currency Code","Currency Code")
                                                                        else
                                                                          "Currency Code" := BankAcc."Currency Code";
                                                                    end;
                                                                  "Bal. Account Type"::"Fixed Asset":
                                                                    begin
                                                                      FA.GET("Bal. Account No.");
                                                                      FA.TESTFIELD(Blocked,false);
                                                                      FA.TESTFIELD(Inactive,false);
                                                                      FA.TESTFIELD("Budgeted Asset",false);
                                                                      if "Account No." = '' then
                                                                        Description := FA.Description;
                                                                    end;
                                                                end;

                                                                VALIDATE("Currency Code");
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  0,'',
                                                                  0,'',
                                                                  0,'');
                                                              END;

                                                   CaptionML=ENU=Bal. Account No. }
    { 16  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                if "Currency Code" <> '' then begin
                                                                  BankRecHdr.GET("Bank Account No.","Statement No.");
                                                                  Currency.GET("Currency Code");
                                                                  "Currency Factor" := CurrExchRate.ExchangeRate(BankRecHdr."Statement Date","Currency Code");
                                                                end else
                                                                  "Currency Factor" := 0;
                                                                VALIDATE("Currency Factor");
                                                              END;

                                                   CaptionML=ENU=Currency Code;
                                                   Editable=false }
    { 17  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                if ("Currency Code" = '') and ("Currency Factor" <> 0) then
                                                                  FIELDERROR("Currency Factor",STRSUBSTNO(Text002,FIELDCAPTION("Currency Code")));
                                                              END;

                                                   CaptionML=ENU=Currency Factor }
    { 18  ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 19  ;   ;Bank Ledger Entry No.;Integer      ;TableRelation="Bank Account Ledger Entry"."Entry No.";
                                                   CaptionML=ENU=Bank Ledger Entry No. }
    { 20  ;   ;Check Ledger Entry No.;Integer     ;TableRelation="Check Ledger Entry"."Entry No.";
                                                   CaptionML=ENU=Check Ledger Entry No. }
    { 21  ;   ;Adj. Source Record ID;Option       ;CaptionML=ENU=Adj. Source Record ID;
                                                   OptionCaptionML=ENU=Check,Deposit,Adjustment;
                                                   OptionString=Check,Deposit,Adjustment }
    { 22  ;   ;Adj. Source Document No.;Code20    ;CaptionML=ENU=Adj. Source Document No. }
    { 23  ;   ;Adj. No. Series     ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Adj. No. Series }
    { 24  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 25  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 26  ;   ;Collapse Status     ;Option        ;CaptionML=ENU=Collapse Status;
                                                   OptionCaptionML=ENU=" ,Collapsed Deposit,Expanded Deposit Line";
                                                   OptionString=" ","Collapsed Deposit","Expanded Deposit Line";
                                                   Editable=false }
    { 27  ;   ;Positive            ;Boolean       ;CaptionML=ENU=Positive;
                                                   Editable=false }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Bank Account No.","Statement No.","Record Type","Line No.";
                                                   SumIndexFields=Amount;
                                                   Clustered=true }
    {    ;"Bank Account No.","Statement No.","Record Type",Cleared;
                                                   SumIndexFields=Amount,"Cleared Amount" }
    {    ;"Bank Account No.","Statement No.","Record Type",Positive;
                                                   SumIndexFields=Amount }
    {    ;"Bank Account No.","Statement No.","Posting Date","Document Type","Document No.","External Document No." }
    {    ;"Bank Account No.","Statement No.",Cleared }
    {    ;"Bank Account No.","Statement No.","Record Type","Bal. Account No.";
                                                   SumIndexFields=Amount }
    {    ;"Bank Account No.","Statement No.","Record Type","Account Type","Bal. Account Type","Bal. Account No.",Positive;
                                                   SumIndexFields=Amount }
    {    ;"Bank Account No.","Statement No.","Record Type","Account Type","Account No.",Positive;
                                                   SumIndexFields=Amount }
    {    ;"Bank Account No.","Statement No.","Record Type","External Document No." }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Ok@1020010 : Boolean;
      ReplaceInfo@1020007 : Boolean;
      SetStatus@1020015 : 'Open,Cleared,Posted';
      GLAcc@1020006 : Record "G/L Account";
      Cust@1020008 : Record Customer;
      Vend@1020009 : Record Vendor;
      BankAcc@1020012 : Record "Bank Account";
      FA@1020013 : Record "Fixed Asset";
      GLSetup@1020005 : Record "General Ledger Setup";
      BankRecHdr@1020018 : Record "Bank Rec. Header";
      BankRecLine@1020003 : Record "Bank Rec. Line";
      BankRecCommentLine@1020000 : Record "Bank Comment Line";
      Currency@1020017 : Record Currency;
      CurrExchRate@1020016 : Record "Currency Exchange Rate";
      DimMgt@1020002 : Codeunit DimensionManagement;
      NoSeriesMgt@1020004 : Codeunit NoSeriesManagement;
      Text002@1020019 : TextConst 'ENU=cannot be specified without %1';
      Text003@1480000 : TextConst 'ENU=You cannot rename a %1.';
      Text014@1020011 : TextConst 'ENU=The %1 %2 has a %3 %4.\Do you still want to use %1 %2 in this journal line?';
      Text1020100@1020100 : TextConst 'ENU=%1 is blocked for %2 processing';
      PrivacyBlockedErr@1234567 : TextConst '@@@="%1 = customer";ENU=%1 is blocked for privacy.';
      BankRecPost@1020014 : Codeunit "Bank Rec.-Post";

    [External]
    PROCEDURE SetUpNewLine@9(LastBankRecLine@1000 : Record "Bank Rec. Line";Balance@1001 : Decimal;BottomLine@1002 : Boolean);
    BEGIN
      GLSetup.GET;
      BankRecLine.SETRANGE("Bank Account No.","Bank Account No.");
      BankRecLine.SETRANGE("Statement No.","Statement No.");
      BankRecLine.SETRANGE("Record Type","Record Type");
      if BankRecLine.FINDLAST then begin
        "Posting Date" := LastBankRecLine."Posting Date";
        "Document No." := LastBankRecLine."Document No.";
        "Document No." := INCSTR("Document No.");
        "Account Type" := LastBankRecLine."Account Type";
      end else begin
        "Posting Date" := WORKDATE;
        if GLSetup."Bank Rec. Adj. Doc. Nos." <> '' then begin
          CLEAR(NoSeriesMgt);
          "Document No." := NoSeriesMgt.TryGetNextNo(GLSetup."Bank Rec. Adj. Doc. Nos.","Posting Date");
        end;
        "Account Type" := "Account Type"::"Bank Account";
        VALIDATE("Account No.","Bank Account No.");
      end;
      "Adj. No. Series" := GLSetup."Bank Rec. Adj. Doc. Nos.";
      "Bal. Account Type" := LastBankRecLine."Bal. Account Type";
      "Document Type" := LastBankRecLine."Document Type";
      if ("Account Type" in ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset"]) and
         ("Bal. Account Type" in ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset"])
      then begin
        "Account Type" := "Account Type"::"G/L Account";
        "Account No." := '';
        Description := '';
      end;
      if "Record Type" = "Record Type"::Adjustment then begin
        Cleared := true;
        "Cleared Amount" := Amount;
      end;
    END;

    LOCAL PROCEDURE GenerateDocNo@1020000();
    BEGIN
      if "Posting Date" = 0D then
        "Posting Date" := WORKDATE;
      GLSetup.GET;
      CLEAR(NoSeriesMgt);
      "Document No." := NoSeriesMgt.TryGetNextNo(GLSetup."Bank Rec. Adj. Doc. Nos.","Posting Date");
    END;

    LOCAL PROCEDURE CheckGLAcc@7();
    BEGIN
      GLAcc.CheckGLAcc;
      if GLAcc."Direct Posting" then
        exit;
      if "Posting Date" <> 0D then
        if "Posting Date" = CLOSINGDATE("Posting Date") then
          exit;
      GLAcc.TESTFIELD("Direct Posting",true);
    END;

    LOCAL PROCEDURE SetCurrencyCode@4(AccType2@1000 : '"G/L Account",Customer,Vendor,"Bank Account"';AccNo2@1001 : Code[20]) : Boolean;
    VAR
      Cust2@1020000 : Record Customer;
      Vend2@1020001 : Record Vendor;
      BankAcc2@1020002 : Record "Bank Account";
    BEGIN
      "Currency Code" := '';
      if AccNo2 <> '' then
        case AccType2 of
          AccType2::Customer:
            if Cust2.GET(AccNo2) then
              "Currency Code" := Cust2."Currency Code";
          AccType2::Vendor:
            if Vend2.GET(AccNo2) then
              "Currency Code" := Vend2."Currency Code";
          AccType2::"Bank Account":
            if BankAcc2.GET(AccNo2) then
              "Currency Code" := BankAcc2."Currency Code";
        end;
      exit("Currency Code" <> '');
    END;

    [External]
    PROCEDURE CreateDim@13(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1008 : Integer;No5@1009 : Code[20]);
    VAR
      TableID@1010 : ARRAY [10] OF Integer;
      No@1011 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@14(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    [External]
    PROCEDURE LookupShortcutDimCode@18(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    [External]
    PROCEDURE ShowShortcutDimCode@15(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    [External]
    PROCEDURE ExpandLine@1480001(VAR DepositBankRecLine@1480000 : Record "Bank Rec. Line");
    VAR
      BankRecLine@1480003 : Record "Bank Rec. Line";
      BankRecSubLine@1480002 : Record "Bank Rec. Sub-line";
      BankLedgerEntry@1480005 : Record "Bank Account Ledger Entry";
      NextBankRecLineNo@1480001 : Integer;
    BEGIN
      with DepositBankRecLine do begin
        if ("Record Type" <> "Record Type"::Deposit) or
           ("Collapse Status" <> "Collapse Status"::"Collapsed Deposit") or
           ("External Document No." = '')
        then
          exit;
        DELETE;

        BankRecLine.SETCURRENTKEY("Bank Account No.","Statement No.","Record Type","Line No.");
        BankRecLine.SETRANGE("Bank Account No.","Bank Account No.");
        BankRecLine.SETRANGE("Statement No.","Statement No.");
        BankRecLine.SETRANGE("Record Type","Record Type");
        BankRecLine.LOCKTABLE;
        if BankRecLine.FINDLAST then
          NextBankRecLineNo := BankRecLine."Line No." + 10000
        else
          NextBankRecLineNo := 10000;
        BankRecLine.RESET;

        BankRecSubLine.SETRANGE("Bank Account No.","Bank Account No.");
        BankRecSubLine.SETRANGE("Statement No.","Statement No.");
        BankRecSubLine.SETRANGE("Bank Rec. Line No.","Line No.");
        BankRecSubLine.FIND('-');
        repeat
          BankRecLine.INIT;
          BankRecLine."Bank Account No." := "Bank Account No.";
          BankRecLine."Statement No." := "Statement No.";
          BankRecLine."Record Type" := "Record Type"::Deposit;
          BankRecLine."Line No." := NextBankRecLineNo;
          BankRecLine."Posting Date" := BankRecSubLine."Posting Date";
          BankRecLine."Document Type" := BankRecSubLine."Document Type";
          BankRecLine."Document No." := BankRecSubLine."Document No.";
          BankRecLine.Description := BankRecSubLine.Description;
          BankRecLine.Amount := BankRecSubLine.Amount;
          BankRecLine.VALIDATE("Currency Code",BankRecSubLine."Currency Code");
          BankRecLine."External Document No." := BankRecSubLine."External Document No.";
          BankRecLine."Bank Ledger Entry No." := BankRecSubLine."Bank Ledger Entry No.";
          BankRecLine."Collapse Status" := "Collapse Status"::"Expanded Deposit Line";
          BankLedgerEntry.GET(BankRecLine."Bank Ledger Entry No.");
          BankRecLine."Shortcut Dimension 1 Code" := BankLedgerEntry."Global Dimension 1 Code";
          BankRecLine."Shortcut Dimension 2 Code" := BankLedgerEntry."Global Dimension 2 Code";
          BankRecLine."Dimension Set ID" := BankLedgerEntry."Dimension Set ID";
          BankRecLine.VALIDATE(Cleared,Cleared);
          BankRecLine.INSERT(true);
          BankRecSubLine.DELETE;
          NextBankRecLineNo := NextBankRecLineNo + 10000;
        until BankRecSubLine.NEXT = 0;
      end;
      DepositBankRecLine := BankRecLine;
    END;

    [External]
    PROCEDURE CollapseLines@1480002(VAR DepositBankRecLine@1480000 : Record "Bank Rec. Line");
    VAR
      BankRecLine@1480004 : Record "Bank Rec. Line";
      BankRecSubLine@1480001 : Record "Bank Rec. Sub-line";
      TempBankRecSubLine@1020000 : TEMPORARY Record "Bank Rec. Sub-line";
      TotalDepositAmount@1480002 : Decimal;
      NextSubLineNo@1480003 : Integer;
    BEGIN
      with DepositBankRecLine do begin
        if ("Record Type" <> "Record Type"::Deposit) or
           ("Collapse Status" <> "Collapse Status"::"Expanded Deposit Line") or
           ("External Document No." = '')
        then
          exit;

        BankRecLine.SETCURRENTKEY("Bank Account No.","Statement No.","Record Type","External Document No.");
        BankRecLine.SETRANGE("Bank Account No.","Bank Account No.");
        BankRecLine.SETRANGE("Statement No.","Statement No.");
        BankRecLine.SETRANGE("Record Type","Record Type");
        BankRecLine.SETRANGE("External Document No.","External Document No.");
        if BankRecLine.COUNT > 1 then begin
          BankRecSubLine.SETRANGE("Bank Account No.","Bank Account No.");
          BankRecSubLine.SETRANGE("Statement No.","Statement No.");

          TotalDepositAmount := 0;
          NextSubLineNo := 1;
          BankRecLine.FINDSET;
          repeat
            BankRecSubLine.SETRANGE("Bank Rec. Line No.",BankRecLine."Line No.");
            if not BankRecSubLine.FINDSET then begin
              BankRecSubLine.INIT;
              BankRecSubLine.TRANSFERFIELDS(BankRecLine,false);
              BankRecSubLine."Bank Account No." := "Bank Account No.";
              BankRecSubLine."Statement No." := "Statement No.";
              BankRecSubLine."Bank Rec. Line No." := "Line No.";
              BankRecSubLine."Line No." := NextSubLineNo;
              BankRecSubLine.INSERT;
              NextSubLineNo += 1;
              CopyBankRecSubLineToTemp(TempBankRecSubLine,BankRecSubLine);
              BankRecSubLine.DELETE;
            end else
              repeat
                CopyBankRecSubLineToTemp(TempBankRecSubLine,BankRecSubLine);
              until BankRecSubLine.NEXT = 0;
            BankRecSubLine.DELETEALL;
            TotalDepositAmount := TotalDepositAmount + BankRecLine.Amount;
            BankRecLine.DELETE;
          until BankRecLine.NEXT = 0;
          CopyBankRecSubLineFromTemp(TempBankRecSubLine,"Line No.");

          UpdateLedgers;
          "Document Type" := 0;
          "Document No." := '';
          Amount := TotalDepositAmount;
          Cleared := false;
          "Cleared Amount" := 0;
          "Bank Ledger Entry No." := 0;
          "Check Ledger Entry No." := 0;
          "Shortcut Dimension 1 Code" := '';
          "Shortcut Dimension 2 Code" := '';
          "Collapse Status" := "Collapse Status"::"Collapsed Deposit";

          INSERT;
        end else begin
          "Collapse Status" := 0;
          MODIFY;
        end;
      end;
    END;

    [External]
    PROCEDURE ShowDimensions@1020002();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2("Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE UpdateLedgers@1020003();
    BEGIN
      Positive := (Amount > 0);
      BankRecPost.UpdateLedgers(Rec,SetStatus::Cleared);
    END;

    LOCAL PROCEDURE CopyBankRecSubLineToTemp@1020001(VAR TempBankRecSubLine@1020001 : TEMPORARY Record "Bank Rec. Sub-line";BankRecSubLine@1020000 : Record "Bank Rec. Sub-line");
    BEGIN
      TempBankRecSubLine := BankRecSubLine;
      TempBankRecSubLine.INSERT;
    END;

    LOCAL PROCEDURE CopyBankRecSubLineFromTemp@1020007(VAR TempBankRecSubLine@1020002 : TEMPORARY Record "Bank Rec. Sub-line";LineNo@1020003 : Integer);
    VAR
      BankRecSubLine@1020000 : Record "Bank Rec. Sub-line";
      NextSubLineNo@1020001 : Integer;
    BEGIN
      if TempBankRecSubLine.FINDSET then begin
        repeat
          NextSubLineNo += 1;
          BankRecSubLine := TempBankRecSubLine;
          BankRecSubLine."Bank Rec. Line No." := LineNo;
          BankRecSubLine."Line No." := NextSubLineNo;
          BankRecSubLine.INSERT;
        until TempBankRecSubLine.NEXT = 0;
        TempBankRecSubLine.DELETEALL;
      end;
    END;

    BEGIN
    END.
  }
}

