OBJECT Report 10406 Bank Rec. Process Lines
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160459.63T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    Permissions=TableData "Bank Account Ledger Entry"=rm,
                TableData "Check Ledger Entry"=rm;
    CaptionML=ENU=Bank Rec. Process Lines;
    ProcessingOnly=true;
  }
  DATASET
  {
    { 8875;    ;DataItem;Bank Rec. Header    ;
               DataItemTable="Bank Rec. Header";
               DataItemTableView=SORTING("Bank Account No.","Statement No.");
               MaxIteration=1;
               OnPreDataItem=BEGIN
                               SETRANGE("Bank Account No.",DoBankAcct);
                               SETRANGE("Statement No.",DoStatementNo);
                             END;
                              }

    { 1224;1   ;DataItem;Bank Rec. Line      ;
               DataItemTable="Bank Rec. Line";
               DataItemTableView=SORTING("Bank Account No.","Statement No.","Record Type","Line No.");
               MaxIteration=0;
               ReqFilterFields="Posting Date","Document Type","Document No.";
               DataItemLink="Bank Account No."=FIELD("Bank Account No."),"Statement No."=FIELD("Statement No.") }

    { 5692;1   ;DataItem;RunProcesses        ;
               DataItemTable=Integer;
               DataItemTableView=SORTING(Number);
               MaxIteration=1;
               OnAfterGetRecord=BEGIN
                                  if DoSuggestLines then
                                    SuggestLines;

                                  if DoMarkLines then
                                    MarkLines;

                                  if DoAdjLines then
                                    RecordAdjustmentLines;

                                  if DoClearLines then
                                    ClearLines;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnInit=BEGIN
               MarkAsClearedVisible := true;
               ReplaceLinesVisible := true;
             END;

      OnOpenPage=BEGIN
                   ReplaceLinesVisible := DoSuggestLines;
                   MarkAsClearedVisible := DoMarkLines;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Control1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1020002;2;Field     ;
                  Name=RecordTypeToProcess;
                  CaptionML=ENU=Record type to process;
                  ToolTipML=ENU=Specifies the type of bank reconciliation records to process: Checks, Deposits, or Both.;
                  OptionCaptionML=ENU=Checks,Deposits,Both;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=RecordTypeToProcess }

      { 1020006;2;Field     ;
                  Name=MarkAsCleared;
                  CaptionML=ENU=Mark lines as cleared;
                  ToolTipML=ENU=Specifies is cleared bank reconciliation lines are marked as cleared. In that case, you must select Process in the Record type to process field.;
                  ApplicationArea=#All;
                  SourceExpr=MarkCleared;
                  Visible=MarkAsClearedVisible }

      { 1020000;2;Field     ;
                  Name=ReplaceLines;
                  CaptionML=ENU=Replace existing lines;
                  ToolTipML=ENU="Specifies if identical existing bank account reconciliation lines are replaced. ";
                  ApplicationArea=#All;
                  SourceExpr=ReplaceExisting;
                  Visible=ReplaceLinesVisible }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      DoSuggestLines@1020009 : Boolean;
      DoMarkLines@1020011 : Boolean;
      DoAdjLines@1020018 : Boolean;
      DoClearLines@1020022 : Boolean;
      ReplaceExisting@1020005 : Boolean;
      MarkCleared@1020010 : Boolean;
      RecordTypeToProcess@1020008 : 'Checks,Deposits,Both';
      LastLineNo@1020004 : Integer;
      AdjAmount@1020015 : Decimal;
      DoBankAcct@1020020 : Code[20];
      DoStatementNo@1020021 : Code[20];
      GLSetup@1020014 : Record "General Ledger Setup";
      BankRecLine@1020002 : Record "Bank Rec. Line";
      Window@1020001 : Dialog;
      Text001@1020006 : TextConst 'ENU=Processing bank account           #1####################\\';
      Text002@1020003 : TextConst 'ENU=Reading bank ledger entries       #2##########\';
      Text003@1020000 : TextConst 'ENU=Reading check ledger entries      #3##########\';
      Text004@1020012 : TextConst 'ENU="                      Statement   #2####################\"';
      Text005@1020007 : TextConst 'ENU="                  Marking lines   #3####################"';
      Text006@1020016 : TextConst 'ENU="              Processing lines    #3####################"';
      Text007@1020013 : TextConst 'ENU="                  Clearing lines  #3####################"';
      Text008@1480000 : TextConst 'ENU=Collapsing Deposit Lines...';
      ReplaceLinesVisible@19078467 : Boolean INDATASET;
      MarkAsClearedVisible@19051436 : Boolean INDATASET;

    [External]
    PROCEDURE SetDoSuggestLines@1020004(UseDo@1020000 : Boolean;UseBankAcct@1020001 : Code[20];UseStatementNo@1020002 : Code[20]);
    BEGIN
      DoSuggestLines := UseDo;
      DoBankAcct := UseBankAcct;
      DoStatementNo := UseStatementNo;
    END;

    [External]
    PROCEDURE SetDoMarkLines@1020005(UseDo@1020000 : Boolean;UseBankAcct@1020002 : Code[20];UseStatementNo@1020001 : Code[20]);
    BEGIN
      DoMarkLines := UseDo;
      DoBankAcct := UseBankAcct;
      DoStatementNo := UseStatementNo;
    END;

    [External]
    PROCEDURE SetDoAdjLines@1020009(UseDo@1020000 : Boolean;UseBankAcct@1020002 : Code[20];UseStatementNo@1020001 : Code[20]);
    BEGIN
      DoAdjLines := UseDo;
      DoBankAcct := UseBankAcct;
      DoStatementNo := UseStatementNo;
    END;

    [External]
    PROCEDURE SetDoClearLines@1020012(UseDo@1020000 : Boolean;UseBankAcct@1020002 : Code[20];UseStatementNo@1020001 : Code[20]);
    BEGIN
      DoClearLines := UseDo;
      DoBankAcct := UseBankAcct;
      DoStatementNo := UseStatementNo;
    END;

    [External]
    PROCEDURE SuggestLines@1020000();
    VAR
      RecordType@1020005 : 'Check,Deposit,Adjustment';
      BankLedger@1020004 : Record "Bank Account Ledger Entry";
      CheckLedger@1020003 : Record "Check Ledger Entry";
      BankRecLine2@1480000 : Record "Bank Rec. Line";
    BEGIN
      Window.OPEN(Text001 + Text002 + Text003);
      Window.UPDATE(1,"Bank Rec. Header"."Bank Account No.");

      if ReplaceExisting then begin
        BankRecLine.SETCURRENTKEY("Bank Account No.","Statement No.");
        BankRecLine.SETRANGE("Bank Account No.","Bank Rec. Header"."Bank Account No.");
        BankRecLine.SETRANGE("Statement No.","Bank Rec. Header"."Statement No.");
        if RecordTypeToProcess <> RecordTypeToProcess::Both then
          BankRecLine.SETRANGE("Record Type",RecordTypeToProcess);
        BankRecLine.DELETEALL(true);
        BankRecLine.RESET;
      end;

      with BankLedger do begin
        SETCURRENTKEY("Bank Account No.","Posting Date","Statement Status");
        SETRANGE("Bank Account No.","Bank Rec. Header"."Bank Account No.");
        SETRANGE("Statement Status","Statement Status"::Open);
        if "Bank Rec. Line".GETFILTER("Posting Date") = '' then
          SETRANGE("Posting Date",0D,"Bank Rec. Header"."Statement Date")
        else
          "Bank Rec. Line".COPYFILTER("Posting Date","Posting Date");
        "Bank Rec. Line".COPYFILTER("Document Type","Document Type");
        "Bank Rec. Line".COPYFILTER("Document No.","Document No.");
        "Bank Rec. Line".COPYFILTER("External Document No.","External Document No.");
        if FIND('-') then
          repeat
            Window.UPDATE(2,"Entry No.");
            CheckLedger.SETCURRENTKEY("Bank Account Ledger Entry No.");
            CheckLedger.SETRANGE("Bank Account Ledger Entry No.","Entry No.");
            CheckLedger.SETRANGE("Statement Status","Statement Status"::Open);
            if CheckLedger.FIND('-') then begin
              repeat
                Window.UPDATE(3,CheckLedger."Entry No.");
                if RecordTypeToProcess in [RecordTypeToProcess::Both,RecordTypeToProcess::Checks] then
                  WriteLine("Bank Rec. Header",
                    BankRecLine,
                    ReplaceExisting,
                    RecordType::Check,
                    CheckLedger."Document Type",
                    CheckLedger."Check No.",
                    CheckLedger.Description,
                    CheckLedger.Amount,
                    CheckLedger."External Document No.",
                    "Entry No.",
                    CheckLedger."Entry No.",
                    CheckLedger."Posting Date",
                    "Global Dimension 1 Code",
                    "Global Dimension 2 Code",
                    "Dimension Set ID");

              until CheckLedger.NEXT = 0;
            end else begin
              if RecordTypeToProcess in [RecordTypeToProcess::Both,RecordTypeToProcess::Deposits] then
                WriteLine("Bank Rec. Header",
                  BankRecLine,
                  ReplaceExisting,
                  RecordType::Deposit,
                  "Document Type",
                  "Document No.",
                  Description,
                  Amount,
                  "External Document No.",
                  "Entry No.",
                  0,
                  "Posting Date",
                  "Global Dimension 1 Code",
                  "Global Dimension 2 Code",
                  "Dimension Set ID");
            end;
          until NEXT = 0;
      end;
      Window.CLOSE;
      if RecordTypeToProcess in [RecordTypeToProcess::Both,RecordTypeToProcess::Deposits] then begin
        Window.OPEN(Text008);
        with BankRecLine do begin
          RESET;
          SETCURRENTKEY("Bank Account No.","Statement No.","Record Type");
          SETRANGE("Bank Account No.","Bank Rec. Header"."Bank Account No.");
          SETRANGE("Statement No.","Bank Rec. Header"."Statement No.");
          SETRANGE("Record Type","Record Type"::Deposit);
          SETRANGE("Collapse Status","Collapse Status"::"Expanded Deposit Line");
          if FIND('-') then
            repeat
              BankRecLine2 := BankRecLine;
              CollapseLines(BankRecLine2);
            until NEXT = 0;
          RESET;
        end;
        Window.CLOSE;
      end;
    END;

    [External]
    PROCEDURE MarkLines@1020003();
    BEGIN
      Window.OPEN(Text001 + Text004 + Text005);
      Window.UPDATE(1,"Bank Rec. Header"."Bank Account No.");
      Window.UPDATE(2,"Bank Rec. Header"."Statement No.");

      BankRecLine.COPYFILTERS("Bank Rec. Line");
      if RecordTypeToProcess = RecordTypeToProcess::Both then
        BankRecLine.SETRANGE("Record Type",BankRecLine."Record Type"::Check,
          BankRecLine."Record Type"::Deposit)
      else
        if RecordTypeToProcess = RecordTypeToProcess::Checks then
          BankRecLine.SETRANGE("Record Type",BankRecLine."Record Type"::Check)
        else
          BankRecLine.SETRANGE("Record Type",BankRecLine."Record Type"::Deposit);

      if BankRecLine.FIND('-') then
        repeat
          BankRecLine.VALIDATE(Cleared,MarkCleared);
          BankRecLine.MODIFY;
          Window.UPDATE(3,BankRecLine."Line No.");
        until BankRecLine.NEXT = 0;

      Window.CLOSE;
    END;

    [External]
    PROCEDURE RecordAdjustmentLines@1020008();
    VAR
      UseRecordType@1020001 : 'Check,Deposit,Adjustment';
      NewBankRecLine@1020000 : Record "Bank Rec. Line";
    BEGIN
      Window.OPEN(Text001 + Text004 + Text006);
      Window.UPDATE(1,"Bank Rec. Header"."Bank Account No.");
      Window.UPDATE(2,"Bank Rec. Header"."Statement No.");

      GLSetup.GET;

      with BankRecLine do begin
        RESET;
        SETCURRENTKEY("Bank Account No.",
          "Statement No.",
          "Record Type",
          Cleared);
        SETRANGE("Bank Account No.","Bank Rec. Header"."Bank Account No.");
        SETRANGE("Statement No.","Bank Rec. Header"."Statement No.");
        if RecordTypeToProcess <> RecordTypeToProcess::Both then
          SETRANGE("Record Type",RecordTypeToProcess);
        SETRANGE(Cleared,true);

        if FIND('-') then
          repeat
            Window.UPDATE(3,"Line No.");
            if "Record Type" = "Record Type"::Check then
              AdjAmount := -("Cleared Amount" - Amount)
            else
              AdjAmount := "Cleared Amount" - Amount;
            if AdjAmount <> 0 then begin
              WriteAdjLine("Bank Rec. Header",
                NewBankRecLine,
                UseRecordType::Adjustment,
                "Document Type",
                "Document No.",
                Description,
                AdjAmount,
                "External Document No.",
                "Record Type",
                "Dimension Set ID");
              MODIFY;
            end;
          until NEXT = 0;
      end;
      Window.CLOSE;
    END;

    [External]
    PROCEDURE ClearLines@1020010();
    BEGIN
      Window.OPEN(Text001 + Text004 + Text007);
      Window.UPDATE(1,"Bank Rec. Header"."Bank Account No.");
      Window.UPDATE(2,"Bank Rec. Header"."Statement No.");

      BankRecLine.COPYFILTERS("Bank Rec. Line");
      if RecordTypeToProcess = RecordTypeToProcess::Both then
        BankRecLine.SETRANGE("Record Type",BankRecLine."Record Type"::Check,
          BankRecLine."Record Type"::Deposit)
      else
        if RecordTypeToProcess = RecordTypeToProcess::Checks then
          BankRecLine.SETRANGE("Record Type",BankRecLine."Record Type"::Check)
        else
          BankRecLine.SETRANGE("Record Type",BankRecLine."Record Type"::Deposit);

      if BankRecLine.FIND('-') then
        repeat
          BankRecLine.DELETE(true);
          Window.UPDATE(3,BankRecLine."Line No.");
        until BankRecLine.NEXT = 0;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE WriteLine@1020002(BankRecHdr2@1020002 : Record "Bank Rec. Header";VAR BankRecLine2@1020010 : Record "Bank Rec. Line";UseReplaceExisting@1020003 : Boolean;UseRecordType@1020004 : 'Check,Deposit,Adjustment';UseDocumentType@1020006 : '" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund';UseDocumentNo@1020007 : Code[20];UseDescription@1020009 : Text[50];UseAmount@1020008 : Decimal;UseExtDocNo@1020000 : Code[35];UseBankLedgerEntryNo@1020011 : Integer;UseCheckLedgerEntryNo@1020012 : Integer;UsePostingDate@1020014 : Date;UseDimCode1@1480001 : Code[20];UseDimCode2@1480000 : Code[20];UseDimSetID@1020005 : Integer);
    VAR
      Ok@1020001 : Boolean;
    BEGIN
      if (RecordTypeToProcess = RecordTypeToProcess::Both) or
         (UseRecordType = RecordTypeToProcess)
      then
        with BankRecHdr2 do begin
          BankRecLine2.SETCURRENTKEY("Bank Account No.","Statement No.");
          BankRecLine2.SETRANGE("Bank Account No.","Bank Account No.");
          BankRecLine2.SETRANGE("Statement No.","Statement No.");
          if BankRecLine2.FIND('+') then
            LastLineNo := BankRecLine2."Line No."
          else
            LastLineNo := 0;
          BankRecLine2.RESET;

          BankRecLine2.INIT;
          BankRecLine2."Bank Account No." := "Bank Account No.";
          BankRecLine2."Statement No." := "Statement No.";
          BankRecLine2."Record Type" := UseRecordType;
          BankRecLine2."Posting Date" := UsePostingDate;
          BankRecLine2."Document Type" := UseDocumentType;
          BankRecLine2."Document No." := UseDocumentNo;
          BankRecLine2.Description := UseDescription;
          BankRecLine2.Amount := UseAmount;
          BankRecLine2.VALIDATE("Currency Code","Currency Code");
          BankRecLine2."External Document No." := UseExtDocNo;
          BankRecLine2."Bank Ledger Entry No." := UseBankLedgerEntryNo;
          BankRecLine2."Check Ledger Entry No." := UseCheckLedgerEntryNo;
          BankRecLine2."Shortcut Dimension 1 Code" := UseDimCode1;
          BankRecLine2."Shortcut Dimension 2 Code" := UseDimCode2;
          BankRecLine2."Dimension Set ID" := UseDimSetID;
          if (UseRecordType = UseRecordType::Deposit) and (UseExtDocNo <> '') then
            BankRecLine2."Collapse Status" := BankRecLine2."Collapse Status"::"Expanded Deposit Line";

          if UseReplaceExisting then
            InsertLine(BankRecLine2)
          else begin
            BankRecLine2.SETCURRENTKEY("Bank Account No.",
              "Statement No.",
              "Posting Date",
              "Document Type",
              "Document No.",
              "External Document No.");
            BankRecLine2.SETRANGE("Bank Account No.","Bank Account No.");
            BankRecLine2.SETRANGE("Statement No.","Statement No.");
            BankRecLine2.SETRANGE("Bank Ledger Entry No.",UseBankLedgerEntryNo);
            BankRecLine2.SETRANGE("Check Ledger Entry No.",UseCheckLedgerEntryNo);
            Ok := BankRecLine2.FIND('-');
            if Ok then begin
              BankRecLine2.Description := UseDescription;
              BankRecLine2.Amount := UseAmount;
              BankRecLine2.VALIDATE("Currency Code","Currency Code");
              BankRecLine2.MODIFY;
            end else
              InsertLine(BankRecLine2);
          end;
        end;
    END;

    LOCAL PROCEDURE InsertLine@1020001(VAR BankRecLine3@1020001 : Record "Bank Rec. Line");
    VAR
      Ok@1020000 : Boolean;
    BEGIN
      repeat
        LastLineNo := LastLineNo + 10000;
        BankRecLine3."Line No." := LastLineNo;
        Ok := BankRecLine3.INSERT(true);
      until Ok
    END;

    LOCAL PROCEDURE WriteAdjLine@1020007(BankRecHdr2@1020002 : Record "Bank Rec. Header";VAR BankRecLine2@1020010 : Record "Bank Rec. Line";UseRecordType@1020004 : 'Check,Deposit,Adjustment';UseDocumentType@1020006 : '" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund';UseDocumentNo@1020007 : Code[20];UseDescription@1020009 : Text[50];UseAmount@1020008 : Decimal;UseExtDocNo@1020000 : Code[35];UseSourceType@1020003 : 'Check,Deposit,Adjustment';DimSetID@1020011 : Integer);
    VAR
      Ok@1020001 : Boolean;
      WorkDocumentNo@1020012 : Code[20];
      NoSeriesMgmnt@1020005 : Codeunit NoSeriesManagement;
    BEGIN
      with BankRecHdr2 do begin
        if BankRecLine2.FIND('+') then
          LastLineNo := BankRecLine2."Line No."
        else
          LastLineNo := 0;

        NoSeriesMgmnt.InitSeries(GLSetup."Bank Rec. Adj. Doc. Nos.",'',"Statement Date",WorkDocumentNo,
          BankRecLine2."Adj. No. Series");

        BankRecLine2.INIT;
        BankRecLine2."Bank Account No." := "Bank Account No.";
        BankRecLine2."Statement No." := "Statement No.";
        BankRecLine2."Record Type" := UseRecordType;
        BankRecLine2."Posting Date" := "Statement Date";
        BankRecLine2."Document Type" := UseDocumentType;
        BankRecLine2."Document No." := WorkDocumentNo;
        BankRecLine2."Dimension Set ID" := DimSetID;
        BankRecLine2.Description := COPYSTR(STRSUBSTNO('Adjustment to %1',UseDescription),1,50);
        BankRecLine2.Cleared := true;
        BankRecLine2.Amount := UseAmount;
        BankRecLine2."Cleared Amount" := BankRecLine2.Amount;
        BankRecLine2.VALIDATE("Currency Code","Currency Code");
        BankRecLine2."External Document No." := UseExtDocNo;
        BankRecLine2."Account Type" := BankRecLine2."Account Type"::"Bank Account";
        BankRecLine2."Account No." := "Bank Account No.";
        BankRecLine2."Adj. Source Record ID" := UseSourceType;
        BankRecLine2."Adj. Source Document No." := UseDocumentNo;

        repeat
          LastLineNo := LastLineNo + 10000;
          BankRecLine2."Line No." := LastLineNo;
          Ok := BankRecLine2.INSERT;
        until Ok
      end;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

