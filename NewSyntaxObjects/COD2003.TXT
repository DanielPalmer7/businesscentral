OBJECT Codeunit 2003 ML Prediction Management
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160713.303T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AzureMLConnector@1008 : Codeunit "Azure ML Connector";
      NotInitializedErr@1003 : TextConst 'ENU=The request has not been properly initialized.';
      RecordVar@1004 : Variant;
      LabelNo@1007 : Integer;
      FeatureNumbers@1006 : ARRAY [25] OF Integer;
      LastFeatureIndex@1005 : Integer;
      NotRecordVariantErr@1009 : TextConst 'ENU=The variant must be a record variant.';
      FieldDoesNotExistErr@1010 : TextConst '@@@="%1 = field ID";ENU=A field with the ID %1 does not exist.';
      TooManyFeaturesErr@1011 : TextConst '@@@="%1 = max number of features";ENU=Cannot train or predict because you have added more than %1 features to the model.';
      LabelCannotBeFeatureErr@1012 : TextConst 'ENU=You have used the same field as the feature and as the label. A field can be either the label or feature, but not both.';
      FeatureRepeatedErr@1013 : TextConst 'ENU=You can add a field as a feature only one time.';
      TrainingPercent@1014 : Decimal;
      ApiUri@1000 : Text[250];
      ApiKey@1001 : Text[200];
      ApiTimeout@1002 : Integer;
      TrainingPercentageErr@1015 : TextConst 'ENU=The training percentage must be a decimal number between 0 and 1.';
      SomethingWentWrongErr@1016 : TextConst '@@@="%1 = detailed error";ENU=Oops, something went wrong when connecting to the Azure Machine Learning endpoint. Please contact your system administrator. %1.';
      DetailedErrorErr@1017 : TextConst 'ENU="Details: "';
      ErrorResponseTxt@1018 : TextConst '@@@={LOCKED};ENU="Error code: "';
      AzureMachineLearningLimitReachedErr@1020 : TextConst 'ENU=The Microsoft Azure Machine Learning limit has been reached. Please contact your system administrator.';

    [External]
    PROCEDURE DefaultInitialize@17();
    BEGIN
      LabelNo := 0;
      LastFeatureIndex := 0;
      TrainingPercent := 0.8;
    END;

    [External]
    PROCEDURE Initialize@4(Uri@1000 : Text[250];Key@1001 : Text[200];TimeOutSeconds@1002 : Integer);
    BEGIN
      ApiUri := Uri;
      ApiKey := Key;
      ApiTimeout := TimeOutSeconds;
      DefaultInitialize;
    END;

    [External]
    PROCEDURE InitializeWithKeyVaultCredentials@12(TimeOutSeconds@1000 : Integer);
    VAR
      CortanaIntelligenceUsage@1001 : Record "Cortana Intelligence Usage";
      AzureKeyVaultManagement@1002 : Codeunit "Azure Key Vault Management";
      LimitType@1003 : Option;
      LimitValue@1004 : Decimal;
    BEGIN
      if CortanaIntelligenceUsage.GetSingleInstance(CortanaIntelligenceUsage.Service::"Machine Learning") then
        if CortanaIntelligenceUsage."Total Resource Usage" > CortanaIntelligenceUsage."Original Resource Limit" then
          ERROR(AzureMachineLearningLimitReachedErr);
      AzureKeyVaultManagement.GetMachineLearningCredentials(ApiUri,ApiKey,LimitType,LimitValue);
      ApiTimeout := TimeOutSeconds;
      DefaultInitialize;
    END;

    PROCEDURE SetMessageHandler@7(MessageHandler@1000 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpMessageHandler");
    BEGIN
      AzureMLConnector.SetMessageHandler(MessageHandler);
    END;

    [External]
    PROCEDURE SetRecord@1(RecordVariant@1000 : Variant);
    VAR
      DataTypeManagement@1001 : Codeunit "Data Type Management";
      RecRef@1002 : RecordRef;
    BEGIN
      if not DataTypeManagement.GetRecordRef(RecordVariant,RecRef) then
        ERROR(NotRecordVariantErr);
      RecordVar := RecordVariant;
    END;

    [External]
    PROCEDURE GetRecord@20(VAR RecordVariant@1000 : Variant);
    BEGIN
      RecordVariant := RecordVar;
    END;

    [External]
    PROCEDURE AddFeature@13(FeatureFieldNo@1000 : Integer);
    VAR
      FeatureIndex@1001 : Integer;
    BEGIN
      if LastFeatureIndex >= MaxNoFeatures then
        ERROR(STRSUBSTNO(TooManyFeaturesErr,MaxNoFeatures));

      if FeatureFieldNo = LabelNo then
        ERROR(LabelCannotBeFeatureErr);

      TestFieldNumber(FeatureFieldNo);

      for FeatureIndex := 1 to LastFeatureIndex do begin
        if FeatureNumbers[FeatureIndex] = FeatureFieldNo then
          ERROR(FeatureRepeatedErr);
      end;

      LastFeatureIndex := LastFeatureIndex + 1;
      FeatureNumbers[LastFeatureIndex] := FeatureFieldNo;
    END;

    [External]
    PROCEDURE SetLabel@5(LabelFieldNo@1000 : Integer);
    VAR
      DataTypeManagement@1003 : Codeunit "Data Type Management";
      RecRef@1001 : RecordRef;
    BEGIN
      DataTypeManagement.GetRecordRef(RecordVar,RecRef);
      TestFieldNumber(LabelFieldNo);
      LabelNo := LabelFieldNo;
    END;

    [External]
    PROCEDURE SetTrainingPercent@18(TrainingPercentValue@1000 : Decimal);
    BEGIN
      if (TrainingPercentValue <= 0) or (TrainingPercentValue >= 1) then
        ERROR(TrainingPercentageErr);

      TrainingPercent := TrainingPercentValue;
    END;

    [External]
    PROCEDURE GetTrainingPercent@69() : Decimal;
    BEGIN
      exit(TrainingPercent);
    END;

    [External]
    PROCEDURE Train@2(VAR Model@1004 : Text;VAR Quality@1005 : Decimal);
    VAR
      OutputValue@1000 : Text;
      CallAzureEndPoint@1001 : Boolean;
    BEGIN
      CallAzureEndPoint := true;
      OnBeforeTrain(Model,Quality,CallAzureEndPoint);
      if not CallAzureEndPoint then
        exit;
      AzureMLConnector.Initialize(ApiKey,ApiUri,ApiTimeout);
      TestInitialized;
      AzureMLConnector.AddParameter('method','train');
      AzureMLConnector.AddParameter('train_percent',FORMAT(TrainingPercent,0,9));
      CreateInput;
      if not AzureMLConnector.SendToAzureML(false) then // hard coded to FALSE so that ML does not update the usage stats
        ERROR(SomethingWentWrongErr,GetLastDetailedError);

      AzureMLConnector.GetOutput(1,1,OutputValue);
      Model := OutputValue;
      AzureMLConnector.GetOutput(1,2,OutputValue);
      EVALUATE(Quality,OutputValue);
    END;

    [External]
    PROCEDURE Predict@15(Model@1002 : Text);
    VAR
      CallAzureEndPoint@1000 : Boolean;
    BEGIN
      CallAzureEndPoint := true;
      OnBeforePredict(RecordVar,CallAzureEndPoint);
      if not CallAzureEndPoint then
        exit;
      AzureMLConnector.Initialize(ApiKey,ApiUri,ApiTimeout);
      TestInitialized;
      AzureMLConnector.AddParameter('method','predict');
      AzureMLConnector.AddParameter('model',Model);
      CreateInput;
      if not AzureMLConnector.SendToAzureML(false) then // hard coded to FALSE so that ML does not update the usage stats
        ERROR(SomethingWentWrongErr,GetLastDetailedError);

      LoadPrediction;
    END;

    [External]
    PROCEDURE Evaluate@16(Model@1002 : Text;VAR Quality@1001 : Decimal);
    VAR
      OutputValue@1003 : Text;
      CallAzureEndPoint@1000 : Boolean;
    BEGIN
      CallAzureEndPoint := true;
      OnBeforeEvaluate(Model,Quality,RecordVar,CallAzureEndPoint);
      if not CallAzureEndPoint then
        exit;
      AzureMLConnector.Initialize(ApiKey,ApiUri,ApiTimeout);
      TestInitialized;
      AzureMLConnector.AddParameter('method','evaluate');
      AzureMLConnector.AddParameter('model',Model);
      CreateInput;
      if not AzureMLConnector.SendToAzureML(false) then // hard coded to FALSE so that ML does not update the usage stats
        ERROR(SomethingWentWrongErr,GetLastDetailedError);

      AzureMLConnector.GetOutput(1,1,OutputValue);
      EVALUATE(Quality,OutputValue);
    END;

    [External]
    PROCEDURE IsDataSufficientForClassification@19() : Boolean;
    VAR
      TypeHelper@1008 : Codeunit "Type Helper";
      RecRef@1002 : RecordRef;
      FieldRef@1001 : FieldRef;
      LabelDict@1005 : DotNet "'mscorlib'.System.Collections.Generic.Dictionary`2";
      TotalRecordCount@1004 : Integer;
      LabelDictKey@1006 : Text;
      LabelDictValue@1011 : Integer;
      Element@1009 : Integer;
      MinLabelCount@1007 : Integer;
      MinLabelCountInitialized@1000 : Boolean;
    BEGIN
      if not IsDataSufficientBase(RecRef) then
        exit(false);

      CreateLabelDictionary(LabelDict);
      repeat
        FieldRef := RecRef.FIELD(LabelNo);
        LabelDictKey := FORMAT(FieldRef.VALUE,0,9);
        if LabelDict.TryGetValue(LabelDictKey,LabelDictValue) then begin
          LabelDict.Remove(LabelDictKey);
          LabelDict.Add(LabelDictKey,LabelDictValue + 1);
        end else
          LabelDict.Add(LabelDictKey,1);
        TotalRecordCount += 1;
      until RecRef.NEXT = 0;

      MinLabelCountInitialized := false;
      foreach Element in LabelDict.Values do begin
        if not MinLabelCountInitialized then begin
          MinLabelCount := Element;
          MinLabelCountInitialized := true;
        end else
          if Element < MinLabelCount then
            MinLabelCount := Element;
      end;

      if MinLabelCount = TotalRecordCount then
        exit(false); // there is only one label in the dataset

      // The certainity needed for at least one of the labels to be in the training set should be 99%
      exit(TotalRecordCount >= (TypeHelper.CalculateLog(1 - 0.99) /
                                TypeHelper.CalculateLog(1 - (MinLabelCount / TotalRecordCount)) /
                                TrainingPercent));
    END;

    [External]
    PROCEDURE IsDataSufficientForRegression@37() : Boolean;
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      exit(IsDataSufficientBase(RecRef));
    END;

    PROCEDURE IsDataSufficientBase@21(VAR RecRef@1000 : RecordRef) : Boolean;
    VAR
      DataTypeManagement@1001 : Codeunit "Data Type Management";
    BEGIN
      TestFeatureLabelInitialized;
      DataTypeManagement.GetRecordRef(RecordVar,RecRef);

      if not RecRef.FINDSET then
        exit(false);

      // 20 is the minimum number of data points for which the decision
      // tree algorithm we are using will create a model with multiple nodes
      exit(TrainingPercent * RecRef.COUNT >= 20);
    END;

    LOCAL PROCEDURE CreateLabelDictionary@33(VAR LabelDict@1000 : DotNet "'mscorlib'.System.Collections.Generic.Dictionary`2");
    VAR
      Type@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Type";
      Activator@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Activator";
      Arr@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      DummyString@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      DummyInt@1005 : Integer;
    BEGIN
      // A new object of type dictionary<String, int> is created. This object holds the Label as the key and the
      // value as the number of records in the dataset with that label.
      Arr := Arr.CreateInstance(GETDOTNETTYPE(Type),2);
      Arr.SetValue(GETDOTNETTYPE(DummyString),0);
      Arr.SetValue(GETDOTNETTYPE(DummyInt),1);

      Type := GETDOTNETTYPE(LabelDict);
      Type := Type.MakeGenericType(Arr);

      LabelDict := Activator.CreateInstance(Type);
    END;

    LOCAL PROCEDURE TestFieldNumber@54(FieldNumber@1000 : Integer);
    VAR
      DataTypeManagement@1002 : Codeunit "Data Type Management";
      RecRef@1001 : RecordRef;
    BEGIN
      DataTypeManagement.GetRecordRef(RecordVar,RecRef);
      if not RecRef.FIELDEXIST(FieldNumber) then
        ERROR(STRSUBSTNO(FieldDoesNotExistErr,FieldNumber));
    END;

    LOCAL PROCEDURE TestInitialized@8();
    VAR
      Initialized@1000 : Boolean;
    BEGIN
      Initialized := true;
      if not AzureMLConnector.IsInitialized then
        Initialized := false;

      TestFeatureLabelInitialized;

      if not Initialized then
        ERROR(NotInitializedErr);
    END;

    LOCAL PROCEDURE TestFeatureLabelInitialized@40();
    VAR
      Initialized@1000 : Boolean;
    BEGIN
      Initialized := true;
      if FORMAT(RecordVar) = '' then
        Initialized := false;
      if LabelNo = 0 then
        Initialized := false;
      if LastFeatureIndex = 0 then
        Initialized := false;
      if not Initialized then
        ERROR(NotInitializedErr);
    END;

    LOCAL PROCEDURE CreateInput@9();
    VAR
      DataTypeManagement@1001 : Codeunit "Data Type Management";
      RecRef@1003 : RecordRef;
      FieldRef@1006 : FieldRef;
      ColumnNo@1000 : Integer;
    BEGIN
      for ColumnNo := 1 to MaxNoFeatures do
        AzureMLConnector.AddInputColumnName(STRSUBSTNO('feature%1',ColumnNo));
      AzureMLConnector.AddInputColumnName('label');

      DataTypeManagement.GetRecordRef(RecordVar,RecRef);
      if RecRef.FINDSET then
        repeat
          AzureMLConnector.AddInputRow;
          for ColumnNo := 1 to MaxNoFeatures do begin
            if ColumnNo <= LastFeatureIndex then begin
              FieldRef := RecRef.FIELD(FeatureNumbers[ColumnNo]);
              if FORMAT(FieldRef.CLASS) = 'FlowField' then
                FieldRef.CALCFIELD;
              AzureMLConnector.AddInputValue(FORMAT(FieldRef.VALUE,0,9));
              AzureMLConnector.AddParameter(STRSUBSTNO('featuretype%1',ColumnNo),FORMAT(FieldRef.TYPE));
            end else
              AzureMLConnector.AddInputValue('');
          end;

          FieldRef := RecRef.FIELD(LabelNo);
          if FORMAT(FieldRef.CLASS) = 'FlowField' then
            FieldRef.CALCFIELD;
          AzureMLConnector.AddInputValue(FORMAT(FieldRef.VALUE,0,9));
          AzureMLConnector.AddParameter('labeltype',FORMAT(FieldRef.TYPE));
        until RecRef.NEXT = 0;
    END;

    PROCEDURE GetParameter@14(Name@1000 : Text) : Text;
    VAR
      ParameterValue@1001 : Text;
    BEGIN
      AzureMLConnector.GetParameter(Name,ParameterValue);
      exit(ParameterValue);
    END;

    PROCEDURE GetInput@3(RowNo@1000 : Integer;ColumnNo@1001 : Integer) : Text;
    VAR
      InputValue@1002 : Text;
    BEGIN
      AzureMLConnector.GetInput(RowNo,ColumnNo,InputValue);
      exit(InputValue);
    END;

    PROCEDURE GetInputLength@10() : Integer;
    VAR
      Length@1000 : Integer;
    BEGIN
      AzureMLConnector.GetInputLength(Length);
      exit(Length);
    END;

    LOCAL PROCEDURE GetLastDetailedError@28() : Text;
    VAR
      DetailedErrorTxt@1000 : Text;
      DetailedErrorStart@1001 : Integer;
    BEGIN
      DetailedErrorStart := STRPOS(GETLASTERRORTEXT,ErrorResponseTxt);
      if DetailedErrorStart > 0 then begin
        DetailedErrorTxt := COPYSTR(GETLASTERRORTEXT,STRPOS(GETLASTERRORTEXT,ErrorResponseTxt));
        DetailedErrorTxt := COPYSTR(DetailedErrorTxt,1,STRPOS(DetailedErrorTxt,'\') - 1);
        exit('\' + DetailedErrorErr + DetailedErrorTxt);
      end;
      exit('\' + DetailedErrorErr + GETLASTERRORTEXT);
    END;

    LOCAL PROCEDURE LoadPrediction@30();
    VAR
      DataTypeManagement@1002 : Codeunit "Data Type Management";
      ConfigValidateManagement@1001 : Codeunit "Config. Validate Management";
      RecRef@1003 : RecordRef;
      FieldRef@1000 : FieldRef;
      LabelColumnNumber@1005 : Integer;
      RowNumber@1004 : Integer;
      Label@1006 : Text[250];
      OutputValue@1007 : Text;
    BEGIN
      RowNumber := 1;
      LabelColumnNumber := MaxNoFeatures + 1;
      DataTypeManagement.GetRecordRef(RecordVar,RecRef);
      if RecRef.FINDSET then
        repeat
          AzureMLConnector.GetOutput(RowNumber,LabelColumnNumber,OutputValue);
          Label := COPYSTR(OutputValue,1,MAXSTRLEN(Label));
          FieldRef := RecRef.FIELD(LabelNo);

          ConfigValidateManagement.EvaluateValueWithValidate(FieldRef,Label,true);
          RecRef.MODIFY(true);
          RowNumber := RowNumber + 1;
        until RecRef.NEXT = 0;
      if RecRef.FINDSET then
        RecRef.SETTABLE(RecordVar);
    END;

    [External]
    PROCEDURE MaxNoFeatures@62() : Integer;
    BEGIN
      exit(ARRAYLEN(FeatureNumbers));
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeTrain@6(VAR Model@1001 : Text;VAR Quality@1000 : Decimal;VAR CallAzureEndPoint@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePredict@11(VAR RecordVariant@1001 : Variant;VAR CallAzureEndPoint@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeEvaluate@67(Model@1003 : Text;VAR Quality@1002 : Decimal;VAR RecordVariant@1001 : Variant;VAR CallAzureEndPoint@1000 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

