OBJECT Page 2310 BC O365 Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=161406.907T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=" ";
    DeleteAllowed=false;
    SourceTable="Sales Header";
    DataCaptionExpr=GetInvTypeCaption;
    SourceTableView=WHERE("Document Type"=CONST(Invoice));
    PageType=Document;
    RefreshOnActivate=true;
    OnInit=BEGIN
             IsCanada := O365SalesInvoiceMgmt.IsCountryCanada;
           END;

    OnOpenPage=VAR
                 O365SalesInitialSetup@6115 : Record "O365 Sales Initial Setup";
                 CalendarEventMangement@1000 : Codeunit "Calendar Event Mangement";
                 NoFilter@1001 : Text;
               BEGIN
                 IsUsingVAT := O365SalesInitialSetup.IsUsingVAT;
                 CalendarEventMangement.CreateCalendarEventForCodeunit(TODAY,SyncBusinessInfoTxt,CODEUNIT::"Graph Sync. - Business Profile");
                 NoFilter := GETFILTER("No.");
                 if STRPOS(UPPERCASE(NoFilter),'TESTINVOICE') <> 0 then begin
                   TestInvoiceVisible := true;
                   SETFILTER("No.",'');
                 end;
               END;

    OnNewRecord=BEGIN
                  CustomerName := '';
                  CustomerEmail := '';
                  WorkDescription := '';
                  "Document Type" := "Document Type"::Invoice;
                  IsNew := true;

                  SetDefaultPaymentServices;
                END;

    OnDeleteRecord=VAR
                     CustInvoiceDisc@1000 : Record "Cust. Invoice Disc.";
                   BEGIN
                     ForceExit := true;

                     if CustInvoiceDisc.GET("Invoice Disc. Code","Currency Code",0) then
                       CustInvoiceDisc.DELETE;
                   END;

    OnQueryClosePage=BEGIN
                       exit(O365SalesInvoiceMgmt.OnQueryCloseForSalesHeader(Rec,ForceExit,CustomerName));
                     END;

    OnAfterGetCurrRecord=BEGIN
                           // Tasks shared with estimates (PAG2341)
                           O365SalesInvoiceMgmt.OnAfterGetSalesHeaderRecord(Rec,CurrencyFormat,TaxAreaDescription);
                           O365SalesInvoiceMgmt.UpdateNoOfAttachmentsLabel(O365SalesAttachmentMgt.GetNoOfAttachments(Rec),NoOfAttachmentsValueTxt);
                           GetTotalTaxRate;
                           O365SalesInvoiceMgmt.NotifyTaxSetupNeeded(Rec);
                           WorkDescription := GetWorkDescription;
                           CurrPageEditable := CurrPage.EDITABLE;

                           O365SalesInvoiceMgmt.UpdateCustomerFields(Rec,CustomerName,CustomerEmail,IsCompanyContact);
                           O365SalesInvoiceMgmt.UpdateAddress(Rec,FullAddress);
                           CountryRegionCode := "Sell-to Country/Region Code";

                           O365SalesInvoiceMgmt.CalcInvoiceDiscountAmount(Rec,SubTotalAmount,DiscountTxt,InvoiceDiscountAmount,InvDiscAmountVisible);
                           O365SalesInvoiceMgmt.NotifyOrWarnAboutCoupons(Rec);
                           O365SalesInvoiceMgmt.GetCouponCodesAndCouponsExists(Rec,CouponCodes,CouponsExistsForCustomer);

                           IsCustomerBlocked := O365SalesInvoiceMgmt.IsCustomerBlocked("Sell-to Customer No.");
                           if IsCustomerBlocked then
                             O365SalesInvoiceMgmt.SendCustomerHasBeenBlockedNotification("Sell-to Customer Name");

                           // Invoice specific tasks
                           if IsNew and TestInvoiceVisible then
                             VALIDATE(IsTest,true);
                           if "Tax Liable" then
                             HasUserChangedTaxLiable := true;
                           TestInvoiceVisible := IsTest;

                           if TestInvoiceVisible then
                             NextInvoiceNo := "No."
                           else
                             if SalesReceivablesSetup.GET then
                               if SalesReceivablesSetup."Posted Invoice Nos." <> '' then
                                 NextInvoiceNo := NoSeriesManagement.ClearStateAndGetNextNo(SalesReceivablesSetup."Posted Invoice Nos.");

                           O365SalesInvoiceMgmt.GetPaymentInstructionsName("Payment Instructions Id",PaymentInstructionsName);
                         END;

    ActionList=ACTIONS
    {
      { 22      ;    ;ActionContainer;
                      Name=Invoice;
                      CaptionML=ENU=Invoice;
                      ActionContainerType=ActionItems }
      { 43      ;1   ;Action    ;
                      Name=SendTest;
                      CaptionML=ENU=Send test invoice;
                      ToolTipML=ENU=Send the test invoice.;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Promoted=true;
                      Visible=TestInvoiceVisible AND NOT IsCustomerBlocked;
                      Enabled=CustomerName <> '';
                      PromotedIsBig=true;
                      Image=Invoicing-MDL-Send;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=VAR
                                 O365SendResendInvoice@1001 : Codeunit "O365 Send + Resend Invoice";
                               BEGIN
                                 if O365SendResendInvoice.SendTestInvoiceFromBC(Rec) then begin
                                   ForceExit := true;
                                   CurrPage.CLOSE;
                                 end;
                               END;
                                }
      { 23      ;1   ;Action    ;
                      Name=Post;
                      ShortCutKey=Ctrl+Right;
                      CaptionML=ENU=Send;
                      ToolTipML=ENU=Finalize and send the invoice.;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Promoted=true;
                      Visible=NOT TestInvoiceVisible AND NOT IsCustomerBlocked;
                      Enabled=CustomerName <> '';
                      PromotedIsBig=true;
                      Image=Invoicing-MDL-Send;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=VAR
                                 O365SendResendInvoice@1001 : Codeunit "O365 Send + Resend Invoice";
                               BEGIN
                                 if O365SendResendInvoice.SendSalesInvoiceOrQuoteFromBC(Rec) then begin
                                   ForceExit := true;
                                   CurrPage.CLOSE;
                                 end;
                               END;
                                }
      { 3       ;1   ;Action    ;
                      Name=ViewPdf;
                      CaptionML=ENU=Preview;
                      ToolTipML=ENU=View the preview of the invoice before sending.;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Promoted=true;
                      Visible=NOT IsCustomerBlocked;
                      Enabled=CustomerName <> '';
                      Image=Invoicing-MDL-PreviewDoc;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ReportSelections@1001 : Record "Report Selections";
                                 DocumentPath@1000 : Text[250];
                               BEGIN
                                 SETRECFILTER;
                                 LOCKTABLE;
                                 FIND;
                                 ReportSelections.GetPdfReport(DocumentPath,ReportSelections.Usage::"S.Invoice Draft",Rec,"Sell-to Customer No.");
                                 DOWNLOAD(DocumentPath,'','','',DocumentPath);
                                 FIND;
                               END;
                                }
      { 4       ;1   ;Action    ;
                      Name=DeleteAction;
                      CaptionML=ENU=Discard;
                      ToolTipML=ENU=Discards the draft invoice;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Promoted=true;
                      Image=Invoicing-MDL-Delete;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 CustInvoiceDisc@1000 : Record "Cust. Invoice Disc.";
                               BEGIN
                                 if not FIND then begin
                                   CurrPage.CLOSE;
                                   exit;
                                 end;

                                 if not CONFIRM(DeleteQst) then
                                   exit;

                                 ForceExit := true;

                                 if CustInvoiceDisc.GET("Invoice Disc. Code","Currency Code",0) then
                                   CustInvoiceDisc.DELETE;
                                 DELETE(true);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Control1;
                ContainerType=ContentArea }

    { 25  ;1   ;Group     ;
                Name="Sell to";
                CaptionML=ENU=Sell to;
                GroupType=Group }

    { 9   ;2   ;Field     ;
                Name="Sell-to Customer Name";
                CaptionML=ENU=Customer Name;
                ToolTipML=ENU=Specifies the customer's name.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Sell-to Customer Name";
                Importance=Promoted;
                LookupPageID="BC O365 Contact Lookup";
                OnValidate=BEGIN
                             O365SalesInvoiceMgmt.ValidateCustomerName(Rec,CustomerName,CustomerEmail);
                             O365SalesInvoiceMgmt.UpdateAddress(Rec,FullAddress);
                             O365SalesInvoiceMgmt.CustomerChanged;
                             CurrPage.UPDATE(true);
                             if IsTest and not HasUserChangedTaxLiable then begin
                               VALIDATE("Tax Liable",false);
                               MODIFY(true);
                             end;
                           END;

                ImplicitType=Text50;
                ShowMandatory=TRUE;
                QuickEntry=FALSE }

    { 18  ;2   ;Field     ;
                Name=CustomerEmail;
                ExtendedDatatype=E-Mail;
                CaptionML=ENU=Email Address;
                ToolTipML=ENU=Specifies the customer's email address.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=CustomerEmail;
                Editable=CurrPageEditable AND (CustomerName <> '');
                OnValidate=BEGIN
                             O365SalesInvoiceMgmt.ValidateCustomerEmail(Rec,CustomerEmail);
                           END;

                ImplicitType=Text80 }

    { 24  ;2   ;Group     ;
                Name=Control24;
                GroupType=Group }

    { 16  ;3   ;Field     ;
                Name=ViewContactCard;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=ViewContactDetailsLbl;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              O365SalesInvoiceMgmt.EditCustomerCardFromSalesHeader(Rec,FullAddress);
                              CountryRegionCode := "Sell-to Country/Region Code";
                            END;

                ImplicitType=TextConst;
                ShowCaption=false }

    { 11  ;2   ;Group     ;
                Name=Control11;
                GroupType=Group }

    { 15  ;3   ;Field     ;
                Name="Sell-to Address";
                CaptionML=ENU=Address;
                ToolTipML=ENU=Specifies the address where the customer is located.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Sell-to Address";
                Editable=CustomerName <> '';
                OnValidate=BEGIN
                             O365SalesInvoiceMgmt.ValidateCustomerAddress("Sell-to Address","Sell-to Customer No.");
                             O365SalesInvoiceMgmt.UpdateAddress(Rec,FullAddress);
                           END;

                ImplicitType=Text50 }

    { 12  ;3   ;Field     ;
                Name="Sell-to Address 2";
                CaptionML=ENU=Address 2;
                ToolTipML=ENU=Specifies additional address information.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Sell-to Address 2";
                Editable=CustomerName <> '';
                OnValidate=BEGIN
                             O365SalesInvoiceMgmt.ValidateCustomerAddress2("Sell-to Address 2","Sell-to Customer No.");
                             O365SalesInvoiceMgmt.UpdateAddress(Rec,FullAddress);
                           END;

                ImplicitType=Text50 }

    { 2   ;3   ;Field     ;
                Name="Sell-to City";
                Lookup=false;
                CaptionML=ENU=City;
                ToolTipML=ENU=Specifies the address city.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Sell-to City";
                Editable=CustomerName <> '';
                OnValidate=BEGIN
                             O365SalesInvoiceMgmt.ValidateCustomerCity("Sell-to City","Sell-to Customer No.");
                             O365SalesInvoiceMgmt.UpdateAddress(Rec,FullAddress);
                           END;

                ImplicitType=Text30 }

    { 5   ;3   ;Field     ;
                Name="Sell-to Post Code";
                Lookup=false;
                CaptionML=ENU=ZIP Code;
                ToolTipML=ENU=Specifies the ZIP Code.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Sell-to Post Code";
                Editable=CustomerName <> '';
                OnValidate=BEGIN
                             O365SalesInvoiceMgmt.ValidateCustomerPostCode("Sell-to Post Code","Sell-to Customer No.");
                             O365SalesInvoiceMgmt.UpdateAddress(Rec,FullAddress);
                           END;

                ImplicitType=Code20 }

    { 8   ;3   ;Field     ;
                Name="Sell-to County";
                Lookup=false;
                CaptionML=ENU=State;
                ToolTipML=ENU=Specifies the address state.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Sell-to County";
                Editable=CustomerName <> '';
                OnValidate=BEGIN
                             O365SalesInvoiceMgmt.ValidateCustomerCounty("Sell-to County","Sell-to Customer No.");
                             O365SalesInvoiceMgmt.UpdateAddress(Rec,FullAddress);
                           END;

                ImplicitType=Text30 }

    { 33  ;3   ;Field     ;
                Name=CountryRegionCode;
                Lookup=true;
                CaptionML=ENU=Country/Region Code;
                ToolTipML=ENU=Specifies the address country/region.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=CountryRegionCode;
                TableRelation="Country/Region";
                Editable=CustomerName <> '';
                LookupPageID="BC O365 Country/Region List";
                OnValidate=BEGIN
                             CountryRegionCode := O365SalesInvoiceMgmt.FindCountryCodeFromInput(CountryRegionCode);
                             "Sell-to Country/Region Code" := CountryRegionCode;

                             O365SalesInvoiceMgmt.ValidateCustomerCountryRegion("Sell-to Country/Region Code","Sell-to Customer No.");
                             O365SalesInvoiceMgmt.UpdateAddress(Rec,FullAddress);
                           END;

                ImplicitType=Code10 }

    { 20  ;1   ;Group     ;
                Name="Invoice Details";
                CaptionML=ENU=Invoice Details;
                GroupType=Group }

    { 44  ;2   ;Field     ;
                Name=NextInvoiceNo;
                CaptionML=ENU=Expected Invoice No.;
                ToolTipML=ENU=Specifies the number that your next sent invoice will get.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=NextInvoiceNo;
                Editable=FALSE;
                ImplicitType=Code20 }

    { 48  ;2   ;Field     ;
                Name="Payment Terms Code";
                CaptionML=ENU=Payment Terms;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Payment Terms Code";
                Enabled=CustomerName <> '';
                Editable=FALSE;
                OnAssistEdit=VAR
                               TempO365PaymentTerms@1000 : TEMPORARY Record "O365 Payment Terms";
                             BEGIN
                               TempO365PaymentTerms.RefreshRecords;
                               if TempO365PaymentTerms.GET("Payment Terms Code") then;
                               if PAGE.RUNMODAL(PAGE::"O365 Payment Terms List",TempO365PaymentTerms) = ACTION::LookupOK then
                                 VALIDATE("Payment Terms Code",TempO365PaymentTerms.Code);
                             END;

                ImplicitType=Code10 }

    { 89  ;2   ;Field     ;
                Name=PaymentInstructionsName;
                CaptionML=ENU=Payment Instructions;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=PaymentInstructionsName;
                Enabled=CustomerName <> '';
                Editable=FALSE;
                OnAssistEdit=VAR
                               O365PaymentInstructions@1000 : Record "O365 Payment Instructions";
                             BEGIN
                               if O365PaymentInstructions.GET("Payment Instructions Id") then;

                               if PAGE.RUNMODAL(PAGE::"BC O365 Payment Instr. List",O365PaymentInstructions) = ACTION::LookupOK then begin
                                 VALIDATE("Payment Instructions Id",O365PaymentInstructions.Id);
                                 SENDTRACETAG('00001SB',PaymentInstrCategoryLbl,
                                   VERBOSITY::Normal,PaymentInstrChangedTelemetryTxt,DATACLASSIFICATION::SystemMetadata);
                                 O365SalesInvoiceMgmt.GetPaymentInstructionsName("Payment Instructions Id",PaymentInstructionsName);
                               end;
                             END;

                ImplicitType=Text20 }

    { 26  ;2   ;Field     ;
                Name="Due Date";
                ToolTipML=ENU=Specifies when the sales invoice must be paid.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Due Date";
                Editable=CustomerName <> '';
                OnValidate=BEGIN
                             if "Due Date" < "Document Date" then
                               VALIDATE("Due Date","Document Date");
                           END;

                ImplicitType=Date }

    { 6   ;2   ;Field     ;
                Name="Document Date";
                CaptionML=ENU=Invoice Date;
                ToolTipML=ENU=Specifies when the sales invoice was created.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Document Date";
                Editable=CustomerName <> '';
                OnValidate=VAR
                             NotificationLifecycleMgt@1001 : Codeunit "Notification Lifecycle Mgt.";
                             PastNotification@1000 : Notification;
                           BEGIN
                             VALIDATE("Posting Date","Document Date");

                             if "Document Date" < WORKDATE then begin
                               PastNotification.ID := CREATEGUID;
                               PastNotification.MESSAGE(DocumentDatePastMsg);
                               PastNotification.SCOPE(NOTIFICATIONSCOPE::LocalScope);
                               NotificationLifecycleMgt.SendNotification(PastNotification,RECORDID);
                             end;
                             O365SalesInvoiceMgmt.InvoiceDateChanged(Rec);
                           END;

                ImplicitType=Date }

    { 19  ;2   ;Field     ;
                Name="Tax Liable";
                CaptionML=ENU=Customer is tax liable;
                ToolTipML=ENU=Specifies if the sales invoice contains sales tax.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Tax Liable";
                Visible=NOT IsUsingVAT;
                Editable=CustomerName <> '';
                OnValidate=BEGIN
                             if IsTest and "Tax Liable" then begin
                               if not O365TaxSettingsManagement.IsTaxSet("Tax Area Code") then begin
                                 MODIFY(true);
                                 COMMIT;
                                 OpenTaxSettingCardPage;
                               end;
                               HasUserChangedTaxLiable := true;
                             end;
                           END;

                ImplicitType=Boolean }

    { 17  ;2   ;Field     ;
                Name=TaxAreaDescription;
                CaptionML=ENU=Customer tax rate;
                ToolTipML=ENU=Specifies the customer's tax area.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                NotBlank=true;
                SourceExpr=TaxAreaDescription;
                Visible=NOT IsUsingVAT;
                Enabled=CustomerName <> '';
                Editable=FALSE;
                OnDrillDown=VAR
                              TaxArea@1020000 : Record "Tax Area";
                            BEGIN
                              if not TaxArea.GET("Tax Area Code") then
                                exit;

                              PAGE.RUNMODAL(PAGE::"BC O365 Tax Settings Card",TaxArea);
                              O365SalesInvoiceMgmt.RecallTaxNotificationIfTaxSetup("Tax Area Code");
                            END;

                OnAssistEdit=VAR
                               TaxArea@1000 : Record "Tax Area";
                             BEGIN
                               if PAGE.RUNMODAL(PAGE::"O365 Tax Area List",TaxArea) = ACTION::LookupOK then begin
                                 VALIDATE("Tax Area Code",TaxArea.Code);
                                 TaxAreaDescription := TaxArea.GetDescriptionInCurrentLanguage;
                                 O365SalesInvoiceMgmt.RecallTaxNotificationIfTaxSetup("Tax Area Code");
                                 CurrPage.UPDATE;
                               end;
                             END;

                ImplicitType=Text50;
                QuickEntry=FALSE }

    { 1020000;2;Field     ;
                Name=TotalTaxRate;
                CaptionML=ENU=Tax %;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=TotalTaxRate;
                Visible=IsCanada;
                Enabled=CustomerName <> '';
                Editable=FALSE;
                ImplicitType=Text }

    { 37  ;2   ;Field     ;
                Name="VAT Registration No.";
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="VAT Registration No.";
                Visible=IsUsingVAT;
                Editable=(IsUsingVAT AND IsCompanyContact);
                ImplicitType=Text20 }

    { 14  ;1   ;Part      ;
                Name=Lines;
                CaptionML=ENU=Line Items;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SubPageLink="Document Type"=FIELD("Document Type"),
                            "Document No."=FIELD("No.");
                PagePartID="BC O365 Sales Inv. Line Subp.";
                Enabled=CustomerName <> '';
                Editable=CustomerName <> '';
                PartType=Page }

    { 40  ;1   ;Group     ;
                Name=Totals;
                CaptionML=ENU=Totals;
                Visible=NOT InvDiscAmountVisible;
                GroupType=Group }

    { 39  ;2   ;Group     ;
                Name=Control39;
                GroupType=Group }

    { 35  ;3   ;Field     ;
                Name=Amount;
                Lookup=false;
                DrillDown=false;
                CaptionML=ENU=Net Total;
                ToolTipML=ENU=Specifies the total amount on the sales invoice excluding tax.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Amount;
                AutoFormatType=10;
                AutoFormatExpr=CurrencyFormat;
                ImplicitType=Decimal }

    { 34  ;3   ;Field     ;
                Name=AmountInclVAT;
                Lookup=false;
                DrillDown=false;
                CaptionML=ENU=Total Including tax;
                ToolTipML=ENU=Specifies the total amount on the sales invoice including tax.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Amount Including VAT";
                AutoFormatType=10;
                AutoFormatExpr=CurrencyFormat;
                Importance=Promoted;
                Style=Strong;
                StyleExpr=TRUE;
                ImplicitType=Decimal }

    { 38  ;3   ;Group     ;
                Name=Control38;
                Visible=CouponsExistsForCustomer;
                GroupType=Group }

    { 42  ;4   ;Field     ;
                Name=CouponCodes;
                CaptionML=ENU=Coupons;
                ToolTipML=ENU=Specifies the coupons that are used on this invoice.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=CouponCodes;
                Editable=FALSE;
                OnDrillDown=VAR
                              DisplayCoupons@1000 : Codeunit "Display Coupons";
                            BEGIN
                              DisplayCoupons.ShowCouponsForDocument("Document Type","No.");
                            END;

                ImplicitType=Text }

    { 36  ;3   ;Field     ;
                Name=DiscountLink;
                DrillDown=true;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=DiscountTxt;
                Enabled=CustomerName <> '';
                Editable=FALSE;
                OnDrillDown=BEGIN
                              if PAGE.RUNMODAL(PAGE::"O365 Sales Invoice Discount",Rec) = ACTION::LookupOK then
                                CurrPage.UPDATE;
                            END;

                ImplicitType=Text;
                ShowCaption=false }

    { 30  ;1   ;Group     ;
                Name=Control30;
                CaptionML=ENU=Totals;
                Visible=InvDiscAmountVisible;
                GroupType=Group }

    { 32  ;2   ;Group     ;
                Name=Control32;
                GroupType=Group }

    { 31  ;3   ;Field     ;
                Name=SubTotalAmount;
                CaptionML=ENU=Subtotal;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=SubTotalAmount;
                AutoFormatType=10;
                AutoFormatExpr=CurrencyFormat;
                Importance=Promoted;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 29  ;3   ;Field     ;
                Name=InvoiceDiscount;
                CaptionML=ENU=Invoice Discount;
                ToolTipML=ENU=Specifies the invoice discount amount. To edit the invoice discount, click on the amount.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=-InvoiceDiscountAmount;
                AutoFormatType=10;
                AutoFormatExpr=CurrencyFormat;
                CaptionClass=GetInvDiscountCaption;
                Importance=Promoted;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              if PAGE.RUNMODAL(PAGE::"O365 Sales Invoice Discount",Rec) = ACTION::LookupOK then
                                CurrPage.UPDATE;
                            END;
                             }

    { 28  ;3   ;Field     ;
                Name=Amount2;
                Lookup=false;
                DrillDown=false;
                CaptionML=ENU=Net Total;
                ToolTipML=ENU=Specifies the total amount on the sales invoice excluding Tax.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Amount;
                AutoFormatType=10;
                AutoFormatExpr=CurrencyFormat;
                ImplicitType=Decimal }

    { 21  ;3   ;Field     ;
                Name=AmountInclVAT2;
                Lookup=false;
                DrillDown=false;
                CaptionML=ENU=Total Including Tax;
                ToolTipML=ENU=Specifies the total amount on the sales invoice including Tax.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Amount Including VAT";
                AutoFormatType=10;
                AutoFormatExpr=CurrencyFormat;
                Importance=Promoted;
                Style=Strong;
                StyleExpr=TRUE;
                ImplicitType=Decimal }

    { 10  ;3   ;Group     ;
                Name=Control10;
                Visible=CouponsExistsForCustomer;
                GroupType=Group }

    { 41  ;4   ;Field     ;
                Name=CouponCodes2;
                CaptionML=ENU=Coupons;
                ToolTipML=ENU=Specifies the coupons that are used on this invoice.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=CouponCodes;
                Editable=FALSE;
                OnDrillDown=VAR
                              DisplayCoupons@1000 : Codeunit "Display Coupons";
                            BEGIN
                              DisplayCoupons.ShowCouponsForDocument("Document Type","No.");
                            END;

                ImplicitType=Text }

    { 7   ;1   ;Group     ;
                Name="Note and attachments";
                CaptionML=ENU=Note and attachments;
                GroupType=Group }

    { 27  ;2   ;Field     ;
                Name=WorkDescription;
                CaptionML=ENU=Note for customer;
                ToolTipML=ENU=Specifies the products or service being offered;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=WorkDescription;
                Editable=CurrPageEditable AND (CustomerName <> '');
                MultiLine=true;
                OnValidate=BEGIN
                             SetWorkDescription(WorkDescription);
                           END;

                ImplicitType=Text }

    { 13  ;2   ;Field     ;
                Name=NoOfAttachments;
                DrillDown=true;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=NoOfAttachmentsValueTxt;
                Enabled=CustomerName <> '';
                Editable=FALSE;
                OnDrillDown=BEGIN
                              O365SalesInvoiceMgmt.UpdateNoOfAttachmentsLabel(O365SalesAttachmentMgt.EditAttachments(Rec),NoOfAttachmentsValueTxt);
                              CurrPage.UPDATE(false);
                            END;

                ImplicitType=Text;
                ShowCaption=false }

  }
  CODE
  {
    VAR
      SalesReceivablesSetup@1027 : Record "Sales & Receivables Setup";
      O365SalesAttachmentMgt@1006 : Codeunit "O365 Sales Attachment Mgt";
      O365SalesInvoiceMgmt@1023 : Codeunit "O365 Sales Invoice Mgmt";
      NoSeriesManagement@1028 : Codeunit NoSeriesManagement;
      O365TaxSettingsManagement@1020003 : Codeunit "O365 Tax Settings Management";
      CustomerName@1000 : Text[50];
      CustomerEmail@1004 : Text[80];
      WorkDescription@1002 : Text;
      FullAddress@1016 : Text;
      CurrPageEditable@1003 : Boolean;
      IsUsingVAT@6116 : Boolean;
      ForceExit@1012 : Boolean;
      NoOfAttachmentsValueTxt@1011 : Text;
      CurrencyFormat@1013 : Text;
      IsCompanyContact@1090 : Boolean;
      InvDiscAmountVisible@1024 : Boolean;
      InvoiceDiscountAmount@1001 : Decimal;
      CouponsExistsForCustomer@1014 : Boolean;
      SubTotalAmount@1017 : Decimal;
      DiscountTxt@1005 : Text;
      DeleteQst@1009 : TextConst 'ENU=Are you sure that you want to discard the invoice?';
      TaxAreaDescription@1018 : Text[50];
      SyncBusinessInfoTxt@1010 : TextConst 'ENU=Delta sync Business Information';
      DocumentDatePastMsg@1008 : TextConst 'ENU=Invoice date is in the past.';
      ViewContactDetailsLbl@1007 : TextConst 'ENU=Open contact details';
      TotalTaxRate@1020000 : Text;
      PercentTxt@1020001 : TextConst 'ENU=%';
      IsCanada@1020002 : Boolean;
      CouponCodes@1015 : Text;
      TestInvoiceVisible@1019 : Boolean;
      IsNew@1021 : Boolean;
      CountryRegionCode@1022 : Code[10];
      PaymentInstructionsName@1095 : Text[20];
      NextInvoiceNo@1026 : Code[20];
      TestInvTypeTxt@1025 : TextConst 'ENU=Test Invoice';
      DraftInvTypeTxt@1029 : TextConst 'ENU=Draft Invoice';
      IsCustomerBlocked@1031 : Boolean;
      PaymentInstrCategoryLbl@1020 : TextConst '@@@={LOCKED};ENU=AL Payment Instructions';
      PaymentInstrChangedTelemetryTxt@1030 : TextConst '@@@={LOCKED};ENU=Payment instructions were changed for an invoice.';
      HasUserChangedTaxLiable@1020004 : Boolean;

    PROCEDURE SuppressExitPrompt@5();
    BEGIN
      ForceExit := true;
    END;

    LOCAL PROCEDURE GetTotalTaxRate@1020001();
    VAR
      O365TaxSettingsManagement@1020000 : Codeunit "O365 Tax Settings Management";
    BEGIN
      if "Tax Area Code" <> '' then
        TotalTaxRate := FORMAT(O365TaxSettingsManagement.GetTotalTaxRate("Tax Area Code")) + PercentTxt
      else
        TotalTaxRate := '';
    END;

    LOCAL PROCEDURE GetInvDiscountCaption@8() : Text;
    BEGIN
      exit(O365SalesInvoiceMgmt.GetInvoiceDiscountCaption(ROUND("Invoice Discount Value",0.1)));
    END;

    LOCAL PROCEDURE OpenTaxSettingCardPage@1020004();
    VAR
      TaxArea@1020000 : Record "Tax Area";
    BEGIN
      if not TaxArea.GET("Tax Area Code") then
        exit;

      PAGE.RUNMODAL(PAGE::"BC O365 Tax Settings Card",TaxArea);
    END;

    LOCAL PROCEDURE GetInvTypeCaption@1() : Text;
    BEGIN
      if IsTest then
        exit(TestInvTypeTxt);
      exit(DraftInvTypeTxt);
    END;

    BEGIN
    END.
  }
}

