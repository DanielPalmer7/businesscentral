OBJECT Table 5331 CRM Integration Record
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160142.623T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=CRM Integration Record;
  }
  FIELDS
  {
    { 2   ;   ;CRM ID              ;GUID          ;OnValidate=BEGIN
                                                                CLEAR("Last Synch. CRM Job ID");
                                                                "Last Synch. CRM Modified On" := 0DT;
                                                                "Last Synch. CRM Result" := 0;
                                                                Skipped := false;
                                                              END;

                                                   CaptionML=ENU=CRM ID;
                                                   Description=An ID of a record in Microsoft Dynamics CRM }
    { 3   ;   ;Integration ID      ;GUID          ;TableRelation="Integration Record"."Integration ID";
                                                   OnValidate=BEGIN
                                                                CLEAR("Last Synch. Job ID");
                                                                "Last Synch. Modified On" := 0DT;
                                                                "Last Synch. Result" := 0;
                                                                Skipped := false;
                                                              END;

                                                   CaptionML=ENU=Integration ID }
    { 4   ;   ;Last Synch. Modified On;DateTime   ;CaptionML=ENU=Last Synch. Modified On }
    { 5   ;   ;Last Synch. CRM Modified On;DateTime;
                                                   CaptionML=ENU=Last Synch. CRM Modified On }
    { 6   ;   ;Table ID            ;Integer       ;FieldClass=Normal;
                                                   CaptionML=ENU=Table ID;
                                                   Editable=false }
    { 7   ;   ;Last Synch. Result  ;Option        ;CaptionML=ENU=Last Synch. Result;
                                                   OptionCaptionML=ENU=,Success,Failure;
                                                   OptionString=,Success,Failure }
    { 8   ;   ;Last Synch. CRM Result;Option      ;CaptionML=ENU=Last Synch. CRM Result;
                                                   OptionCaptionML=ENU=,Success,Failure;
                                                   OptionString=,Success,Failure }
    { 9   ;   ;Last Synch. Job ID  ;GUID          ;CaptionML=ENU=Last Synch. Job ID }
    { 10  ;   ;Last Synch. CRM Job ID;GUID        ;CaptionML=ENU=Last Synch. CRM Job ID }
    { 11  ;   ;Skipped             ;Boolean       ;CaptionML=ENU=Skipped;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"CRM ID","Integration ID"               ;Clustered=true }
    {    ;"Integration ID"                         }
    {    ;"Last Synch. Modified On","Integration ID" }
    {    ;"Last Synch. CRM Modified On","CRM ID"   }
    {    ;Skipped,"Table ID"                       }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      IntegrationRecordNotFoundErr@1000 : TextConst 'ENU=The integration record for entity %1 was not found.';
      CRMIdAlreadyMappedErr@1003 : TextConst '@@@="%1 ID of the record, %2 ID of the already mapped record, %3 = CRM product name";ENU=Cannot couple %1 to this %3 record, because the %3 record is already coupled to %2.';
      RecordIdAlreadyMappedErr@1004 : TextConst '@@@=%1 ID from the record, %2 ID of the already mapped record;ENU=Cannot couple the %2 record to %1, because %1 is already coupled to another %2 record.';
      CRMProductName@1001 : Codeunit "CRM Product Name";

    LOCAL PROCEDURE GetCRMIdFromRecRef@24(CRMRecordRef@1000 : RecordRef) : GUID;
    VAR
      CRMIdFieldRef@1003 : FieldRef;
      PrimaryKeyRef@1002 : KeyRef;
    BEGIN
      PrimaryKeyRef := CRMRecordRef.KEYINDEX(1);
      CRMIdFieldRef := PrimaryKeyRef.FIELDINDEX(1);
      exit(CRMIdFieldRef.VALUE);
    END;

    [External]
    PROCEDURE GetCRMRecordID@31(IntegrationTableID@1004 : Integer;VAR CRMRecID@1000 : RecordID) Found : Boolean;
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      Found := GetCRMRecordRef(IntegrationTableID,RecRef);
      CRMRecID := RecRef.RECORDID;
      RecRef.CLOSE;
    END;

    [External]
    PROCEDURE GetCRMRecordRef@33(IntegrationTableID@1004 : Integer;VAR RecRef@1000 : RecordRef) : Boolean;
    VAR
      FieldRef@1002 : FieldRef;
      KeyRef@1001 : KeyRef;
    BEGIN
      RecRef.OPEN(IntegrationTableID);
      KeyRef := RecRef.KEYINDEX(1);
      FieldRef := KeyRef.FIELDINDEX(1);
      FieldRef.SETRANGE("CRM ID");
      exit(RecRef.FINDFIRST);
    END;

    PROCEDURE GetLatestJobIDFilter@23() : Text;
    VAR
      IntegrationSynchJob@1000 : Record "Integration Synch. Job";
    BEGIN
      if ISNULLGUID("Last Synch. Job ID") and ISNULLGUID("Last Synch. CRM Job ID") then
        exit('');
      IntegrationSynchJob.SETFILTER(ID,'%1|%2',"Last Synch. Job ID","Last Synch. CRM Job ID");
      exit(IntegrationSynchJob.GETFILTER(ID));
    END;

    PROCEDURE GetLatestError@28(VAR IntegrationSynchJobErrors@1000 : Record "Integration Synch. Job Errors") : Boolean;
    BEGIN
      if not ISNULLGUID("Last Synch. CRM Job ID") then
        exit(GetErrorForJobID("Last Synch. CRM Job ID",IntegrationSynchJobErrors));
      if not ISNULLGUID("Last Synch. Job ID") then
        exit(GetErrorForJobID("Last Synch. Job ID",IntegrationSynchJobErrors))
    END;

    LOCAL PROCEDURE GetErrorForJobID@29(JobID@1000 : GUID;VAR IntegrationSynchJobErrors@1005 : Record "Integration Synch. Job Errors") : Boolean;
    VAR
      IntegrationRecord@1002 : Record "Integration Record";
      IntegrationSynchJob@1001 : Record "Integration Synch. Job";
      IntegrationTableMapping@1003 : Record "Integration Table Mapping";
      CRMRecId@1004 : RecordID;
    BEGIN
      IntegrationSynchJob.GET(JobID);
      case IntegrationSynchJob."Synch. Direction" of
        IntegrationSynchJob."Synch. Direction"::ToIntegrationTable:
          if IntegrationRecord.FindByIntegrationId("Integration ID") then
            exit(IntegrationSynchJob.GetErrorForRecordID(IntegrationRecord."Record ID",IntegrationSynchJobErrors));
        IntegrationSynchJob."Synch. Direction"::FromIntegrationTable:
          if IntegrationTableMapping.GET(IntegrationSynchJob."Integration Table Mapping Name") then
            if GetCRMRecordID(IntegrationTableMapping."Integration Table ID",CRMRecId) then
              exit(IntegrationSynchJob.GetErrorForRecordID(CRMRecId,IntegrationSynchJobErrors));
      end;
    END;

    PROCEDURE InsertRecord@25(CRMID@1000 : GUID;IntegrationRecord@1001 : Record "Integration Record");
    BEGIN
      RESET;
      INIT;
      "CRM ID" := CRMID;
      "Integration ID" := IntegrationRecord."Integration ID";
      "Table ID" := IntegrationRecord."Table ID";
      INSERT(true);
    END;

    [External]
    PROCEDURE IsCRMRecordRefCoupled@16(CRMRecordRef@1000 : RecordRef) : Boolean;
    BEGIN
      exit(FindByCRMID(GetCRMIdFromRecRef(CRMRecordRef)));
    END;

    [External]
    PROCEDURE IsIntegrationIdCoupled@18(IntegrationID@1000 : GUID) : Boolean;
    VAR
      CRMIntegrationRecord@1001 : Record "CRM Integration Record";
    BEGIN
      exit(FindRowFromIntegrationID(IntegrationID,CRMIntegrationRecord));
    END;

    [External]
    PROCEDURE IsRecordCoupled@5(DestinationRecordID@1001 : RecordID) : Boolean;
    VAR
      CRMId@1002 : GUID;
    BEGIN
      exit(FindIDFromRecordID(DestinationRecordID,CRMId));
    END;

    [External]
    PROCEDURE FindByCRMID@14(CRMID@1000 : GUID) : Boolean;
    BEGIN
      RESET;
      SETRANGE("CRM ID",CRMID);
      exit(FINDFIRST);
    END;

    [External]
    PROCEDURE FindValidByCRMID@30(CRMID@1000 : GUID) Found : Boolean;
    VAR
      IntegrationRecord@1002 : Record "Integration Record";
      RecRef@1001 : RecordRef;
    BEGIN
      CLEAR("CRM ID");
      RESET;
      SETRANGE("CRM ID",CRMID);
      if FINDFIRST then
        if IntegrationRecord.FindByIntegrationId("Integration ID") then
          Found := RecRef.GET(IntegrationRecord."Record ID");
    END;

    [External]
    PROCEDURE FindByRecordID@21(RecID@1000 : RecordID) : Boolean;
    VAR
      CRMIntegrationRecord@1001 : Record "CRM Integration Record";
    BEGIN
      if FindRowFromRecordID(RecID,CRMIntegrationRecord) then begin
        COPY(CRMIntegrationRecord);
        exit(true);
      end;
    END;

    [External]
    PROCEDURE FindValidByRecordID@32(RecID@1000 : RecordID;IntegrationTableID@1004 : Integer) Found : Boolean;
    VAR
      CRMIntegrationRecord@1001 : Record "CRM Integration Record";
      CRMRecId@1002 : RecordID;
    BEGIN
      CLEAR("CRM ID");
      if FindRowFromRecordID(RecID,CRMIntegrationRecord) then begin
        COPY(CRMIntegrationRecord);
        Found := GetCRMRecordID(IntegrationTableID,CRMRecId);
      end;
    END;

    [External]
    PROCEDURE FindRecordIDFromID@3(SourceCRMID@1001 : GUID;DestinationTableID@1004 : Integer;VAR DestinationRecordId@1002 : RecordID) : Boolean;
    VAR
      CRMIntegrationRecord@1003 : Record "CRM Integration Record";
      IntegrationRecord@1005 : Record "Integration Record";
    BEGIN
      if FindRowFromCRMID(SourceCRMID,DestinationTableID,CRMIntegrationRecord) then
        if IntegrationRecord.FindByIntegrationId(CRMIntegrationRecord."Integration ID") then begin
          DestinationRecordId := IntegrationRecord."Record ID";
          exit(true);
        end;
    END;

    [External]
    PROCEDURE FindIDFromRecordID@2(SourceRecordID@1001 : RecordID;VAR DestinationCRMID@1002 : GUID) : Boolean;
    VAR
      CRMIntegrationRecord@1004 : Record "CRM Integration Record";
    BEGIN
      if FindRowFromRecordID(SourceRecordID,CRMIntegrationRecord) then begin
        DestinationCRMID := CRMIntegrationRecord."CRM ID";
        exit(true);
      end;
    END;

    LOCAL PROCEDURE FindIntegrationIDFromCRMID@20(SourceCRMID@1002 : GUID;DestinationTableID@1004 : Integer;VAR DestinationIntegrationID@1001 : GUID) : Boolean;
    VAR
      CRMIntegrationRecord@1000 : Record "CRM Integration Record";
    BEGIN
      if FindRowFromCRMID(SourceCRMID,DestinationTableID,CRMIntegrationRecord) then begin
        DestinationIntegrationID := CRMIntegrationRecord."Integration ID";
        exit(true);
      end;
    END;

    [External]
    PROCEDURE CoupleCRMIDToRecordID@1(CRMID@1000 : GUID;RecordID@1001 : RecordID);
    VAR
      CRMIntegrationRecord@1003 : Record "CRM Integration Record";
      IntegrationRecord@1004 : Record "Integration Record";
      CRMIntegrationRecord2@1006 : Record "CRM Integration Record";
      ErrCRMID@1005 : GUID;
    BEGIN
      if not IntegrationRecord.FindByRecordId(RecordID) then
        ERROR(IntegrationRecordNotFoundErr,FORMAT(RecordID,0,1));

      // Find coupling between CRMID and TableNo
      if not FindRowFromCRMID(CRMID,RecordID.TABLENO,CRMIntegrationRecord) then
        // Find rogue coupling beteen CRMID and table 0
        if not FindRowFromCRMID(CRMID,0,CRMIntegrationRecord) then begin
          // Find other coupling to the record
          if CRMIntegrationRecord2.FindIDFromRecordID(RecordID,ErrCRMID) then
            ERROR(RecordIdAlreadyMappedErr,FORMAT(RecordID,0,1));

          CRMIntegrationRecord.InsertRecord(CRMID,IntegrationRecord);
          exit;
        end;

      // Update Integration ID
      if CRMIntegrationRecord."Integration ID" <> IntegrationRecord."Integration ID" then begin
        if CRMIntegrationRecord2.FindIDFromRecordID(RecordID,ErrCRMID) then
          ERROR(RecordIdAlreadyMappedErr,FORMAT(RecordID,0,1));
        CRMIntegrationRecord.SetNewIntegrationId(IntegrationRecord."Integration ID");
      end;
    END;

    [External]
    PROCEDURE CoupleRecordIdToCRMID@99(RecordID@1001 : RecordID;CRMID@1000 : GUID);
    VAR
      CRMIntegrationRecord@1003 : Record "CRM Integration Record";
      IntegrationRecord@1004 : Record "Integration Record";
      IntegrationManagement@1002 : Codeunit "Integration Management";
      RecRef@1005 : RecordRef;
      IntegrationID@1006 : GUID;
    BEGIN
      if not IntegrationRecord.FindByRecordId(RecordID) then begin
        RecRef.GET(RecordID);
        IntegrationID := IntegrationManagement.InsertUpdateIntegrationRecord(RecRef,CURRENTDATETIME);
        if ISNULLGUID(IntegrationID) then
          exit;
        IntegrationRecord.GET(IntegrationID);
      end;
      if not FindRowFromIntegrationID(IntegrationRecord."Integration ID",CRMIntegrationRecord) then begin
        AssertRecordIDCanBeCoupled(RecordID,CRMID);
        CRMIntegrationRecord.InsertRecord(CRMID,IntegrationRecord);
      end else
        if CRMIntegrationRecord."CRM ID" <> CRMID then begin
          AssertRecordIDCanBeCoupled(RecordID,CRMID);
          CRMIntegrationRecord.SetNewCRMId(CRMID);
        end;
    END;

    [External]
    PROCEDURE RemoveCouplingToRecord@15(RecordID@1000 : RecordID) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record "CRM Integration Record";
      IntegrationRecord@1001 : Record "Integration Record";
    BEGIN
      if not IntegrationRecord.FindByRecordId(RecordID) then
        ERROR(IntegrationRecordNotFoundErr,FORMAT(RecordID,0,1));

      if FindRowFromIntegrationID(IntegrationRecord."Integration ID",CRMIntegrationRecord) then begin
        COPY(CRMIntegrationRecord);
        CRMIntegrationRecord.DELETE(true);
        exit(true);
      end;
    END;

    [External]
    PROCEDURE RemoveCouplingToCRMID@13(CRMID@1000 : GUID;DestinationTableID@1003 : Integer) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record "CRM Integration Record";
    BEGIN
      if FindRowFromCRMID(CRMID,DestinationTableID,CRMIntegrationRecord) then begin
        COPY(CRMIntegrationRecord);
        CRMIntegrationRecord.DELETE(true);
        exit(true);
      end;
    END;

    [External]
    PROCEDURE SetNewCRMId@27(CRMId@1000 : GUID);
    BEGIN
      DELETE;
      VALIDATE("CRM ID",CRMId);
      INSERT;
    END;

    [External]
    PROCEDURE SetNewIntegrationId@34(IntegrationId@1000 : GUID);
    BEGIN
      DELETE;
      VALIDATE("Integration ID",IntegrationId);
      INSERT;
    END;

    [External]
    PROCEDURE AssertRecordIDCanBeCoupled@4(RecordID@1001 : RecordID;CRMID@1000 : GUID);
    VAR
      CRMIntegrationRecord@1003 : Record "CRM Integration Record";
      ErrRecordID@1004 : RecordID;
      ErrIntegrationID@1005 : GUID;
    BEGIN
      if FindIntegrationIDFromCRMID(CRMID,RecordID.TABLENO,ErrIntegrationID) then
        if not UncoupleCRMIDIfRecordDeleted(ErrIntegrationID) then begin
          CRMIntegrationRecord.FindRecordIDFromID(CRMID,RecordID.TABLENO,ErrRecordID);
          ERROR(CRMIdAlreadyMappedErr,FORMAT(RecordID,0,1),ErrRecordID,CRMProductName.SHORT);
        end;
    END;

    PROCEDURE SetLastSynchResultFailed@19(SourceRecRef@1004 : RecordRef;DirectionToIntTable@1002 : Boolean;JobId@1000 : GUID);
    VAR
      Found@1006 : Boolean;
    BEGIN
      if DirectionToIntTable then
        Found := FindByRecordID(SourceRecRef.RECORDID)
      else
        Found := FindByCRMID(GetCRMIdFromRecRef(SourceRecRef));
      if Found then begin
        if DirectionToIntTable then begin
          if (not Skipped) and ("Last Synch. CRM Result" = "Last Synch. CRM Result"::Failure) then
            Skipped := IsSameFailureRepeatedTwice(SourceRecRef,"Last Synch. CRM Job ID",JobId);
          "Last Synch. CRM Job ID" := JobId;
          "Last Synch. CRM Result" := "Last Synch. CRM Result"::Failure
        end else begin
          if (not Skipped) and ("Last Synch. Result" = "Last Synch. Result"::Failure) then
            Skipped := IsSameFailureRepeatedTwice(SourceRecRef,"Last Synch. Job ID",JobId);
          "Last Synch. Job ID" := JobId;
          "Last Synch. Result" := "Last Synch. Result"::Failure;
        end;
        MODIFY(true);
      end;
    END;

    [External]
    PROCEDURE SetLastSynchModifiedOns@8(SourceCRMID@1001 : GUID;DestinationTableID@1005 : Integer;CRMLastModifiedOn@1000 : DateTime;LastModifiedOn@1003 : DateTime;JobId@1002 : GUID;Direction@1006 : Option);
    VAR
      CRMIntegrationRecord@1004 : Record "CRM Integration Record";
      IntegrationTableMapping@1007 : Record "Integration Table Mapping";
    BEGIN
      if FindRowFromCRMID(SourceCRMID,DestinationTableID,CRMIntegrationRecord) then
        with CRMIntegrationRecord do begin
          case Direction of
            IntegrationTableMapping.Direction::FromIntegrationTable:
              begin
                "Last Synch. Job ID" := JobId;
                "Last Synch. Result" := "Last Synch. Result"::Success;
              end;
            IntegrationTableMapping.Direction::ToIntegrationTable:
              begin
                "Last Synch. CRM Job ID" := JobId;
                "Last Synch. CRM Result" := "Last Synch. CRM Result"::Success;
              end;
          end;
          "Last Synch. Modified On" := LastModifiedOn;
          "Last Synch. CRM Modified On" := CRMLastModifiedOn;
          MODIFY(true);
        end;
    END;

    [External]
    PROCEDURE SetLastSynchCRMModifiedOn@12(CRMID@1001 : GUID;DestinationTableID@1003 : Integer;CRMLastModifiedOn@1000 : DateTime);
    VAR
      CRMIntegrationRecord@1004 : Record "CRM Integration Record";
    BEGIN
      if FindRowFromCRMID(CRMID,DestinationTableID,CRMIntegrationRecord) then begin
        CRMIntegrationRecord."Last Synch. CRM Modified On" := CRMLastModifiedOn;
        CRMIntegrationRecord.MODIFY(true);
      end;
    END;

    LOCAL PROCEDURE IsSameFailureRepeatedTwice@26(RecRef@1003 : RecordRef;LastJobID@1002 : GUID;NewJobID@1001 : GUID) : Boolean;
    VAR
      IntegrationSynchJob@1000 : Record "Integration Synch. Job";
      IntegrationSynchJobErrors@1006 : Record "Integration Synch. Job Errors";
      LastError@1004 : Text;
      NewError@1005 : Text;
    BEGIN
      if ISNULLGUID(LastJobID) or ISNULLGUID(NewJobID) then
        exit(false);
      if IntegrationSynchJob.GET(LastJobID) then
        if IntegrationSynchJob.GetErrorForRecordID(RecRef.RECORDID,IntegrationSynchJobErrors) then
          LastError := IntegrationSynchJobErrors.Message;
      if IntegrationSynchJob.GET(NewJobID) then
        if IntegrationSynchJob.GetErrorForRecordID(RecRef.RECORDID,IntegrationSynchJobErrors) then
          NewError := IntegrationSynchJobErrors.Message;
      exit((LastError = NewError) and (NewError <> ''));
    END;

    [External]
    PROCEDURE IsModifiedAfterLastSynchonizedCRMRecord@6(CRMID@1000 : GUID;DestinationTableID@1004 : Integer;CurrentModifiedOn@1002 : DateTime) : Boolean;
    VAR
      CRMIntegrationRecord@1003 : Record "CRM Integration Record";
      TypeHelper@1001 : Codeunit "Type Helper";
    BEGIN
      if FindRowFromCRMID(CRMID,DestinationTableID,CRMIntegrationRecord) then
        exit(TypeHelper.CompareDateTime(CurrentModifiedOn,CRMIntegrationRecord."Last Synch. CRM Modified On") > 0);
    END;

    [External]
    PROCEDURE IsModifiedAfterLastSynchronizedRecord@7(RecordID@1001 : RecordID;CurrentModifiedOn@1000 : DateTime) : Boolean;
    VAR
      CRMIntegrationRecord@1003 : Record "CRM Integration Record";
      TypeHelper@1002 : Codeunit "Type Helper";
    BEGIN
      if FindRowFromRecordID(RecordID,CRMIntegrationRecord) then
        exit(TypeHelper.CompareDateTime(CurrentModifiedOn,CRMIntegrationRecord."Last Synch. Modified On") > 0);
    END;

    LOCAL PROCEDURE UncoupleCRMIDIfRecordDeleted@9(IntegrationID@1001 : GUID) : Boolean;
    VAR
      IntegrationRecord@1000 : Record "Integration Record";
      CRMIntegrationRecord@1003 : Record "CRM Integration Record";
    BEGIN
      IntegrationRecord.FindByIntegrationId(IntegrationID);
      if IntegrationRecord."Deleted On" <> 0DT then begin
        if FindRowFromIntegrationID(IntegrationID,CRMIntegrationRecord) then
          CRMIntegrationRecord.DELETE;
        exit(true);
      end;
    END;

    [External]
    PROCEDURE DeleteIfRecordDeleted@17(CRMID@1001 : GUID;DestinationTableID@1002 : Integer) : Boolean;
    VAR
      IntegrationID@1004 : GUID;
    BEGIN
      if FindIntegrationIDFromCRMID(CRMID,DestinationTableID,IntegrationID) then
        exit(UncoupleCRMIDIfRecordDeleted(IntegrationID));
    END;

    LOCAL PROCEDURE FindRowFromRecordID@10(SourceRecordID@1000 : RecordID;VAR CRMIntegrationRecord@1001 : Record "CRM Integration Record") : Boolean;
    VAR
      IntegrationRecord@1002 : Record "Integration Record";
    BEGIN
      if IntegrationRecord.FindByRecordId(SourceRecordID) then
        exit(FindRowFromIntegrationID(IntegrationRecord."Integration ID",CRMIntegrationRecord));
    END;

    LOCAL PROCEDURE FindRowFromCRMID@11(CRMID@1001 : GUID;DestinationTableID@1003 : Integer;VAR CRMIntegrationRecord@1000 : Record "CRM Integration Record") : Boolean;
    BEGIN
      CRMIntegrationRecord.SETRANGE("CRM ID",CRMID);
      CRMIntegrationRecord.SETFILTER("Table ID",FORMAT(DestinationTableID));
      exit(CRMIntegrationRecord.FINDFIRST);
    END;

    LOCAL PROCEDURE FindRowFromIntegrationID@22(IntegrationID@1001 : GUID;VAR CRMIntegrationRecord@1000 : Record "CRM Integration Record") : Boolean;
    BEGIN
      CRMIntegrationRecord.SETCURRENTKEY("Integration ID");
      CRMIntegrationRecord.SETFILTER("Integration ID",IntegrationID);
      exit(CRMIntegrationRecord.FINDFIRST);
    END;

    BEGIN
    END.
  }
}

