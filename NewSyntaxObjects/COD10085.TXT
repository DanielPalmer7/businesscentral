OBJECT Codeunit 10085 A/P Magnetic Media Management
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160926.780T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            // Fill in the Codes used for 1099's
            CLEAR(Codes);

            Codes[1,1] := 'MISC-01';
            Codes[1,2] := 'MISC-02';
            Codes[1,3] := 'MISC-03';
            Codes[1,4] := 'MISC-04';
            Codes[1,5] := 'MISC-05';
            Codes[1,6] := 'MISC-06';
            Codes[1,7] := 'MISC-07';
            Codes[1,8] := 'MISC-08';
            Codes[1,9] := 'MISC-09';
            Codes[1,10] := 'MISC-10';
            Codes[1,13] := 'MISC-13';
            Codes[1,14] := 'MISC-14';
            Codes[1,15] := 'MISC-15-A';
            Codes[1,16] := 'MISC-15-B';
            Codes[1,17] := 'MISC-16';

            Codes[2,1] := 'DIV-01-A';
            Codes[2,2] := 'DIV-01-B';
            Codes[2,3] := 'DIV-02-A';
            Codes[2,4] := 'DIV-02-B';
            Codes[2,5] := 'DIV-02-C';
            Codes[2,6] := 'DIV-02-D';
            Codes[2,9] := 'DIV-03';
            Codes[2,10] := 'DIV-04';
            Codes[2,11] := 'DIV-05';
            Codes[2,12] := 'DIV-06';
            Codes[2,13] := 'DIV-07';
            Codes[2,14] := 'DIV-08';
            Codes[2,15] := 'DIV-09';
            Codes[2,16] := 'DIV-10';
            Codes[2,17] := 'DIV-11';

            Codes[3,1] := 'INT-01';
            Codes[3,2] := 'INT-02';
            Codes[3,3] := 'INT-03';
            Codes[3,4] := 'INT-04';
            Codes[3,5] := 'INT-05';
            Codes[3,6] := 'INT-06';
            Codes[3,8] := 'INT-08';
            Codes[3,9] := 'INT-09';
            Codes[3,10] := 'INT-10';
            Codes[3,11] := 'INT-11';
            Codes[3,12] := 'INT-12';
            Codes[3,13] := 'INT-13';
          END;

  }
  CODE
  {
    VAR
      Codes@1000 : ARRAY [3,30] OF Code[10];
      Amounts@1002 : ARRAY [3,30] OF Decimal;
      FormatAddress@1004 : Codeunit "Format Address";
      Totals@1005 : ARRAY [3,30] OF Decimal;
      FormBox@1006 : Record "IRS 1099 Form-Box";
      CodeNotSetupErr@1020000 : TextConst '@@@="%1 = 1099 Code";ENU=The 1099 code %1 has not been setup in the initialization.';
      Unknown1099CodeErr@1020001 : TextConst '@@@="%1 = Invoice Entry No., %2 = Vendor No., %3 = 1099 Code";ENU=Invoice %1 on vendor %2 has unknown 1099 code  %3.';

    [External]
    PROCEDURE GetAmt@4(Code@1000 : Code[10];i@1001 : Integer;EndLine@1002 : Integer) : Decimal;
    VAR
      j@1003 : Integer;
    BEGIN
      j := 1;
      while (Codes[i,j] <> Code) and (j <= EndLine) do
        j := j + 1;

      if (Codes[i,j] = Code) and (j <= EndLine) then
        exit(Amounts[i,j]);

      ERROR(CodeNotSetupErr,Code);
    END;

    [External]
    PROCEDURE UpdateLines@3(InvoiceEntry@1000 : Record "Vendor Ledger Entry";i@1001 : Integer;EndLine@1002 : Integer;Code@1003 : Code[10];Amount@1004 : Decimal) : Integer;
    VAR
      j@1005 : Integer;
    BEGIN
      j := 1;
      while (Codes[i,j] <> Code) and (j <= EndLine) do
        j := j + 1;

      if (Codes[i,j] = Code) and (j <= EndLine) then begin
        Amounts[i,j] := Amounts[i,j] + Amount;
        Totals[i,j] := Totals[i,j] + Amount;
      end else
        ERROR(Unknown1099CodeErr,InvoiceEntry."Entry No.",InvoiceEntry."Vendor No.",Code);
      exit(j); // returns code index found
    END;

    [External]
    PROCEDURE AnyAmount@5(i@1000 : Integer;EndLine@1001 : Integer) : Boolean;
    VAR
      j@1002 : Integer;
    BEGIN
      for j := 1 to EndLine do
        if FormBox.GET(Codes[i,j]) then begin
          if FormBox."Minimum Reportable" < 0.0 then
            if Amounts[i,j] <> 0.0 then begin
              Amounts[i,j] := -Amounts[i,j];
              exit(true);
            end;
          if FormBox."Minimum Reportable" >= 0.0 then
            if Amounts[i,j] <> 0 then begin
              if Amounts[i,j] >= FormBox."Minimum Reportable" then
                exit(true);
              Totals[i,j] := Totals[i,j] - Amounts[i,j];
              Amounts[i,j] := 0;
            end;
        end;
      exit(false);
    END;

    [External]
    PROCEDURE FormatMoneyAmount@9(Amount@1000 : Decimal;Length@1001 : Integer) : Text[250];
    VAR
      AmtStr@1002 : Text[32];
    BEGIN
      AmtStr := StripNonNumerics(FORMAT(ROUND(ABS(Amount) * 100,1)));

      // left zero-padding
      if Length - STRLEN(AmtStr) > 0 then
        AmtStr := '0000000000000000000' + AmtStr;
      AmtStr := DELSTR(AmtStr,1,STRLEN(AmtStr) - Length);
      exit(AmtStr);
    END;

    [External]
    PROCEDURE FormatAmount@2(Amount@1000 : Integer;Length@1001 : Integer) : Text[250];
    VAR
      AmtStr@1002 : Text[30];
    BEGIN
      AmtStr := FORMAT(Amount);

      // left zero-padding
      if Length - STRLEN(AmtStr) > 0 then
        AmtStr := '000000000000000000' + AmtStr;
      AmtStr := DELSTR(AmtStr,1,STRLEN(AmtStr) - Length);
      exit(AmtStr);
    END;

    [External]
    PROCEDURE StripNonNumerics@10(Text@1000 : Text[80]) : Text[250];
    BEGIN
      exit(DELCHR(Text,'=','-,. '));
    END;

    [External]
    PROCEDURE EditCompanyInfo@11(VAR CompInfo@1000 : Record "Company Information");
    BEGIN
      with CompInfo do
        "Federal ID No." := StripNonNumerics("Federal ID No.");
    END;

    [External]
    PROCEDURE SwitchZipCodeParts@13(VAR ZIP@1000 : Code[20]);
    BEGIN
      if STRLEN(ZIP) > 5 then
        ZIP := PADSTR(COPYSTR(ZIP,6),5) + COPYSTR(ZIP,1,5)
      else
        ZIP := '     ' + ZIP;
    END;

    [External]
    PROCEDURE FormatCompanyAddress@1(VAR CompanyInfo@1000 : Record "Company Information";VAR CompanyAddress@1001 : ARRAY [8] OF Text[30]);
    BEGIN
      with CompanyInfo do begin
        GET;
        FormatAddress.Company(CompanyAddress,CompanyInfo);
      end;
    END;

    [External]
    PROCEDURE BuildAddressLine@8(CompanyInfo@1000 : Record "Company Information") : Text[40];
    VAR
      "Address 3"@1001 : Text[40];
    BEGIN
      with CompanyInfo do begin
        // Format City/State/Zip address line
        if STRLEN(City + ', ' + County + '  ' + "Post Code") > MAXSTRLEN("Address 3") then
          "Address 3" := City
        else
          if (City <> '') and (County <> '') then
            "Address 3" := City + ', ' + County + '  ' + "Post Code"
          else
            "Address 3" := DELCHR(City + ' ' + County + ' ' + "Post Code",'<>');
      end;
      exit("Address 3");
    END;

    [External]
    PROCEDURE ClearAmts@6();
    BEGIN
      CLEAR(Amounts);
    END;

    [External]
    PROCEDURE AmtCodes@7(VAR CodeNos@1000 : Text[12];i@1001 : Integer;EndLine@1002 : Integer);
    VAR
      j@1003 : Integer;
    BEGIN
      CLEAR(CodeNos);

      case i of
        1:   // MISC
          for j := 1 to EndLine do
            if Amounts[i,j] <> 0.0 then
              case j of
                10:
                  CodeNos := INSSTR(CodeNos,'A',10); // Crop Insurance Proceeds
                13:
                  CodeNos := INSSTR(CodeNos,'B',11); // excess golden parachutes
                14:
                  CodeNos := INSSTR(CodeNos,'C',12); // gross legal proceeds
                15:
                  CodeNos := INSSTR(CodeNos,'D',13); // 409A deferral
                16:
                  CodeNos := INSSTR(CodeNos,'E',14); // 409A Income
                else
                  CodeNos := INSSTR(CodeNos,FORMAT(j),j);
              end;
        2: // DIV
          begin
            if EndLine > 1 then begin
              // special check for DIV complex amounts
              if GetTotalOrdinaryDividendsAmt <> 0 then
                CodeNos := INSSTR(CodeNos,FORMAT(1),1);
            end;
            AmtCodesDIVINT(CodeNos,i,2,EndLine);
          end;
        3: // INT
          AmtCodesDIVINT(CodeNos,i,1,EndLine);
      end;
    END;

    LOCAL PROCEDURE AmtCodesDIVINT@1020001(VAR CodeNos@1020000 : Text[12];FormType@1020001 : Integer;StartLine@1020004 : Integer;EndLine@1020002 : Integer);
    VAR
      j@1020003 : Integer;
    BEGIN
      for j := StartLine to EndLine do
        if Amounts[FormType,j] <> 0.0 then
          case j of
            10:
              CodeNos := INSSTR(CodeNos,'A',j); // FIT withheld / Market discount
            11:
              CodeNos := INSSTR(CodeNos,'B',j); // Investment expenses / Bond premium
            12:
              CodeNos := INSSTR(CodeNos,'C',j); // Foreign tax paid
            13:
              CodeNos := INSSTR(CodeNos,'D',j); // Bond premium on tax exempt bond
            14:
              CodeNos := INSSTR(CodeNos,'D',j); // Cash liquidation distributions
            15:
              CodeNos := INSSTR(CodeNos,'E',j); // Noncash liquidation distributions
            else
              CodeNos := INSSTR(CodeNos,FORMAT(j),j);
          end;
    END;

    [External]
    PROCEDURE GetTotal@12(Code@1000 : Code[10];i@1001 : Integer;EndLine@1002 : Integer) : Decimal;
    VAR
      j@1003 : Integer;
    BEGIN
      j := 1;
      while (Codes[i,j] <> Code) and (j <= EndLine) do
        j := j + 1;

      if (Codes[i,j] = Code) and (j <= EndLine) then
        exit(Totals[i,j]);

      ERROR(CodeNotSetupErr,Code);
    END;

    [External]
    PROCEDURE ClearTotals@14();
    BEGIN
      CLEAR(Totals);
    END;

    [External]
    PROCEDURE DirectSalesCheck@15(j@1000 : Integer) : Boolean;
    BEGIN
      if FormBox.GET(Codes[1,j]) then
        if Amounts[1,j] >= FormBox."Minimum Reportable" then
          exit(true)
        else
          exit(false);
    END;

    LOCAL PROCEDURE GetTotalOrdinaryDividendsAmt@1020000() : Decimal;
    BEGIN
      exit(Amounts[2,1] + Amounts[2,2] + Amounts[2,11]);
    END;

    BEGIN
    END.
  }
}

