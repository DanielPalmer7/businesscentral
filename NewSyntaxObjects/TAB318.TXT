OBJECT Table 318 Tax Area
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160108.690T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Description;
    OnInsert=BEGIN
               SetLastModifiedDateTime;
             END;

    OnModify=BEGIN
               SetLastModifiedDateTime;
             END;

    OnDelete=BEGIN
               if IsTaxAreaInUse then
                 ERROR(TaxAreaInUseErr);

               TaxAreaLine.SETRANGE("Tax Area",Code);
               TaxAreaLine.DELETEALL;
             END;

    OnRename=BEGIN
               SetLastModifiedDateTime;
             END;

    CaptionML=ENU=Tax Area;
    LookupPageID="Tax Area List";
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 2   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 10  ;   ;Last Modified Date Time;DateTime   ;CaptionML=ENU=Last Modified Date Time;
                                                   Editable=false }
    { 8000;   ;Id                  ;GUID          ;CaptionML=ENU=Id }
    { 10010;  ;Country/Region      ;Option        ;OnValidate=BEGIN
                                                                TaxAreaLine.SETRANGE("Tax Area",Code);
                                                                if TaxAreaLine.FIND('-') then begin
                                                                  repeat
                                                                    TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code");
                                                                    TESTFIELD("Country/Region",TaxJurisdiction."Country/Region");
                                                                  until TaxAreaLine.NEXT = 0;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Country/Region;
                                                   OptionCaptionML=ENU=US,CA;
                                                   OptionString=US,CA;
                                                   BlankZero=false }
    { 10011;  ;Round Tax           ;Option        ;CaptionML=ENU=Round Tax;
                                                   OptionCaptionML=ENU=To Nearest,Up,Down;
                                                   OptionString="To Nearest",Up,Down;
                                                   BlankZero=false }
    { 10012;  ;Use External Tax Engine;Boolean    ;CaptionML=ENU=Use External Tax Engine }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      TaxAreaLine@1020000 : Record "Tax Area Line";
      TaxJurisdiction@1020001 : Record "Tax Jurisdiction";
      TaxAreaInUseErr@1000 : TextConst 'ENU=You cannot delete this tax rate because it is used on one or more existing documents.';

    [External]
    PROCEDURE CreateTaxArea@1(NewTaxAreaCode@1000 : Code[20];City@1001 : Text[50];State@1002 : Text[50]);
    BEGIN
      INIT;
      Code := NewTaxAreaCode;
      Description := NewTaxAreaCode;
      if INSERT then;

      if City <> '' then
        CreateTaxAreaLine(Code,COPYSTR(City,1,10));
      if State <> '' then
        CreateTaxAreaLine(Code,COPYSTR(State,1,10));
      if (City = '') and (State = '') then
        CreateTaxAreaLine(Code,COPYSTR(NewTaxAreaCode,1,10));
    END;

    LOCAL PROCEDURE CreateTaxAreaLine@4(NewTaxArea@1000 : Code[20];NewJurisdictionCode@1001 : Code[10]);
    VAR
      TaxAreaLine@1002 : Record "Tax Area Line";
      TaxJurisdiction@1003 : Record "Tax Jurisdiction";
    BEGIN
      if TaxAreaLine.GET(NewTaxArea,NewJurisdictionCode) then
        exit;
      TaxAreaLine.INIT;
      TaxAreaLine."Tax Area" := NewTaxArea;
      TaxAreaLine."Tax Jurisdiction Code" := NewJurisdictionCode;
      TaxAreaLine.INSERT;
      TaxJurisdiction.CreateTaxJurisdiction(NewJurisdictionCode);
    END;

    PROCEDURE GetDescriptionInCurrentLanguage@5() : Text[50];
    VAR
      TaxAreaTranslation@1001 : Record "Tax Area Translation";
      Language@1002 : Record Language;
    BEGIN
      if TaxAreaTranslation.GET(Code,Language.GetUserLanguage) then
        exit(TaxAreaTranslation.Description);
      exit(Description);
    END;

    LOCAL PROCEDURE SetLastModifiedDateTime@16();
    BEGIN
      "Last Modified Date Time" := CURRENTDATETIME;
    END;

    LOCAL PROCEDURE IsTaxAreaInUse@2() : Boolean;
    VAR
      SalesHeader@1000 : Record "Sales Header";
      SalesInvoiceHeader@1001 : Record "Sales Invoice Header";
      Customer@1002 : Record Customer;
    BEGIN
      Customer.SETRANGE("Tax Area Code",Code);
      if not Customer.ISEMPTY then
        exit(true);

      SalesHeader.SETRANGE("Tax Area Code",Code);
      if not SalesHeader.ISEMPTY then
        exit(true);

      SalesInvoiceHeader.SETRANGE("Tax Area Code",Code);
      if not SalesInvoiceHeader.ISEMPTY then
        exit(true);

      exit(false);
    END;

    BEGIN
    END.
  }
}

