OBJECT Page 10053 Service Stats.
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=161718.540T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Service Stats.;
    InsertAllowed=false;
    DeleteAllowed=false;
    SourceTable="Service Header";
    PageType=Document;
    OnOpenPage=BEGIN
                 SalesSetup.GET;
                 AllowInvDisc := not (SalesSetup."Calc. Inv. Discount" and CustInvDiscRecExists("Invoice Disc. Code"));
                 AllowVATDifference :=
                   SalesSetup."Allow VAT Difference" and
                   not ("Document Type" in ["Document Type"::Quote]);
                 SubformIsEditable := AllowVATDifference or AllowInvDisc or ("Tax Area Code" <> '');
                 CurrPage.EDITABLE := SubformIsEditable;
                 TaxArea.GET("Tax Area Code");
                 SetVATSpecification(ActiveTab);
               END;

    OnAfterGetRecord=VAR
                       ServLine@1000 : Record "Service Line";
                       TempServLine@1001 : TEMPORARY Record "Service Line";
                       TempSalesTaxAmtLine@1020000 : TEMPORARY Record "Sales Tax Amount Line";
                       PrevPrintOrder@1020001 : Integer;
                       PrevTaxPercent@1020002 : Decimal;
                     BEGIN
                       CurrPage.CAPTION(STRSUBSTNO(Text000,"Document Type"));

                       if PrevNo = "No." then
                         exit;
                       PrevNo := "No.";
                       FILTERGROUP(2);
                       SETRANGE("No.",PrevNo);
                       FILTERGROUP(0);

                       ClearObjects(ServLine,TotalServLine,TotalServLineLCY,ServAmtsMgt,BreakdownLabel,BreakdownAmt);

                       for i := 1 to 7 do begin
                         TempServLine.DELETEALL;
                         CLEAR(TempServLine);
                         ServAmtsMgt.GetServiceLines(Rec,TempServLine,i - 1);
                         SalesTaxCalculate.StartSalesTaxCalculation;
                         if not TaxArea."Use External Tax Engine" then begin
                           TempServLine.SETFILTER(Type,'>0');
                           TempServLine.SETFILTER(Quantity,'<>0');
                           if TempServLine.FIND('-') then
                             repeat
                               SalesTaxCalculate.AddServiceLine(TempServLine);
                             until TempServLine.NEXT = 0;
                         end;
                         OnAfterCalculateSalesTax(
                           SalesTaxCalculationOverridden,Rec,TempServLine,i,TempSalesTaxLine1,TempSalesTaxLine2,TempSalesTaxLine3,TempSalesTaxAmtLine);
                         if not SalesTaxCalculationOverridden then
                           case i of
                             1:
                               begin
                                 TempSalesTaxLine1.DELETEALL;
                                 if TaxArea."Use External Tax Engine" then
                                   SalesTaxCalculate.CallExternalTaxEngineForServ(Rec,true)
                                 else
                                   SalesTaxCalculate.EndSalesTaxCalculation("Posting Date");
                                 SalesTaxCalculate.GetSalesTaxAmountLineTable(TempSalesTaxLine1);
                               end;
                             2:
                               begin
                                 TempSalesTaxLine2.DELETEALL;
                                 if TaxArea."Use External Tax Engine" then
                                   SalesTaxCalculate.CallExternalTaxEngineForServ(Rec,true)
                                 else
                                   SalesTaxCalculate.EndSalesTaxCalculation("Posting Date");
                                 SalesTaxCalculate.GetSalesTaxAmountLineTable(TempSalesTaxLine2);
                               end;
                             3:
                               begin
                                 TempSalesTaxLine3.DELETEALL;
                                 if TaxArea."Use External Tax Engine" then
                                   SalesTaxCalculate.CallExternalTaxEngineForServ(Rec,true)
                                 else
                                   SalesTaxCalculate.EndSalesTaxCalculation("Posting Date");
                                 SalesTaxCalculate.GetSalesTaxAmountLineTable(TempSalesTaxLine3);
                               end;
                           end;

                         ServAmtsMgt.SumServiceLinesTemp(
                           Rec,TempServLine,i - 1,TotalServLine[i],TotalServLineLCY[i],
                           VATAmount[i],VATAmountText[i],ProfitLCY[i],ProfitPct[i],TotalAdjCostLCY[i]);
                         // IF Status = Status::Open THEN
                         SalesTaxCalculate.DistTaxOverServLines(TempServLine);
                         // SalesPost.SumSalesLinesTemp(
                         // Rec,TempSalesLine,i - 1,TotalServLine[i],TotalServLineLCY[i],
                         // VATAmount[i],VATAmountText[i],ProfitLCY[i],ProfitPct[i],TotalAdjCostLCY[i]);
                         if i = 3 then
                           TotalAdjCostLCY[i] := TotalServLineLCY[i]."Unit Cost (LCY)";

                         AdjProfitLCY[i] := TotalServLineLCY[i].Amount - TotalAdjCostLCY[i];
                         if TotalServLineLCY[i].Amount <> 0 then
                           AdjProfitPct[i] := ROUND(AdjProfitLCY[i] / TotalServLineLCY[i].Amount * 100,0.1);
                         TotalAmount1[i] := TotalServLine[i].Amount;
                         TotalAmount2[i] := TotalAmount1[i];
                         VATAmount[i] := 0;

                         if not SalesTaxCalculationOverridden then
                           SalesTaxCalculate.GetSummarizedSalesTaxTable(TempSalesTaxAmtLine);

                         BrkIdx := 0;
                         PrevPrintOrder := 0;
                         PrevTaxPercent := 0;
                         if TaxArea."Country/Region" = TaxArea."Country/Region"::CA then
                           BreakdownTitle := Text1020010
                         else
                           BreakdownTitle := Text1020011;
                         with TempSalesTaxAmtLine do begin
                           RESET;
                           SETCURRENTKEY("Print Order","Tax Area Code for Key","Tax Jurisdiction Code");
                           if FIND('-') then
                             repeat
                               if ("Print Order" = 0) or
                                  ("Print Order" <> PrevPrintOrder) or
                                  ("Tax %" <> PrevTaxPercent)
                               then begin
                                 BrkIdx := BrkIdx + 1;
                                 if BrkIdx > ARRAYLEN(BreakdownAmt) then begin
                                   BrkIdx := BrkIdx - 1;
                                   BreakdownLabel[i,BrkIdx] := Text1020012;
                                 end else
                                   BreakdownLabel[i,BrkIdx] := STRSUBSTNO("Print Description","Tax %");
                               end;
                               BreakdownAmt[i,BrkIdx] := BreakdownAmt[i,BrkIdx] + "Tax Amount";
                               VATAmount[i] := VATAmount[i] + "Tax Amount";
                             until NEXT = 0;
                           TotalAmount2[i] := TotalAmount2[i] + VATAmount[i];
                         end;
                         OnAfterCalculateSalesTaxValidate(i);
                       end;
                       TempServLine.DELETEALL;
                       CLEAR(TempServLine); // ?????

                       if Cust.GET("Bill-to Customer No.") then
                         Cust.CALCFIELDS("Balance (LCY)")
                       else
                         CLEAR(Cust);
                       case true of
                         Cust."Credit Limit (LCY)" = 0:
                           CreditLimitLCYExpendedPct := 0;
                         Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" < 0:
                           CreditLimitLCYExpendedPct := 0;
                         Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" > 1:
                           CreditLimitLCYExpendedPct := 10000;
                         else
                           CreditLimitLCYExpendedPct := ROUND(Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" * 10000,1);
                       end;

                       TempSalesTaxLine1.MODIFYALL(Modified,false);
                       TempSalesTaxLine2.MODIFYALL(Modified,false);
                       TempSalesTaxLine3.MODIFYALL(Modified,false);

                       PrevTab := -1;
                       SetVATSpecification(ActiveTab);

                       SubformIsReady := true;
                       OnActivateForm;
                     END;

    OnQueryClosePage=BEGIN
                       GetVATSpecification(PrevTab);
                       if TempSalesTaxLine1.GetAnyLineModified or TempSalesTaxLine2.GetAnyLineModified then
                         UpdateTaxonServLines;
                       exit(true);
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Control1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 39  ;2   ;Field     ;
                Name="TotalServLine[1].""Line Amount""";
                SourceExpr=TotalServLine[1]."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,false);
                Editable=FALSE }

    { 30  ;2   ;Field     ;
                Name="TotalServLine[1].""Inv. Discount Amount""";
                CaptionML=ENU=Inv. Discount Amount;
                ToolTipML=ENU=Specifies the invoice discount amount for the service item.;
                SourceExpr=TotalServLine[1]."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=FALSE;
                OnValidate=BEGIN
                             UpdateInvDiscAmount(1);
                           END;
                            }

    { 22  ;2   ;Field     ;
                Name="TotalServLine[1].Quantity";
                CaptionML=ENU=Quantity;
                ToolTipML=ENU=Specifies the item quantity.;
                DecimalPlaces=0:5;
                SourceExpr=TotalServLine[1].Quantity;
                Editable=FALSE }

    { 20  ;2   ;Field     ;
                Name="TotalAmount1[1]";
                SourceExpr=TotalAmount1[1];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,false);
                Editable=FALSE;
                OnValidate=BEGIN
                             UpdateTotalAmount(1);
                           END;
                            }

    { 16  ;2   ;Field     ;
                Name=VATAmount;
                CaptionML=ENU=Tax Amount;
                ToolTipML=ENU=Specifies the tax amount.;
                SourceExpr=VATAmount[1];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                Name="TotalAmount2[1]";
                SourceExpr=TotalAmount2[1];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,true);
                Editable=FALSE;
                OnValidate=BEGIN
                             TotalAmount21OnAfterValidate;
                           END;
                            }

    { 7   ;2   ;Field     ;
                Name="TotalServLineLCY[1].Amount";
                CaptionML=ENU=Sales ($);
                ToolTipML=ENU=Specifies the sales amount, in dollars.;
                SourceExpr=TotalServLineLCY[1].Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 37  ;2   ;Field     ;
                Name="TotalServLineLCY[1].""Unit Cost (LCY)""";
                CaptionML=ENU=Original Cost ($);
                ToolTipML=ENU=Specifies the original cost of the items on the service order.;
                SourceExpr=TotalServLineLCY[1]."Unit Cost (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 32  ;2   ;Field     ;
                Name="ProfitLCY[1]";
                CaptionML=ENU=Profit ($);
                ToolTipML=ENU="Specifies the profit, expressed as an amount.  ";
                SourceExpr=ProfitLCY[1];
                AutoFormatType=1;
                Editable=FALSE }

    { 24  ;2   ;Field     ;
                Name="ProfitPct[1]";
                CaptionML=ENU=Original Profit %;
                ToolTipML=ENU=Specifies the profit, expressed as a percentage, which was associated with the service item when it was originally posted.;
                DecimalPlaces=1:1;
                SourceExpr=ProfitPct[1];
                Editable=FALSE }

    { 8   ;2   ;Field     ;
                Name="TotalServLine[1].""Units per Parcel""";
                CaptionML=ENU=Parcels;
                ToolTipML=ENU=Specifies the number of parcels on the document.;
                DecimalPlaces=0:5;
                SourceExpr=TotalServLine[1]."Units per Parcel";
                Editable=FALSE }

    { 18  ;2   ;Field     ;
                Name="TotalServLine[1].""Net Weight""";
                CaptionML=ENU=Net Weight;
                ToolTipML=ENU=Specifies the total net weight of items in the service item.;
                DecimalPlaces=0:5;
                SourceExpr=TotalServLine[1]."Net Weight";
                Editable=FALSE }

    { 11  ;2   ;Field     ;
                Name="TotalServLine[1].""Gross Weight""";
                CaptionML=ENU=Gross Weight;
                ToolTipML=ENU=Specifies the gross weight of items listed on the document.;
                DecimalPlaces=0:5;
                SourceExpr=TotalServLine[1]."Gross Weight";
                Editable=FALSE }

    { 2   ;2   ;Field     ;
                Name="TotalServLine[1].""Unit Volume""";
                CaptionML=ENU=Volume;
                ToolTipML=ENU=Specifies the volume of the invoiced items.;
                DecimalPlaces=0:5;
                SourceExpr=TotalServLine[1]."Unit Volume";
                Editable=FALSE }

    { 1020003;2;Field     ;
                Name=BreakdownTitle;
                CaptionClass=FORMAT(BreakdownTitle);
                Editable=FALSE }

    { 1020008;2;Field     ;
                Name=BreakdownAmt;
                CaptionML=ENU=BreakdownAmt;
                BlankZero=true;
                SourceExpr=BreakdownAmt[1,1];
                CaptionClass=FORMAT(BreakdownLabel[1,1]);
                Editable=FALSE }

    { 1020009;2;Field     ;
                Name=BreakdownAmt2;
                CaptionML=ENU=BreakdownAmt;
                BlankZero=true;
                SourceExpr=BreakdownAmt[1,2];
                CaptionClass=FORMAT(BreakdownLabel[1,2]);
                Editable=FALSE }

    { 1020010;2;Field     ;
                Name=BreakdownAmt3;
                CaptionML=ENU=BreakdownAmt;
                BlankZero=true;
                SourceExpr=BreakdownAmt[1,3];
                CaptionClass=FORMAT(BreakdownLabel[1,3]);
                Editable=FALSE }

    { 1020011;2;Field     ;
                Name=BreakdownAmt4;
                CaptionML=ENU=BreakdownAmt;
                BlankZero=true;
                SourceExpr=BreakdownAmt[1,4];
                CaptionClass=FORMAT(BreakdownLabel[1,4]);
                Editable=FALSE }

    { 4   ;1   ;Part      ;
                Name=SubForm;
                PagePartID="Sales Tax Lines Serv. Subform" }

    { 1903781401;1;Group  ;
                Name="Service Line";
                CaptionML=ENU=Service Line }

    { 1480055;2;Field     ;
                Name=Control1480055;
                CaptionClass=Text19041261 }

    { 1480056;2;Field     ;
                Name=Control1480056;
                CaptionClass=Text19014898 }

    { 1480051;2;Field     ;
                Name="TotalServLine[5].Quantity";
                CaptionML=ENU=Quantity;
                ToolTipML=ENU=Specifies the item quantity.;
                DecimalPlaces=0:5;
                SourceExpr=TotalServLine[5].Quantity;
                Editable=FALSE }

    { 1480057;2;Field     ;
                Name=Control1480057;
                CaptionClass=Text19016980 }

    { 1480053;2;Field     ;
                Name="TotalServLine[6].Quantity";
                CaptionML=ENU=Quantity;
                ToolTipML=ENU=Specifies the item quantity.;
                DecimalPlaces=0:5;
                SourceExpr=TotalServLine[6].Quantity;
                Editable=FALSE }

    { 1480047;2;Field     ;
                Name="TotalServLine[5].""Line Amount""";
                SourceExpr=TotalServLine[5]."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,false);
                Editable=FALSE }

    { 1480049;2;Field     ;
                Name="TotalServLine[6].""Line Amount""";
                SourceExpr=TotalServLine[6]."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,false);
                Editable=FALSE }

    { 1480043;2;Field     ;
                Name="TotalServLine[5].""Inv. Discount Amount""";
                CaptionML=ENU=Inv. Discount Amount;
                ToolTipML=ENU=Specifies the invoice discount amount for the service item.;
                SourceExpr=TotalServLine[5]."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=FALSE }

    { 1480045;2;Field     ;
                Name="TotalServLine[6].""Inv. Discount Amount""";
                CaptionML=ENU=Inv. Discount Amount;
                ToolTipML=ENU=Specifies the invoice discount amount for the service item.;
                SourceExpr=TotalServLine[6]."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=FALSE }

    { 1480039;2;Field     ;
                Name="TotalAmount1[5]";
                SourceExpr=TotalAmount1[5];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,false);
                Editable=FALSE }

    { 1480041;2;Field     ;
                Name="TotalAmount1[6]";
                SourceExpr=TotalAmount1[6];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,false);
                Editable=FALSE }

    { 1480035;2;Field     ;
                Name="VATAmount[5]";
                SourceExpr=VATAmount[5];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=FORMAT(VATAmountText[1]);
                Editable=FALSE }

    { 1480031;2;Field     ;
                Name="TotalAmount2[5]";
                SourceExpr=TotalAmount2[5];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,true);
                Editable=FALSE }

    { 1480027;2;Field     ;
                Name="TotalServLineLCY[5].Amount";
                CaptionML=ENU=Sales ($);
                ToolTipML=ENU=Specifies the sales amount, in local currency.;
                SourceExpr=TotalServLineLCY[5].Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 1480023;2;Field     ;
                Name="ProfitLCY[5]";
                CaptionML=ENU=Original Profit ($);
                ToolTipML=ENU=Specifies the profit, expressed as an amount in local currency, which was associated with the service  item, when it was originally posted.;
                SourceExpr=ProfitLCY[5];
                AutoFormatType=1;
                Editable=FALSE }

    { 1480021;2;Field     ;
                Name="AdjProfitLCY[5]";
                CaptionML=ENU=Adjusted Profit ($);
                ToolTipML=ENU=Specifies the adjusted profit, in local currency.;
                SourceExpr=AdjProfitLCY[5];
                AutoFormatType=1;
                Editable=FALSE }

    { 1480011;2;Field     ;
                Name="ProfitPct[5]";
                CaptionML=ENU=Original Profit %;
                ToolTipML=ENU=Specifies the profit, expressed as a percentage, which was associated with the service item when it was originally posted.;
                DecimalPlaces=1:1;
                SourceExpr=ProfitPct[5];
                Editable=FALSE }

    { 1480010;2;Field     ;
                Name="AdjProfitPct[5]";
                CaptionML=ENU=Adjusted Profit %;
                ToolTipML=ENU=Specifies the adjusted profit of the contents of the entire service order, in local currency.;
                DecimalPlaces=1:1;
                SourceExpr=AdjProfitPct[5];
                Editable=FALSE }

    { 1480005;2;Field     ;
                Name="TotalServLineLCY[5].""Unit Cost (LCY)""";
                CaptionML=ENU=Original Cost ($);
                ToolTipML=ENU=Specifies the original cost of the items on the service order.;
                SourceExpr=TotalServLineLCY[5]."Unit Cost (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 1480009;2;Field     ;
                Name="TotalAdjCostLCY[5]";
                CaptionML=ENU=Adjusted Cost ($);
                ToolTipML=ENU=Specifies the adjusted cost of the service order, in local currency.;
                SourceExpr=TotalAdjCostLCY[5];
                AutoFormatType=1;
                Editable=FALSE }

    { 1480008;2;Field     ;
                Name="TotalAdjCostLCY[5] - TotalServLineLCY[5].""Unit Cost (LCY)""";
                CaptionML=ENU=Cost Adjmt. Amount ($);
                ToolTipML=ENU=Specifies the cost adjustment amount, in local currency.;
                SourceExpr=TotalAdjCostLCY[5] - TotalServLineLCY[5]."Unit Cost (LCY)";
                AutoFormatType=1;
                Editable=FALSE;
                OnLookup=BEGIN
                           LookupAdjmtValueEntries(1);
                         END;
                          }

    { 1480054;2;Field     ;
                Name="TotalServLine[7].Quantity";
                CaptionML=ENU=Quantity;
                ToolTipML=ENU=Specifies the item quantity.;
                DecimalPlaces=0:5;
                SourceExpr=TotalServLine[7].Quantity;
                Editable=FALSE }

    { 1480050;2;Field     ;
                Name="TotalServLine[7].""Line Amount""";
                SourceExpr=TotalServLine[7]."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,false);
                Editable=FALSE }

    { 1480046;2;Field     ;
                Name="TotalServLine[7].""Inv. Discount Amount""";
                CaptionML=ENU=Inv. Discount Amount;
                ToolTipML=ENU=Specifies the invoice discount amount for the service item.;
                SourceExpr=TotalServLine[7]."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=FALSE }

    { 1480042;2;Field     ;
                Name="TotalAmount1[7]";
                SourceExpr=TotalAmount1[7];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,false);
                Editable=FALSE }

    { 1480037;2;Field     ;
                Name="VATAmount[6]";
                SourceExpr=VATAmount[6];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=FALSE }

    { 1480038;2;Field     ;
                Name="VATAmount[7]";
                SourceExpr=VATAmount[7];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=FALSE }

    { 1480033;2;Field     ;
                Name="TotalAmount2[6]";
                SourceExpr=TotalAmount2[6];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,true);
                Editable=FALSE }

    { 1480034;2;Field     ;
                Name="TotalAmount2[7]";
                SourceExpr=TotalAmount2[7];
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,true);
                Editable=FALSE }

    { 1480029;2;Field     ;
                Name="TotalServLineLCY[6].Amount";
                CaptionML=ENU=Amount ($);
                ToolTipML=ENU=Specifies the amount of the service items, in local currency.;
                SourceExpr=TotalServLineLCY[6].Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 1480030;2;Field     ;
                Name="TotalServLineLCY[7].Amount";
                CaptionML=ENU=Amount ($);
                ToolTipML=ENU=Specifies the amount of the service items, in local currency.;
                SourceExpr=TotalServLineLCY[7].Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 1480025;2;Field     ;
                Name="ProfitLCY[6]";
                CaptionML=ENU=Profit ($);
                ToolTipML=ENU=Specifies the profit, in local currency.;
                SourceExpr=ProfitLCY[6];
                AutoFormatType=1;
                Editable=FALSE }

    { 1480026;2;Field     ;
                Name="ProfitLCY[7]";
                CaptionML=ENU=Profit ($);
                ToolTipML=ENU=Specifies the profit, in local currency.;
                SourceExpr=ProfitLCY[7];
                AutoFormatType=1;
                Editable=FALSE }

    { 1480020;2;Field     ;
                Name="AdjProfitLCY[6]";
                CaptionML=ENU=Profit ($);
                ToolTipML=ENU=Specifies the profit, in local currency.;
                SourceExpr=AdjProfitLCY[6];
                AutoFormatType=1;
                Editable=FALSE }

    { 1480019;2;Field     ;
                Name="AdjProfitLCY[7]";
                CaptionML=ENU=Profit ($);
                ToolTipML=ENU=Specifies the profit, in local currency.;
                SourceExpr=AdjProfitLCY[7];
                AutoFormatType=1;
                Editable=FALSE }

    { 1480012;2;Field     ;
                Name="ProfitPct[6]";
                CaptionML=ENU=Profit %;
                ToolTipML=ENU="Specifies the profit, expressed as a percentage.  ";
                DecimalPlaces=1:1;
                SourceExpr=ProfitPct[6];
                Editable=FALSE }

    { 1480013;2;Field     ;
                Name="ProfitPct[7]";
                CaptionML=ENU=Profit %;
                ToolTipML=ENU="Specifies the profit, expressed as a percentage.  ";
                DecimalPlaces=1:1;
                SourceExpr=ProfitPct[7];
                Editable=FALSE }

    { 1480006;2;Field     ;
                Name="TotalServLineLCY[6].""Unit Cost (LCY)""";
                CaptionML=ENU=Cost ($);
                ToolTipML=ENU=Specifies the cost of the service item, in local currency.;
                SourceExpr=TotalServLineLCY[6]."Unit Cost (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 1480007;2;Field     ;
                Name="TotalServLineLCY[7].""Unit Cost (LCY)""";
                CaptionML=ENU=Cost ($);
                ToolTipML=ENU=Specifies the cost of the service item, in local currency.;
                SourceExpr=TotalServLineLCY[7]."Unit Cost (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 1903289601;1;Group  ;
                Name=Customer;
                CaptionML=ENU=Customer }

    { 1480003;2;Field     ;
                Name="Cust.""Balance (LCY)""";
                CaptionML=ENU=Balance ($);
                ToolTipML=ENU="Specifies the customer's balance. ";
                SourceExpr=Cust."Balance (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 1480000;2;Field     ;
                Name="Cust.""Credit Limit (LCY)""";
                CaptionML=ENU=Credit Limit ($);
                ToolTipML=ENU=Specifies the customer's credit limit, in dollars.;
                SourceExpr=Cust."Credit Limit (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 1480002;2;Field     ;
                Name=CreditLimitLCYExpendedPct;
                ExtendedDatatype=Ratio;
                CaptionML=ENU=Expended % of Credit Limit ($);
                ToolTipML=ENU=Specifies the Expended Percentage of Credit Limit ($).;
                SourceExpr=CreditLimitLCYExpendedPct;
                ImplicitType=Decimal }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Service %1 Statistics';
      Text001@1001 : TextConst 'ENU=Total';
      Text002@1002 : TextConst 'ENU=Amount';
      Text003@1003 : TextConst 'ENU=%1 must not be 0.';
      Text004@1004 : TextConst 'ENU=%1 must not be greater than %2.';
      Text005@1005 : TextConst 'ENU=You cannot change the invoice discount because there is a %1 record for %2 %3.';
      TotalServLine@1006 : ARRAY [7] OF Record "Service Line";
      TotalServLineLCY@1007 : ARRAY [7] OF Record "Service Line";
      Cust@1008 : Record Customer;
      TempSalesTaxLine1@1020001 : TEMPORARY Record "Sales Tax Amount Line";
      TempSalesTaxLine2@1020002 : TEMPORARY Record "Sales Tax Amount Line";
      TempSalesTaxLine3@1020003 : TEMPORARY Record "Sales Tax Amount Line";
      SalesSetup@1012 : Record "Sales & Receivables Setup";
      SalesTaxDifference@1020004 : Record "Sales Tax Amount Difference";
      TaxArea@1020005 : Record "Tax Area";
      SalesTaxCalculate@1020000 : Codeunit "Sales Tax Calculate";
      ServAmtsMgt@1020014 : Codeunit "Serv-Amounts Mgt.";
      VATLinesForm@1020013 : Page "Sales Tax Lines Subform";
      TotalAmount1@1014 : ARRAY [7] OF Decimal;
      TotalAmount2@1015 : ARRAY [7] OF Decimal;
      VATAmount@1016 : ARRAY [7] OF Decimal;
      VATAmountText@1017 : ARRAY [7] OF Text[30];
      ProfitLCY@1018 : ARRAY [7] OF Decimal;
      ProfitPct@1019 : ARRAY [7] OF Decimal;
      AdjProfitLCY@1031 : ARRAY [7] OF Decimal;
      AdjProfitPct@1030 : ARRAY [7] OF Decimal;
      TotalAdjCostLCY@1029 : ARRAY [7] OF Decimal;
      CreditLimitLCYExpendedPct@1020 : Decimal;
      i@1021 : Integer;
      PrevNo@1022 : Code[20];
      ActiveTab@1023 : 'General,Invoicing,Shipping,Prepayment';
      PrevTab@1024 : 'General,Invoicing,Shipping';
      SubformIsReady@1025 : Boolean;
      SubformIsEditable@1026 : Boolean;
      AllowInvDisc@1027 : Boolean;
      AllowVATDifference@1028 : Boolean;
      BreakdownTitle@1020006 : Text[35];
      BreakdownLabel@1020007 : ARRAY [3,4] OF Text[30];
      BreakdownAmt@1020008 : ARRAY [3,4] OF Decimal;
      BrkIdx@1020009 : Integer;
      Text1020010@1020010 : TextConst 'ENU=Tax Breakdown:';
      Text1020011@1020011 : TextConst 'ENU=Sales Tax Breakdown:';
      Text1020012@1020012 : TextConst 'ENU=Other Taxes';
      Text19041261@19018669 : TextConst 'ENU=Items';
      Text19014898@19024867 : TextConst 'ENU=Resources';
      Text19016980@19024074 : TextConst 'ENU=Costs && G/L Accounts';
      SalesTaxCalculationOverridden@1020015 : Boolean;

    LOCAL PROCEDURE UpdateHeaderInfo@5(IndexNo@1000 : Integer;VAR SalesTaxAmountLine@1001 : TEMPORARY Record "Sales Tax Amount Line");
    VAR
      CurrExchRate@1002 : Record "Currency Exchange Rate";
      UseDate@1003 : Date;
    BEGIN
      TotalServLine[IndexNo]."Inv. Discount Amount" := SalesTaxAmountLine.GetTotalInvDiscAmount;
      TotalAmount1[IndexNo] :=
        TotalServLine[IndexNo]."Line Amount" - TotalServLine[IndexNo]."Inv. Discount Amount";
      VATAmount[IndexNo] := SalesTaxAmountLine.GetTotalTaxAmountFCY;
      if "Prices Including VAT" then
        TotalAmount2[IndexNo] := TotalServLine[IndexNo].Amount
      else
        TotalAmount2[IndexNo] := TotalAmount1[IndexNo] + VATAmount[IndexNo];

      if "Prices Including VAT" then
        TotalServLineLCY[IndexNo].Amount := TotalAmount2[IndexNo]
      else
        TotalServLineLCY[IndexNo].Amount := TotalAmount1[IndexNo];
      if "Currency Code" <> '' then
        if ("Document Type" = "Document Type"::Quote) and
           ("Posting Date" = 0D)
        then
          UseDate := WORKDATE
        else
          UseDate := "Posting Date";

      TotalServLineLCY[IndexNo].Amount :=
        CurrExchRate.ExchangeAmtFCYToLCY(
          UseDate,"Currency Code",TotalServLineLCY[IndexNo].Amount,"Currency Factor");

      ProfitLCY[IndexNo] := TotalServLineLCY[IndexNo].Amount - TotalServLineLCY[IndexNo]."Unit Cost (LCY)";
      if TotalServLineLCY[IndexNo].Amount = 0 then
        ProfitPct[IndexNo] := 0
      else
        ProfitPct[IndexNo] := ROUND(100 * ProfitLCY[IndexNo] / TotalServLineLCY[IndexNo].Amount,0.01);

      AdjProfitLCY[IndexNo] := TotalServLineLCY[IndexNo].Amount - TotalAdjCostLCY[IndexNo];
      if TotalServLineLCY[IndexNo].Amount = 0 then
        AdjProfitPct[IndexNo] := 0
      else
        AdjProfitPct[IndexNo] := ROUND(100 * AdjProfitLCY[IndexNo] / TotalServLineLCY[IndexNo].Amount,0.01);
    END;

    LOCAL PROCEDURE GetVATSpecification@21(QtyType@1000 : 'General,Invoicing,Shipping');
    BEGIN
      case QtyType of
        QtyType::General:
          begin
            CurrPage.SubForm.PAGE.GetTempTaxAmountLine(TempSalesTaxLine1);
            UpdateHeaderInfo(1,TempSalesTaxLine1);
          end;
        QtyType::Invoicing:
          begin
            CurrPage.SubForm.PAGE.GetTempTaxAmountLine(TempSalesTaxLine2);
            UpdateHeaderInfo(2,TempSalesTaxLine2);
          end;
        QtyType::Shipping:
          CurrPage.SubForm.PAGE.GetTempTaxAmountLine(TempSalesTaxLine3);
      end;
    END;

    LOCAL PROCEDURE SetVATSpecification@11(QtyType@1000 : 'General,Invoicing,Shipping,Prepayment');
    BEGIN
      if not SubformIsReady then
        exit;

      ActiveTab := QtyType;

      if PrevTab >= 0 then
        GetVATSpecification(PrevTab);
      PrevTab := ActiveTab;

      case QtyType of
        QtyType::General:
          begin
            CurrPage.SubForm.PAGE.SetTempTaxAmountLine(TempSalesTaxLine1);
            CurrPage.SubForm.PAGE.InitGlobals(
              "Currency Code",AllowVATDifference,false,
              "Prices Including VAT",AllowInvDisc,"VAT Base Discount %");
          end;
        QtyType::Invoicing:
          begin
            CurrPage.SubForm.PAGE.SetTempTaxAmountLine(TempSalesTaxLine2);
            CurrPage.SubForm.PAGE.InitGlobals(
              "Currency Code",AllowVATDifference,AllowVATDifference,
              "Prices Including VAT",AllowInvDisc,"VAT Base Discount %");
          end;
        QtyType::Shipping:
          CurrPage.SubForm.PAGE.SetTempTaxAmountLine(TempSalesTaxLine3);
      end;
    END;

    LOCAL PROCEDURE UpdateTotalAmount@16(IndexNo@1000 : Integer);
    VAR
      SaveTotalAmount@1001 : Decimal;
    BEGIN
      CheckAllowInvDisc;
      if "Prices Including VAT" then begin
        SaveTotalAmount := TotalAmount1[IndexNo];
        UpdateInvDiscAmount(IndexNo);
        TotalAmount1[IndexNo] := SaveTotalAmount;
      end;

      with TotalServLine[IndexNo] do
        "Inv. Discount Amount" := "Line Amount" - TotalAmount1[IndexNo];
      UpdateInvDiscAmount(IndexNo);
    END;

    LOCAL PROCEDURE UpdateInvDiscAmount@3(ModifiedIndexNo@1000 : Integer);
    VAR
      PartialInvoicing@1001 : Boolean;
      MaxIndexNo@1002 : Integer;
      IndexNo@1003 : ARRAY [2] OF Integer;
      i@1004 : Integer;
      InvDiscBaseAmount@1005 : Decimal;
    BEGIN
      CheckAllowInvDisc;
      if not (ModifiedIndexNo in [1,2]) then
        exit;

      if ModifiedIndexNo = 1 then
        InvDiscBaseAmount := TempSalesTaxLine1.GetTotalInvDiscBaseAmount(false,"Currency Code")
      else
        InvDiscBaseAmount := TempSalesTaxLine2.GetTotalInvDiscBaseAmount(false,"Currency Code");

      if InvDiscBaseAmount = 0 then
        ERROR(Text003,TempSalesTaxLine2.FIELDCAPTION("Inv. Disc. Base Amount"));

      if TotalServLine[ModifiedIndexNo]."Inv. Discount Amount" / InvDiscBaseAmount > 1 then
        ERROR(
          Text004,
          TotalServLine[ModifiedIndexNo].FIELDCAPTION("Inv. Discount Amount"),
          TempSalesTaxLine2.FIELDCAPTION("Inv. Disc. Base Amount"));

      PartialInvoicing := (TotalServLine[1]."Line Amount" <> TotalServLine[2]."Line Amount");

      IndexNo[1] := ModifiedIndexNo;
      IndexNo[2] := 3 - ModifiedIndexNo;
      if (ModifiedIndexNo = 2) and PartialInvoicing then
        MaxIndexNo := 1
      else
        MaxIndexNo := 2;

      if not PartialInvoicing then
        if ModifiedIndexNo = 1 then
          TotalServLine[2]."Inv. Discount Amount" := TotalServLine[1]."Inv. Discount Amount"
        else
          TotalServLine[1]."Inv. Discount Amount" := TotalServLine[2]."Inv. Discount Amount";

      for i := 1 to MaxIndexNo do
        with TotalServLine[IndexNo[i]] do begin
          if (i = 1) or not PartialInvoicing then
            if IndexNo[i] = 1 then begin
              TempSalesTaxLine1.SetInvoiceDiscountAmount(
                "Inv. Discount Amount","Currency Code","Prices Including VAT","VAT Base Discount %");
            end else
              TempSalesTaxLine2.SetInvoiceDiscountAmount(
                "Inv. Discount Amount","Currency Code","Prices Including VAT","VAT Base Discount %");

          if (i = 2) and PartialInvoicing then
            if IndexNo[i] = 1 then begin
              InvDiscBaseAmount := TempSalesTaxLine2.GetTotalInvDiscBaseAmount(false,"Currency Code");
              if InvDiscBaseAmount = 0 then
                TempSalesTaxLine1.SetInvoiceDiscountPercent(
                  0,"Currency Code","Prices Including VAT",false,"VAT Base Discount %")
              else
                TempSalesTaxLine1.SetInvoiceDiscountPercent(
                  100 * TempSalesTaxLine2.GetTotalInvDiscAmount / InvDiscBaseAmount,
                  "Currency Code","Prices Including VAT",false,"VAT Base Discount %");
            end else begin
              InvDiscBaseAmount := TempSalesTaxLine1.GetTotalInvDiscBaseAmount(false,"Currency Code");
              if InvDiscBaseAmount = 0 then
                TempSalesTaxLine2.SetInvoiceDiscountPercent(
                  0,"Currency Code","Prices Including VAT",false,"VAT Base Discount %")
              else
                TempSalesTaxLine2.SetInvoiceDiscountPercent(
                  100 * TempSalesTaxLine1.GetTotalInvDiscAmount / InvDiscBaseAmount,
                  "Currency Code","Prices Including VAT",false,"VAT Base Discount %");
            end;
        end;

      UpdateHeaderInfo(1,TempSalesTaxLine1);
      UpdateHeaderInfo(2,TempSalesTaxLine2);

      if ModifiedIndexNo = 1 then
        VATLinesForm.SetTempTaxAmountLine(TempSalesTaxLine1)
      else
        VATLinesForm.SetTempTaxAmountLine(TempSalesTaxLine2);

      "Invoice Discount Calculation" := "Invoice Discount Calculation"::Amount;
      "Invoice Discount Value" := TotalServLine[1]."Inv. Discount Amount";
      MODIFY;

      UpdateTaxonServLines;
    END;

    LOCAL PROCEDURE GetCaptionClass@2(FieldCaption@1000 : Text[100];ReverseCaption@1001 : Boolean) : Text[80];
    BEGIN
      if "Prices Including VAT" xor ReverseCaption then
        exit('2,1,' + FieldCaption);
      exit('2,0,' + FieldCaption);
    END;

    LOCAL PROCEDURE UpdateTaxonServLines@1();
    VAR
      ServLine@1000 : Record "Service Line";
    BEGIN
      GetVATSpecification(ActiveTab);

      ServLine.RESET;
      ServLine.SETRANGE("Document Type","Document Type");
      ServLine.SETRANGE("No.","No.");
      ServLine.FINDFIRST;

      if TempSalesTaxLine1.GetAnyLineModified then begin
        SalesTaxCalculate.StartSalesTaxCalculation;
        SalesTaxCalculate.PutSalesTaxAmountLineTable(
          TempSalesTaxLine1,
          SalesTaxDifference."Document Product Area"::Service,
          "Document Type","No.");
        SalesTaxCalculate.DistTaxOverServLines(ServLine);
        SalesTaxCalculate.SaveTaxDifferences;
      end;
      if TempSalesTaxLine2.GetAnyLineModified then begin
        SalesTaxCalculate.StartSalesTaxCalculation;
        SalesTaxCalculate.PutSalesTaxAmountLineTable(
          TempSalesTaxLine2,
          SalesTaxDifference."Document Product Area"::Service,
          "Document Type","No.");
        SalesTaxCalculate.DistTaxOverServLines(ServLine);
        SalesTaxCalculate.SaveTaxDifferences;
      end;

      PrevNo := '';
    END;

    LOCAL PROCEDURE CustInvDiscRecExists@4(InvDiscCode@1000 : Code[20]) : Boolean;
    VAR
      CustInvDisc@1001 : Record "Cust. Invoice Disc.";
    BEGIN
      CustInvDisc.SETRANGE(Code,InvDiscCode);
      exit(CustInvDisc.FINDFIRST);
    END;

    LOCAL PROCEDURE CheckAllowInvDisc@8();
    VAR
      CustInvDisc@1000 : Record "Cust. Invoice Disc.";
    BEGIN
      if not AllowInvDisc then
        ERROR(
          Text005,
          CustInvDisc.TABLECAPTION,FIELDCAPTION("Invoice Disc. Code"),"Invoice Disc. Code");
    END;

    [External]
    PROCEDURE VATLinesDrillDown@1480007(VAR VATLinesToDrillDown@1000 : Record "Sales Tax Amount Line";ThisTabAllowsVATEditing@1001 : Boolean);
    BEGIN
      CLEAR(VATLinesForm);
      VATLinesForm.SetTempTaxAmountLine(VATLinesToDrillDown);
      VATLinesForm.InitGlobals(
        "Currency Code",AllowVATDifference,AllowVATDifference and ThisTabAllowsVATEditing,
        "Prices Including VAT",AllowInvDisc,"VAT Base Discount %");
      VATLinesForm.RUNMODAL;
      VATLinesForm.GetTempTaxAmountLine(VATLinesToDrillDown);
    END;

    [External]
    PROCEDURE GetDetailsTotal@6() : Decimal;
    BEGIN
      if TotalServLineLCY[2].Amount = 0 then
        exit(0);
      exit(ROUND(100 * (ProfitLCY[2] + ProfitLCY[4]) / TotalServLineLCY[2].Amount,0.01));
    END;

    [External]
    PROCEDURE GetAdjDetailsTotal@7() : Decimal;
    BEGIN
      if TotalServLineLCY[2].Amount = 0 then
        exit(0);
      exit(ROUND(100 * (AdjProfitLCY[2] + AdjProfitLCY[4]) / TotalServLineLCY[2].Amount,0.01));
    END;

    [External]
    PROCEDURE UpdateHeaderServLine@9();
    VAR
      TempServLine@1000 : TEMPORARY Record "Service Line";
    BEGIN
      CLEAR(ServAmtsMgt);

      for i := 1 to 7 do
        if i in [1,5,6,7] then begin
          TempServLine.DELETEALL;
          CLEAR(TempServLine);
          ServAmtsMgt.GetServiceLines(Rec,TempServLine,i - 1);

          ServAmtsMgt.SumServiceLinesTemp(
            Rec,TempServLine,i - 1,TotalServLine[i],TotalServLineLCY[i],
            VATAmount[i],VATAmountText[i],ProfitLCY[i],ProfitPct[i],TotalAdjCostLCY[i]);

          if TotalServLineLCY[i].Amount = 0 then
            ProfitPct[i] := 0
          else
            ProfitPct[i] := ROUND(100 * ProfitLCY[i] / TotalServLineLCY[i].Amount,0.1);

          AdjProfitLCY[i] := TotalServLineLCY[i].Amount - TotalAdjCostLCY[i];
          if TotalServLineLCY[i].Amount <> 0 then
            AdjProfitPct[i] := ROUND(100 * AdjProfitLCY[i] / TotalServLineLCY[i].Amount,0.1);

          if "Prices Including VAT" then begin
            TotalAmount2[i] := TotalServLine[i].Amount;
            TotalAmount1[i] := TotalAmount2[i] + VATAmount[i];
            TotalServLine[i]."Line Amount" := TotalAmount1[i] + TotalServLine[i]."Inv. Discount Amount";
          end else begin
            TotalAmount1[i] := TotalServLine[i].Amount;
            TotalAmount2[i] := TotalServLine[i]."Amount Including VAT";
          end;
        end;
    END;

    LOCAL PROCEDURE TotalAmount21OnAfterValidate@19074760();
    BEGIN
      with TotalServLine[1] do begin
        if "Prices Including VAT" then
          "Inv. Discount Amount" := "Line Amount" - "Amount Including VAT"
        else
          "Inv. Discount Amount" := "Line Amount" - Amount;
      end;
      UpdateInvDiscAmount(1);
    END;

    LOCAL PROCEDURE ClearObjects@1020002(VAR ServiceLine@1020000 : Record "Service Line";VAR TotalServiceLine@1020001 : ARRAY [7] OF Record "Service Line";VAR TotalServiceLineLCY@1020002 : ARRAY [7] OF Record "Service Line";VAR ServAmountsMgt@1020003 : Codeunit "Serv-Amounts Mgt.";BreakdownLabel@1020004 : ARRAY [3,4] OF Text[30];BreakdownAmt@1020005 : ARRAY [3,4] OF Decimal);
    BEGIN
      CLEAR(ServiceLine);
      CLEAR(TotalServiceLine);
      CLEAR(TotalServiceLineLCY);
      CLEAR(ServAmountsMgt);
      CLEAR(BreakdownLabel);
      CLEAR(BreakdownAmt);
    END;

    LOCAL PROCEDURE OnActivateForm@19002417();
    BEGIN
      SetVATSpecification(ActiveTab);
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterCalculateSalesTax@1020000(VAR Handled@1020000 : Boolean;VAR ServiceHeader@1020001 : Record "Service Header";VAR ServiceLine@1020002 : Record "Service Line";VAR i@1020003 : Integer;VAR TempSalesTaxAmountLine1@1020004 : TEMPORARY Record "Sales Tax Amount Line";VAR TempSalesTaxAmountLine2@1020005 : TEMPORARY Record "Sales Tax Amount Line";VAR TempSalesTaxAmountLine3@1020006 : TEMPORARY Record "Sales Tax Amount Line";VAR SalesTaxAmountLineParm@1020007 : Record "Sales Tax Amount Line");
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterCalculateSalesTaxValidate@1020001(VAR i@1020000 : Integer);
    BEGIN
    END;

    BEGIN
    END.
  }
}

