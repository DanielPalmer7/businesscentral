OBJECT Codeunit 10202 Entry Application Management
{
  OBJECT-PROPERTIES
  {
    Date=0D;
    Time=0T;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE GetAppliedCustEntries@1020000(VAR AppliedCustLedgEntry@1020000 : TEMPORARY Record "Cust. Ledger Entry";CustLedgEntry@1020001 : Record "Cust. Ledger Entry";UseLCY@1480000 : Boolean);
    VAR
      DtldCustLedgEntry@1020003 : Record "Detailed Cust. Ledg. Entry";
      PmtDtldCustLedgEntry@1020004 : Record "Detailed Cust. Ledg. Entry";
      PmtCustLedgEntry@1020015 : Record "Cust. Ledger Entry";
      ClosingCustLedgEntry@1020002 : Record "Cust. Ledger Entry";
      AmountToApply@1020005 : Decimal;
    BEGIN
      // Temporary Table, AppliedCustLedgEntry, to be filled in with everything that CustLedgEntry applied to.
      // Note that within AppliedCustLedgEntry, the "Amount to Apply" field will be filled in with the Amount Applied.
      // IF UseLCY is TRUE, Amount Applied will be in LCY, else it will be in the application currency
      AppliedCustLedgEntry.RESET;
      AppliedCustLedgEntry.DELETEALL;

      DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.");
      DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
      DtldCustLedgEntry.SETRANGE("Entry Type",DtldCustLedgEntry."Entry Type"::Application);
      DtldCustLedgEntry.SETRANGE(Unapplied,false);
      if DtldCustLedgEntry.FIND('-') then
        repeat
          PmtDtldCustLedgEntry.SETFILTER("Cust. Ledger Entry No.",'<>%1',CustLedgEntry."Entry No.");
          PmtDtldCustLedgEntry.SETRANGE("Entry Type",DtldCustLedgEntry."Entry Type"::Application);
          PmtDtldCustLedgEntry.SETRANGE("Transaction No.",DtldCustLedgEntry."Transaction No.");
          PmtDtldCustLedgEntry.SETRANGE("Application No.",DtldCustLedgEntry."Application No.");
          PmtDtldCustLedgEntry.SETRANGE("Customer No.",DtldCustLedgEntry."Customer No.");
          PmtDtldCustLedgEntry.FINDSET;
          repeat
            if UseLCY then
              AmountToApply := -PmtDtldCustLedgEntry."Amount (LCY)"
            else
              AmountToApply := -PmtDtldCustLedgEntry.Amount;
            PmtCustLedgEntry.GET(PmtDtldCustLedgEntry."Cust. Ledger Entry No.");
            AppliedCustLedgEntry := PmtCustLedgEntry;
            if AppliedCustLedgEntry.FIND then begin
              AppliedCustLedgEntry."Amount to Apply" += AmountToApply;
              AppliedCustLedgEntry.MODIFY;
            end else begin
              AppliedCustLedgEntry := PmtCustLedgEntry;
              AppliedCustLedgEntry."Amount to Apply" := AmountToApply;
              if CustLedgEntry."Closed by Entry No." <> 0 then begin
                ClosingCustLedgEntry.GET(PmtDtldCustLedgEntry."Cust. Ledger Entry No.");
                if ClosingCustLedgEntry."Closed by Entry No." <> AppliedCustLedgEntry."Entry No." then
                  AppliedCustLedgEntry."Pmt. Disc. Given (LCY)" := 0;
              end;
              AppliedCustLedgEntry.INSERT;
            end;
          until PmtDtldCustLedgEntry.NEXT = 0;
        until DtldCustLedgEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE GetAppliedVendEntries@1020001(VAR AppliedVendLedgEntry@1020001 : TEMPORARY Record "Vendor Ledger Entry";VendLedgEntry@1020000 : Record "Vendor Ledger Entry";UseLCY@1480000 : Boolean);
    VAR
      DtldVendLedgEntry@1020003 : Record "Detailed Vendor Ledg. Entry";
      PmtDtldVendLedgEntry@1020007 : Record "Detailed Vendor Ledg. Entry";
      PmtVendLedgEntry@1020006 : Record "Vendor Ledger Entry";
      ClosingVendLedgEntry@1020002 : Record "Vendor Ledger Entry";
      AmountToApply@1020005 : Decimal;
      PaymentDiscount@1020004 : Decimal;
    BEGIN
      // Temporary Table, AppliedVendLedgEntry, to be filled in with everything that VendLedgEntry applied to.
      // Note that within AppliedVendLedgEntry, the "Amount to Apply" field will be filled in with the Amount Applied.
      // IF UseLCY is TRUE, Amount Applied will be in LCY, else it will be in the application currency
      AppliedVendLedgEntry.RESET;
      AppliedVendLedgEntry.DELETEALL;

      DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.");
      DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.",VendLedgEntry."Entry No.");
      DtldVendLedgEntry.SETRANGE("Entry Type",DtldVendLedgEntry."Entry Type"::Application);
      DtldVendLedgEntry.SETRANGE(Unapplied,false);
      if DtldVendLedgEntry.FIND('-') then
        repeat
          PmtDtldVendLedgEntry.SETFILTER("Vendor Ledger Entry No.",'<>%1',VendLedgEntry."Entry No.");
          PmtDtldVendLedgEntry.SETRANGE("Entry Type",DtldVendLedgEntry."Entry Type"::Application);
          PmtDtldVendLedgEntry.SETRANGE("Transaction No.",DtldVendLedgEntry."Transaction No.");
          PmtDtldVendLedgEntry.SETRANGE("Application No.",DtldVendLedgEntry."Application No.");
          PmtDtldVendLedgEntry.SETRANGE("Vendor No.",DtldVendLedgEntry."Vendor No.");
          PmtDtldVendLedgEntry.FINDSET;
          repeat
            PaymentDiscount := 0;
            if PmtDtldVendLedgEntry."Posting Date" <= PmtDtldVendLedgEntry."Initial Entry Due Date" then
              PaymentDiscount := PmtDtldVendLedgEntry."Remaining Pmt. Disc. Possible";
            if UseLCY then
              AmountToApply := -PmtDtldVendLedgEntry."Amount (LCY)" - PaymentDiscount
            else
              AmountToApply := -PmtDtldVendLedgEntry.Amount - PaymentDiscount;
            PmtVendLedgEntry.GET(PmtDtldVendLedgEntry."Vendor Ledger Entry No.");
            AppliedVendLedgEntry := PmtVendLedgEntry;
            if AppliedVendLedgEntry.FIND then begin
              AppliedVendLedgEntry."Amount to Apply" += AmountToApply;
              AppliedVendLedgEntry.MODIFY;
            end else begin
              AppliedVendLedgEntry := PmtVendLedgEntry;
              AppliedVendLedgEntry."Amount to Apply" := AmountToApply;
              if VendLedgEntry."Closed by Entry No." <> 0 then begin
                ClosingVendLedgEntry.GET(PmtDtldVendLedgEntry."Vendor Ledger Entry No.");
                if ClosingVendLedgEntry."Closed by Entry No." <> AppliedVendLedgEntry."Entry No." then
                  AppliedVendLedgEntry."Pmt. Disc. Rcd.(LCY)" := 0;
              end;
              AppliedVendLedgEntry.INSERT;
            end;
          until PmtDtldVendLedgEntry.NEXT = 0;
        until DtldVendLedgEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE GetAppliedVendorEntries@1020002(VAR TempAppliedVendLedgEntry@1020001 : TEMPORARY Record "Vendor Ledger Entry";VendorNo@1020000 : Code[20];PeriodDate@1020010 : ARRAY [2] OF Date;UseLCY@1480000 : Boolean);
    VAR
      DtldVendLedgEntry@1020003 : Record "Detailed Vendor Ledg. Entry";
      PmtDtldVendLedgEntry@1020007 : Record "Detailed Vendor Ledg. Entry";
      PmtVendLedgEntry@1020006 : Record "Vendor Ledger Entry";
      ClosingVendLedgEntry@1020002 : Record "Vendor Ledger Entry";
      VendLedgEntry@1020009 : Record "Vendor Ledger Entry";
      TempInteger@1020008 : TEMPORARY Record Integer;
      AmountToApply@1020005 : Decimal;
      PaymentDiscount@1020004 : Decimal;
    BEGIN
      TempAppliedVendLedgEntry.RESET;
      TempAppliedVendLedgEntry.DELETEALL;

      VendLedgEntry.SETCURRENTKEY("Document Type","Vendor No.","Posting Date");
      VendLedgEntry.SETRANGE("Document Type",VendLedgEntry."Document Type"::Payment);
      VendLedgEntry.SETRANGE("Vendor No.",VendorNo);
      VendLedgEntry.SETRANGE("Posting Date",PeriodDate[1],PeriodDate[2]);
      if VendLedgEntry.FINDSET then
        repeat
          DtldVendLedgEntry.SETCURRENTKEY("Vendor Ledger Entry No.");
          DtldVendLedgEntry.SETRANGE("Vendor Ledger Entry No.",VendLedgEntry."Entry No.");
          DtldVendLedgEntry.SETRANGE("Entry Type",DtldVendLedgEntry."Entry Type"::Application);
          DtldVendLedgEntry.SETRANGE(Unapplied,false);
          if DtldVendLedgEntry.FINDSET then
            repeat
              PmtDtldVendLedgEntry.SETFILTER("Vendor Ledger Entry No.",'<>%1',VendLedgEntry."Entry No.");
              PmtDtldVendLedgEntry.SETRANGE("Entry Type",DtldVendLedgEntry."Entry Type"::Application);
              PmtDtldVendLedgEntry.SETRANGE("Vendor No.",VendorNo);
              PmtDtldVendLedgEntry.SETRANGE("Transaction No.",DtldVendLedgEntry."Transaction No.");
              PmtDtldVendLedgEntry.SETRANGE("Application No.",DtldVendLedgEntry."Application No.");
              PmtDtldVendLedgEntry.FINDSET;
              repeat
                if TryCacheEntryNo(TempInteger,PmtDtldVendLedgEntry."Entry No.") then begin
                  PaymentDiscount := 0;
                  if PmtDtldVendLedgEntry."Posting Date" <= PmtDtldVendLedgEntry."Initial Entry Due Date" then
                    PaymentDiscount := PmtDtldVendLedgEntry."Remaining Pmt. Disc. Possible";
                  if UseLCY then
                    AmountToApply := -PmtDtldVendLedgEntry."Amount (LCY)" - PaymentDiscount
                  else
                    AmountToApply := -PmtDtldVendLedgEntry.Amount - PaymentDiscount;
                  PmtVendLedgEntry.GET(PmtDtldVendLedgEntry."Vendor Ledger Entry No.");
                  TempAppliedVendLedgEntry := PmtVendLedgEntry;
                  if TempAppliedVendLedgEntry.FIND then begin
                    TempAppliedVendLedgEntry."Amount to Apply" += AmountToApply;
                    TempAppliedVendLedgEntry.MODIFY;
                  end else begin
                    TempAppliedVendLedgEntry := PmtVendLedgEntry;
                    TempAppliedVendLedgEntry."Amount to Apply" := AmountToApply;

                    if VendLedgEntry."Closed by Entry No." <> 0 then begin
                      ClosingVendLedgEntry.GET(PmtDtldVendLedgEntry."Vendor Ledger Entry No.");
                      if ClosingVendLedgEntry."Closed by Entry No." <> TempAppliedVendLedgEntry."Entry No." then
                        TempAppliedVendLedgEntry."Pmt. Disc. Rcd.(LCY)" := 0;
                    end;
                    TempAppliedVendLedgEntry.INSERT;
                  end;
                end;
              until PmtDtldVendLedgEntry.NEXT = 0;
            until DtldVendLedgEntry.NEXT = 0;
        until VendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE TryCacheEntryNo@1020004(VAR TempInteger@1020000 : TEMPORARY Record Integer;EntryNo@1020001 : Integer) : Boolean;
    BEGIN
      TempInteger.Number := EntryNo;
      exit(TempInteger.INSERT);
    END;

    BEGIN
    END.
  }
}

