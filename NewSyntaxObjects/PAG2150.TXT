OBJECT Page 2150 O365 Sales Email Dialog
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=161404.217T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Send Email;
    SourceTable="Email Item";
    PageType=StandardDialog;
    SourceTableTemporary=true;
    RefreshOnActivate=true;
    OnOpenPage=VAR
                 TempBlob@1000 : TEMPORARY Record TempBlob;
                 MailManagement@1002 : Codeunit "Mail Management";
                 O365SalesEmailManagement@1003 : Codeunit "O365 Sales Email Management";
                 CR@1001 : Text[1];
               BEGIN
                 // Set CC and BCC field
                 TempEmailItem.FINDFIRST;
                 UpdateCcBccText(TempEmailItem."Send CC",TempEmailItem."Send BCC");
                 SendTo := COPYSTR(TempEmailItem."Send to",1,MAXSTRLEN(SendTo));
                 SubjectText := TempEmailItem.Subject;
                 if not MailManagement.TryGetSenderEmailAddress(FromAddress) then;
                 TempEmailItem.CALCFIELDS(Body);
                 TempBlob.Blob := TempEmailItem.Body;
                 CR[1] := 10;
                 BodyText := TempBlob.ReadAsText(CR,O365SalesEmailManagement.GetBodyTextEncoding);

                 IsPhoneClient := ClientTypeManagement.GetCurrentClientType = CLIENTTYPE::Phone;
               END;

    OnQueryClosePage=BEGIN
                       TempEmailItem.MODIFY(true);
                       Rec := TempEmailItem;
                       if CloseAction <> ACTION::OK then
                         exit;
                       if TempEmailItem."Send to" = '' then
                         ERROR(MustSpecifyToEmailAddressErr);
                       if FromAddress = '' then
                         ERROR(MailNotConfiguredErr);
                     END;

    OnAfterGetCurrRecord=BEGIN
                           if not DocumentHeaderRecordVariant.ISRECORD then
                             exit;
                           UpdateNoOfAttachmentsLabel(O365SalesAttachmentMgt.GetNoOfAttachments(DocumentHeaderRecordVariant));
                         END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Control1;
                ContainerType=ContentArea }

    { 10  ;1   ;Field     ;
                Name=SendToText;
                ExtendedDatatype=E-Mail;
                CaptionML=ENU=To;
                ToolTipML=ENU=Specifies the recipient of the email.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=SendTo;
                OnValidate=VAR
                             MailManagement@1000 : Codeunit "Mail Management";
                           BEGIN
                             MailManagement.CheckValidEmailAddresses(SendTo);
                             if SendTo <> TempEmailItem."Send to" then
                               GetEmailBody(SendTo);
                             TempEmailItem."Send to" := SendTo;
                           END;

                ImplicitType=Text80 }

    { 4   ;1   ;Field     ;
                Name=CcBccText;
                CaptionML=ENU=CC/BCC;
                ToolTipML=ENU=Specifies one or more additional recipients.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=CcAndBcc;
                Importance=Additional;
                Editable=IsPhoneClient;
                OnAssistEdit=BEGIN
                               if ClientTypeManagement.GetCurrentClientType = CLIENTTYPE::Tablet then
                                 PAGE.RUNMODAL(PAGE::"BC O365 Email Settings")
                               else
                                 PAGE.RUNMODAL(PAGE::"O365 Email CC and BCC Settings");

                               TempEmailItem.AddCcBcc;
                               UpdateCcBccText(TempEmailItem."Send CC",TempEmailItem."Send BCC");
                             END;

                ImplicitType=Text;
                QuickEntry=FALSE }

    { 3   ;1   ;Field     ;
                Name=FromAddressField;
                ExtendedDatatype=E-Mail;
                CaptionML=ENU=From;
                ToolTipML=ENU=Specifies address for sending emails.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=FromAddress;
                Editable=FALSE;
                OnAssistEdit=VAR
                               O365SetupEmail@1001 : Codeunit "O365 Setup Email";
                               MailManagement@1000 : Codeunit "Mail Management";
                             BEGIN
                               O365SetupEmail.SetupEmail(true);
                               FromAddress := MailManagement.GetSenderEmailAddress;
                             END;

                ImplicitType=Text250;
                QuickEntry=FALSE }

    { 11  ;1   ;Field     ;
                Name=Subject;
                CaptionML=ENU=Subject;
                ToolTipML=ENU=Specifies the text that will display as the subject of the email.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=SubjectText;
                OnValidate=BEGIN
                             TempEmailItem.Subject := SubjectText;
                           END;

                ImplicitType=Text250 }

    { 2   ;1   ;Field     ;
                Name=Body;
                CaptionML=ENU=Email Body Text;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=BodyText;
                Visible=NOT IsBodyHidden;
                MultiLine=true;
                OnValidate=BEGIN
                             if BodyText = '' then
                               BodyText := ' '; // an empty body text triggers insertion of the html content.
                             TempEmailItem.SetBodyText(BodyText);
                             GetEmailBody(SendTo);
                           END;

                ImplicitType=Text }

    { 15  ;1   ;Field     ;
                Name=ShowEmailContentLbl;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=ShowEmailContentLbl;
                Editable=FALSE;
                OnDrillDown=VAR
                              FileManagement@1002 : Codeunit "File Management";
                              O365EmailPreview@1000 : Page "O365 Email Preview";
                              FileName@1004 : Text;
                            BEGIN
                              BodyText := TempEmailItem.GetBodyText;
                              if TempEmailItem."Body File Path" = '' then
                                FileName := FileManagement.CreateAndWriteToServerFile(BodyText,'html')
                              else
                                FileName := TempEmailItem."Body File Path";

                              O365EmailPreview.LoadHTMLFile(FileName);
                              O365EmailPreview.RUNMODAL;
                            END;

                ImplicitType=TextConst;
                ShowCaption=false }

    { 13  ;1   ;Group     ;
                Name=Attachments;
                CaptionML=ENU=Attachments;
                GroupType=Group }

    { 12  ;1   ;Field     ;
                Name=AttachmentName;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=ViewPdfInvoiceLbl;
                Visible=HasInvoiceAttachment;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              if HasInvoiceAttachment then
                                DOWNLOAD(TempEmailItem."Attachment File Path",'','','',TempEmailItem."Attachment File Path");
                            END;

                ImplicitType=TextConst;
                ShowCaption=false }

    { 16  ;1   ;Field     ;
                Name=NoOfAttachmentsValueTxt;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=NoOfAttachmentsValueTxt;
                Editable=FALSE;
                OnDrillDown=VAR
                              SalesHeader@1001 : Record "Sales Header";
                              RecRef@1000 : RecordRef;
                            BEGIN
                              if not DocumentHeaderRecordVariant.ISRECORD then
                                exit;
                              UpdateNoOfAttachmentsLabel(O365SalesAttachmentMgt.EditAttachments(DocumentHeaderRecordVariant));
                              if not GetSalesHeader(DocumentHeaderRecordVariant,SalesHeader) then
                                exit;
                              RecRef.GETTABLE(DocumentHeaderRecordVariant);
                              if RecRef.NUMBER = DATABASE::"Sales Header" then begin
                                SalesHeader := DocumentHeaderRecordVariant;
                                if SalesHeader.FIND then
                                  DocumentHeaderRecordVariant := SalesHeader;
                              end;
                            END;

                ImplicitType=Text;
                ShowCaption=false }

  }
  CODE
  {
    VAR
      TempEmailItem@1000 : TEMPORARY Record "Email Item";
      O365SalesAttachmentMgt@1005 : Codeunit "O365 Sales Attachment Mgt";
      ClientTypeManagement@1013 : Codeunit ClientTypeManagement;
      DocumentHeaderRecordVariant@1007 : Variant;
      SendTo@1008 : Text[80];
      FromAddress@1016 : Text[250];
      CcAndBcc@1001 : Text;
      MustSpecifyToEmailAddressErr@1003 : TextConst 'ENU=Please enter a recipient email address.';
      MailNotConfiguredErr@1018 : TextConst 'ENU=An email account must be configured to send emails.';
      ShowEmailContentLbl@1014 : TextConst 'ENU=Preview email';
      NoOfAttachmentsTxt@1012 : TextConst '@@@="%1=an integer number, starting at 0";ENU=Other attachments (%1)';
      NoOfAttachmentsValueTxt@1006 : Text;
      AddAttachmentTxt@1004 : TextConst 'ENU=Add attachment';
      ViewPdfInvoiceLbl@1019 : TextConst 'ENU=PDF invoice';
      SubjectText@1002 : Text[250];
      BodyText@1010 : Text;
      HasInvoiceAttachment@1011 : Boolean;
      IsPhoneClient@1009 : Boolean;
      IsBodyHidden@1015 : Boolean;

    [External]
    PROCEDURE SetValues@1(NewDocumentHeaderRecordVariant@1001 : Variant;VAR NewTempEmailItem@1000 : TEMPORARY Record "Email Item");
    VAR
      DummyVariant@1002 : Variant;
    BEGIN
      TempEmailItem.COPY(NewTempEmailItem,true);
      DocumentHeaderRecordVariant := NewDocumentHeaderRecordVariant;
      HasInvoiceAttachment := FORMAT(DocumentHeaderRecordVariant) <> FORMAT(DummyVariant);
      GetEmailBody('');
    END;

    LOCAL PROCEDURE GetEmailBody@3(SendTo@1003 : Text[250]);
    VAR
      SalesHeader@1000 : Record "Sales Header";
      SalesInvoiceHeader@1004 : Record "Sales Invoice Header";
      ReportSelections@1001 : Record "Report Selections";
      ReportUsage@1002 : Option;
      CustomerNo@1005 : Code[20];
    BEGIN
      if GetSalesInvoiceHeader(DocumentHeaderRecordVariant,SalesInvoiceHeader) then begin
        ReportUsage := ReportSelections.Usage::"S.Invoice";
        CustomerNo := SalesInvoiceHeader."Sell-to Customer No.";
      end else
        if GetSalesHeader(DocumentHeaderRecordVariant,SalesHeader) then begin
          case SalesHeader."Document Type" of
            SalesHeader."Document Type"::Quote:
              ReportUsage := ReportSelections.Usage::"S.Quote";
            SalesHeader."Document Type"::Invoice:
              ReportUsage := ReportSelections.Usage::"S.Invoice Draft";
            else
              ReportUsage := ReportSelections.Usage::"S.Invoice Draft"; // default
          end;
          CustomerNo := SalesHeader."Sell-to Customer No.";
        end else
          exit;

      if ReportSelections.GetEmailBodyCustomText(TempEmailItem."Body File Path",ReportUsage,DocumentHeaderRecordVariant,
           CustomerNo,SendTo,TempEmailItem.GetBodyText)
      then
        TempEmailItem.MODIFY;
      COMMIT;
    END;

    LOCAL PROCEDURE GetSalesHeader@4(DocVariant@1000 : Variant;VAR SalesHeader@1001 : Record "Sales Header") : Boolean;
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      if not DocVariant.ISRECORD then
        exit(false);
      RecRef.GETTABLE(DocVariant);
      if RecRef.NUMBER <> DATABASE::"Sales Header" then
        exit(false);
      SalesHeader := DocVariant;
      exit(true);
    END;

    LOCAL PROCEDURE GetSalesInvoiceHeader@17(DocVariant@1000 : Variant;VAR SalesInvoiceHeader@1001 : Record "Sales Invoice Header") : Boolean;
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      if not DocVariant.ISRECORD then
        exit(false);
      RecRef.GETTABLE(DocVariant);
      if RecRef.NUMBER <> DATABASE::"Sales Invoice Header" then
        exit(false);
      SalesInvoiceHeader := DocVariant;
      exit(true);
    END;

    LOCAL PROCEDURE UpdateCcBccText@2(SendCC@1001 : Text;SendBCC@1002 : Text);
    BEGIN
      CcAndBcc := SendCC;
      if SendBCC <> '' then begin
        if CcAndBcc <> '' then
          CcAndBcc += '; ';
        CcAndBcc += SendBCC;
      end;
    END;

    LOCAL PROCEDURE UpdateNoOfAttachmentsLabel@7(NoOfAttachments@1000 : Integer);
    BEGIN
      if NoOfAttachments = 0 then
        NoOfAttachmentsValueTxt := AddAttachmentTxt
      else
        NoOfAttachmentsValueTxt := STRSUBSTNO(NoOfAttachmentsTxt,NoOfAttachments);
    END;

    [External]
    PROCEDURE HideBody@5();
    BEGIN
      IsBodyHidden := true;
    END;

    BEGIN
    END.
  }
}

