OBJECT Table 2840 Native - Gen. Settings Buffer
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160131.737T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Native - Gen. Settings Buffer;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Primary Key }
    { 2   ;   ;Currency Symbol     ;Text10        ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Currency Symbol }
    { 3   ;   ;Paypal Email Address;Text250       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Paypal Email Address }
    { 4   ;   ;Country/Region Code ;Code10        ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Country/Region Code }
    { 5   ;   ;Language Locale ID  ;Integer       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Language Locale ID }
    { 6   ;   ;Language Code       ;Text50        ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Language Code }
    { 7   ;   ;Language Display Name;Text80       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Language Display Name }
    { 50  ;   ;Default Tax ID      ;GUID          ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Default Tax ID;
                                                   Editable=false }
    { 51  ;   ;Defauilt Tax Description;Text50    ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Defauilt Tax Description;
                                                   Editable=false }
    { 52  ;   ;Default Payment Terms ID;GUID      ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Default Payment Terms ID;
                                                   Editable=false }
    { 53  ;   ;Def. Pmt. Term Description;Text50  ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Def. Pmt. Term Description;
                                                   Editable=false }
    { 54  ;   ;Default Payment Method ID;GUID     ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Default Payment Method ID;
                                                   Editable=false }
    { 55  ;   ;Def. Pmt. Method Description;Text50;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Def. Pmt. Method Description;
                                                   Editable=false }
    { 56  ;   ;Amount Rounding Precision;Decimal  ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Amount Rounding Precision;
                                                   Editable=false }
    { 57  ;   ;Unit-Amount Rounding Precision;Decimal;
                                                   DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Unit-Amount Rounding Precision;
                                                   Editable=false }
    { 58  ;   ;VAT/Tax Rounding Precision;Decimal ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=VAT/Tax Rounding Precision;
                                                   Editable=false }
    { 59  ;   ;Quantity Rounding Precision;Decimal;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Quantity Rounding Precision;
                                                   Editable=false }
    { 60  ;   ;EnableSync          ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=EnableSync }
    { 61  ;   ;EnableSyncCoupons   ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=EnableSyncCoupons }
  }
  KEYS
  {
    {    ;"Primary Key"                           ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      RecordMustBeTemporaryErr@1000 : TextConst 'ENU=General Settings Buffer must be used as a temporary record.';
      CannotEnableCouponsSyncErr@1001 : TextConst 'ENU=Cannot enable coupons synchronization while Microsoft Graph synchronization is turned off.';
      CannotSetWebhookSubscriptionUserErr@1007 : TextConst 'ENU=Cannot set the webhook subscription user.';
      CannotGetCompanyInformationErr@1003 : TextConst 'ENU=Cannot get the company information.';
      SyncOnlyAllowedInSaasErr@1004 : TextConst 'ENU=Microsoft Graph synchronization is only allowed in SaaS.';
      SyncNotAllowedInDemoCompanyErr@1005 : TextConst 'ENU=Microsoft Graph synchronization is not allowed in a demo company.';
      SyncNotAllowedErr@1006 : TextConst 'ENU=Microsoft Graph synchronization is not allowed.';

    PROCEDURE LoadRecord@2();
    VAR
      CompanyInformation@1001 : Record "Company Information";
      O365SalesInitialSetup@1003 : Record "O365 Sales Initial Setup";
      GeneralLedgerSetup@1004 : Record "General Ledger Setup";
      TempNativeAPITaxSetup@1007 : TEMPORARY Record "Native - API Tax Setup";
      MarketingSetup@1008 : Record "Marketing Setup";
      PaypalAccountProxy@1002 : Codeunit "Paypal Account Proxy";
    BEGIN
      if not ISTEMPORARY then
        ERROR(RecordMustBeTemporaryErr);

      DELETEALL;
      CLEAR(Rec);

      CompanyInformation.GET;
      "Country/Region Code" := CompanyInformation."Country/Region Code";

      GeneralLedgerSetup.GET;
      "Currency Symbol" := GeneralLedgerSetup.GetCurrencySymbol;
      "Amount Rounding Precision" := GetNumberOfDecimals(GeneralLedgerSetup."Amount Rounding Precision");
      "Unit-Amount Rounding Precision" := GetNumberOfDecimals(GeneralLedgerSetup."Unit-Amount Rounding Precision");
      "Quantity Rounding Precision" := 5;
      // We hardcode these to 2/3 as they are like that in business center.
      if GeneralLedgerSetup.UseVat then
        "VAT/Tax Rounding Precision" := 2
      else
        "VAT/Tax Rounding Precision" := 3;

      PaypalAccountProxy.GetPaypalAccount("Paypal Email Address");

      TempNativeAPITaxSetup.LoadSetupRecords;
      TempNativeAPITaxSetup.SETRANGE(Default,true);
      if TempNativeAPITaxSetup.FINDFIRST then begin
        "Default Tax ID" := TempNativeAPITaxSetup.Id;
        "Defauilt Tax Description" := TempNativeAPITaxSetup.Description;
      end;

      GetLanguageInfo;
      GetPaymentInfo;

      if MarketingSetup.GET then begin
        EnableSync := MarketingSetup."Sync with Microsoft Graph";
        if EnableSync then begin
          O365SalesInitialSetup.GET;
          EnableSyncCoupons := O365SalesInitialSetup."Coupons Integration Enabled";
        end;
      end;

      INSERT(true);
    END;

    PROCEDURE SaveRecord@1();
    VAR
      PaypalAccountProxy@1000 : Codeunit "Paypal Account Proxy";
    BEGIN
      if xRec."Currency Symbol" <> "Currency Symbol" then
        UpdateCurrencySymbol;

      if xRec."Paypal Email Address" <> "Paypal Email Address" then
        PaypalAccountProxy.SetPaypalAccount("Paypal Email Address",true);

      if xRec."Country/Region Code" <> "Country/Region Code" then
        UpdateCountryRegionCode;

      if xRec."Language Locale ID" <> "Language Locale ID" then
        UpdateLanguageId;

      if xRec.EnableSync <> EnableSync then
        UpdateSync;

      if xRec.EnableSyncCoupons <> EnableSyncCoupons then
        UpdateCouponsSync;
    END;

    LOCAL PROCEDURE UpdateCurrencySymbol@3();
    VAR
      GeneralLedgerSetup@1000 : Record "General Ledger Setup";
    BEGIN
      GeneralLedgerSetup.GET;
      if "Currency Symbol" <> GeneralLedgerSetup."Local Currency Symbol" then begin
        GeneralLedgerSetup.VALIDATE("Local Currency Symbol","Currency Symbol");
        GeneralLedgerSetup.MODIFY(true);
      end;
    END;

    LOCAL PROCEDURE UpdateCountryRegionCode@6();
    VAR
      CompanyInformation@1000 : Record "Company Information";
    BEGIN
      CompanyInformation.GET;
      if CompanyInformation."Country/Region Code" <> "Country/Region Code" then begin
        CompanyInformation.VALIDATE("Country/Region Code","Country/Region Code");
        CompanyInformation.MODIFY(true);
      end;
    END;

    LOCAL PROCEDURE UpdateLanguageId@9();
    VAR
      UserPersonalization@1000 : Record "User Personalization";
    BEGIN
      UserPersonalization.GET(USERSECURITYID);
      if "Language Locale ID" <> UserPersonalization."Language ID" then begin
        UserPersonalization.VALIDATE("Language ID","Language Locale ID");
        UserPersonalization.MODIFY(true);
        GetLanguageInfo;
        GetPaymentInfo;
      end;
    END;

    LOCAL PROCEDURE UpdateSync@7();
    VAR
      MarketingSetup@1001 : Record "Marketing Setup";
      O365SalesBackgroundSetup@1000 : Codeunit "O365 Sales Background Setup";
    BEGIN
      CheckSyncAllowed;

      O365SalesBackgroundSetup.InitializeGraphSync(EnableSync,false);

      MarketingSetup.GET;
      EnableSync := MarketingSetup."Sync with Microsoft Graph";

      if not EnableSync then
        EnableSyncCoupons := false;
    END;

    LOCAL PROCEDURE UpdateCouponsSync@10();
    VAR
      MarketingSetup@1000 : Record "Marketing Setup";
      O365SalesInitialSetup@1001 : Record "O365 Sales Initial Setup";
    BEGIN
      if EnableSyncCoupons then begin
        CheckSyncAllowed;
        MarketingSetup.GET;
        if not MarketingSetup."Sync with Microsoft Graph" then
          ERROR(CannotEnableCouponsSyncErr);
        if MarketingSetup.TrySetWebhookSubscriptionUser(USERSECURITYID) then
          ERROR(CannotSetWebhookSubscriptionUserErr);
      end;
      O365SalesInitialSetup.GET;
      O365SalesInitialSetup."Coupons Integration Enabled" := EnableSyncCoupons;
      O365SalesInitialSetup.MODIFY(true);
    END;

    LOCAL PROCEDURE GetNumberOfDecimals@4(AmountRoundingPrecision@1000 : Decimal) : Integer;
    VAR
      Count@1001 : Integer;
    BEGIN
      Count := 0;

      if AmountRoundingPrecision >= 1 then
        exit(Count);

      repeat
        Count += 1;
        AmountRoundingPrecision := AmountRoundingPrecision * 10;
      until AmountRoundingPrecision >= 1;

      exit(Count);
    END;

    PROCEDURE GetPaymentInfo@12();
    VAR
      O365SalesInitialSetup@1001 : Record "O365 Sales Initial Setup";
      PaymentMethod@1005 : Record "Payment Method";
      PaymentTerms@1006 : Record "Payment Terms";
    BEGIN
      O365SalesInitialSetup.GET;

      if PaymentTerms.GET(O365SalesInitialSetup."Default Payment Terms Code") then begin
        "Default Payment Terms ID" := PaymentTerms.Id;
        "Def. Pmt. Term Description" := PaymentTerms.GetDescriptionInCurrentLanguage;
      end;

      if PaymentMethod.GET(O365SalesInitialSetup."Default Payment Method Code") then begin
        "Default Payment Method ID" := PaymentMethod.Id;
        "Def. Pmt. Method Description" :=
          COPYSTR(PaymentMethod.GetDescriptionInCurrentLanguage,1,MAXSTRLEN("Def. Pmt. Method Description"));
      end;
    END;

    LOCAL PROCEDURE GetLanguageInfo@5();
    VAR
      UserPersonalization@1001 : Record "User Personalization";
      WindowsLanguage@1000 : Record "Windows Language";
      CultureInfo@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Globalization.CultureInfo";
    BEGIN
      UserPersonalization.GET(USERSECURITYID);
      "Language Locale ID" := UserPersonalization."Language ID";
      CultureInfo := CultureInfo.CultureInfo("Language Locale ID");
      "Language Code" := CultureInfo.Name;
      if WindowsLanguage.GET("Language Locale ID") then
        "Language Display Name" := WindowsLanguage.Name;
    END;

    PROCEDURE CheckSyncAllowed@8();
    VAR
      CompanyInformation@1003 : Record "Company Information";
      CompanyInformationMgt@1002 : Codeunit "Company Information Mgt.";
      PermissionManager@1001 : Codeunit "Permission Manager";
      WebhookManagement@1000 : Codeunit "Webhook Management";
    BEGIN
      if WebhookManagement.IsSyncAllowed then
        exit;

      if not CompanyInformation.GET then
        ERROR(CannotGetCompanyInformationErr);

      if not PermissionManager.SoftwareAsAService then
        ERROR(SyncOnlyAllowedInSaasErr);

      if CompanyInformationMgt.IsDemoCompany then
        ERROR(SyncNotAllowedInDemoCompanyErr);

      ERROR(SyncNotAllowedErr);
    END;

    BEGIN
    END.
  }
}

