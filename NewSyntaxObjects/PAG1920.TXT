OBJECT Page 1920 Container Sandbox Environment
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=161359.47T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Sandbox Environment (Container) (Preview);
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    LinksAllowed=false;
    PageType=NavigatePage;
    ShowFilter=false;
    OnInit=BEGIN
             LoadTopBanners;
           END;

    OnOpenPage=VAR
                 PermissionManager@1000 : Codeunit "Permission Manager";
               BEGIN
                 if not PermissionManager.SoftwareAsAService or PermissionManager.IsSandboxConfiguration then
                   ERROR(EnvironmentErr);
               END;

    ActionList=ACTIONS
    {
      { 7       ;    ;ActionContainer;
                      Name=ActionContainer7;
                      ActionContainerType=ActionItems }
      { 8       ;1   ;Action    ;
                      Name=AzureVM;
                      CaptionML=ENU=Host in Azure;
                      ToolTipML=ENU=Create a container sandbox environment hosted on an Azure VM;
                      ApplicationArea=#Basic, #Suite;
                      InFooterBar=true;
                      OnAction=BEGIN
                                 HYPERLINK(GetFunctionUrl('BCSandboxAzure'));
                               END;
                                }
      { 9       ;1   ;Action    ;
                      Name=HostLocally;
                      CaptionML=ENU=Host locally;
                      ToolTipML=ENU=Create a container sandbox environment hosted on your local machine;
                      ApplicationArea=#Basic, #Suite;
                      InFooterBar=true;
                      OnAction=BEGIN
                                 HYPERLINK(GetFunctionUrl('BCSandboxLocal'));
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name="";
                CaptionML=ENU="""""";
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Control2;
                Visible=TopBannerVisible;
                Editable=False;
                GroupType=Group }

    { 3   ;2   ;Field     ;
                Name=MediaResourcesStandard;
                ApplicationArea=#Basic, #Suite;
                SourceExpr=MediaResourcesStandard."Media Reference";
                Editable=FALSE }

    { 4   ;1   ;Group     ;
                Name=Control4;
                GroupType=Group;
                InstructionalTextML=ENU=If your development requirements go beyond what the sandbox environment offers, you can create a container-based environment with the full product and use that for development and testing. You can host the container either locally or on an Azure VM. }

    { 5   ;1   ;Group     ;
                Name=Control5;
                GroupType=Group;
                InstructionalTextML=ENU=If you decide to use Azure VM you will be asked to log into the Azure Portal and fill out an Azure Resource Management Template, and then press Purchase. The Virtual Machine will be running a container with the same version of the product as your production environment and will run in your own subscription incurring costs as determined by the selected VM size. }

    { 6   ;1   ;Group     ;
                Name=Control6;
                GroupType=Group;
                InstructionalTextML=ENU=If you decide to run locally we will provide a PowerShell script that must be run on a Windows machine with PowerShell and the appropriate container hosting software installed. The PowerShell script will install and use the NavContainerHelper to run a container with the same version of the product as your production environment. }

    { 10  ;1   ;Group     ;
                Name=Control10;
                GroupType=Group;
                InstructionalTextML=ENU=This Sandbox environment feature is provided as a free preview solely for testing, development and evaluation. You will not use the Sandbox in a live operating environment. Microsoft may, in its sole discretion, change the Sandbox environment or subject it to a fee for a final, commercial version, if any, or may elect not to release one. }

  }
  CODE
  {
    VAR
      MediaRepositoryDone@1009 : Record "Media Repository";
      MediaRepositoryStandard@1000 : Record "Media Repository";
      MediaResourcesDone@1001 : Record "Media Resources";
      MediaResourcesStandard@1003 : Record "Media Resources";
      ClientTypeManagement@1004 : Codeunit ClientTypeManagement;
      TenantManagement@1006 : Codeunit "Tenant Management";
      EnvironmentErr@1008 : TextConst 'ENU=This feature is only available in the online production version of the product.';
      Uri@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      TopBannerVisible@1007 : Boolean;

    LOCAL PROCEDURE LoadTopBanners@1();
    BEGIN
      if MediaRepositoryStandard.GET('AssistedSetup-NoText-400px.png',FORMAT(ClientTypeManagement.GetCurrentClientType)) and
         MediaRepositoryDone.GET('AssistedSetupDone-NoText-400px.png',FORMAT(ClientTypeManagement.GetCurrentClientType))
      then
        if MediaResourcesStandard.GET(MediaRepositoryStandard."Media Resources Ref") and
           MediaResourcesDone.GET(MediaRepositoryDone."Media Resources Ref")
        then
          TopBannerVisible := MediaResourcesDone."Media Reference".HASVALUE;
    END;

    LOCAL PROCEDURE GetFunctionUrl@3(FunctionName@1004 : Text) : Text;
    VAR
      EnvironmentMgt@1003 : Codeunit "Environment Mgt.";
      UrlParameters@1001 : Text;
      FunctionUrl@1000 : Text;
      EnvironmentSuffix@1002 : Text;
    BEGIN
      UrlParameters := '?platform=' + Uri.EscapeDataString(TenantManagement.GetPlatformVersion) +
        '&application=' + Uri.EscapeDataString(TenantManagement.GetApplicationVersion) +
        '&family=' + Uri.EscapeDataString(TenantManagement.GetApplicationFamily);

      if EnvironmentMgt.IsPROD then
        EnvironmentSuffix := ''
      else
        EnvironmentSuffix := '-Tie';

      FunctionUrl := 'https://aka.ms/' + FunctionName + EnvironmentSuffix + UrlParameters;
      exit(FunctionUrl)
    END;

    BEGIN
    END.
  }
}

