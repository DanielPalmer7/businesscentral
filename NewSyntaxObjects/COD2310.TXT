OBJECT Codeunit 2310 O365 Sales Invoice Mgmt
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160717.663T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ProcessDraftInvoiceInstructionTxt@1000 : TextConst 'ENU=Do you want to keep the new invoice?';
      ProcessDraftEstimateInstructionTxt@1010 : TextConst 'ENU=Do you want to keep the new estimate?';
      AddDiscountTxt@1003 : TextConst 'ENU=Add discount';
      ChangeDiscountTxt@1002 : TextConst 'ENU=Change discount';
      AddAttachmentTxt@1005 : TextConst 'ENU=Add attachment';
      NoOfAttachmentsTxt@1004 : TextConst '@@@="%1=an integer number, starting at 0";ENU=Attachments (%1)';
      InvoiceDiscountChangedMsg@1007 : TextConst 'ENU=Changing the quantity has cleared the line discount.';
      AmountOutsideRangeMsg@1008 : TextConst 'ENU=We adjusted the discount to not exceed the line amount.';
      ConfigValidateManagement@1015 : Codeunit "Config. Validate Management";
      CouponsManagement@1014 : Codeunit "Coupons Management";
      NotificationLifecycleMgt@1065 : Codeunit "Notification Lifecycle Mgt.";
      CouponsHasBeenCheckedForCustomer@1009 : Boolean;
      HasWarnedAboutExpiredOrClaimedCoupons@1006 : Boolean;
      TaxSetupNeededMsg@1020002 : TextConst 'ENU=You haven''t set up tax information for your business.';
      SetupTaxLbl@1020001 : TextConst 'ENU=Set up tax';
      TaxNotificationIdTok@1020054 : TextConst '@@@={LOCKED};ENU=6733addd-c3d5-47ce-852a-f66385af5af2';
      CustomerCreatedMsg@1020 : TextConst '@@@="%1= Customer name";ENU=We added %1 to your customer list.';
      InvoiceDiscountLbl@1011 : TextConst 'ENU=Invoice Discount';
      UndoTxt@1013 : TextConst 'ENU=Undo';
      CustomerBlockedErr@1012 : TextConst 'ENU=This customer has been blocked and cannot be invoiced.';
      NotificationShownForCustomer@1001 : Boolean;
      ItemCreatedMsg@1016 : TextConst '@@@="%1= Item description";ENU=We added %1 to your item list.';
      ItemNotExistErr@1018 : TextConst 'ENU=The item does not exist.';
      CountryDoesntExistErr@1017 : TextConst 'ENU=Please choose an existing country or region, or add a new one.';
      CustomerIsBlockedMsg@1021 : TextConst '@@@="%1= Customer name";ENU=The customer %1 has been blocked for any further business.';
      NotificationShownForBlockedCustomer@1019 : Boolean;

    [External]
    PROCEDURE GetCustomerEmail@2(CustomerNo@1001 : Code[20]) : Text[80];
    VAR
      Customer@1000 : Record Customer;
    BEGIN
      if CustomerNo <> '' then
        if Customer.GET(CustomerNo) then
          exit(Customer."E-Mail");
      exit('');
    END;

    [External]
    PROCEDURE ProcessDraftInvoiceOnCreate@3(VAR SalesHeader@1001 : Record "Sales Header") : Boolean;
    VAR
      InstructionsWithDocumentTypeTxt@1003 : Text;
    BEGIN
      if SalesHeader."Document Type" = SalesHeader."Document Type"::Quote then
        InstructionsWithDocumentTypeTxt := ProcessDraftEstimateInstructionTxt
      else
        InstructionsWithDocumentTypeTxt := ProcessDraftInvoiceInstructionTxt;

      if CONFIRM(InstructionsWithDocumentTypeTxt,true) then
        exit(true);

      exit(SalesHeader.DELETE(true)); // Delete all invoice lines and invoice header
    END;

    [External]
    PROCEDURE IsCustomerCompanyContact@89(CustomerNo@1001 : Code[20]) : Boolean;
    VAR
      Customer@1000 : Record Customer;
    BEGIN
      if CustomerNo <> '' then
        if Customer.GET(CustomerNo) then
          exit(Customer."Contact Type" = Customer."Contact Type"::Company);
      exit(false);
    END;

    [External]
    PROCEDURE UpdateCouponCodes@6(SalesHeader@1002 : Record "Sales Header";VAR CouponCodes@1000 : Text);
    VAR
      O365CouponClaim@1001 : Record "O365 Coupon Claim";
    BEGIN
      CouponCodes := O365CouponClaim.GetAppliedClaimsForSalesDocument(SalesHeader);
    END;

    PROCEDURE FindCountryCodeFromInput@44(UserInput@1000 : Text) : Code[10];
    VAR
      CountryRegion@1001 : Record "Country/Region";
    BEGIN
      if UserInput = '' then
        exit('');

      if CountryRegion.GET(COPYSTR(UPPERCASE(UserInput),1,10)) then
        exit(COPYSTR(UPPERCASE(UserInput),1,10));

      CountryRegion.SETFILTER(
        Name,
        '@*' + COPYSTR(UserInput,1,MAXSTRLEN(CountryRegion.Name)) + '*'
        );

      if CountryRegion.FINDFIRST then
        exit(CountryRegion.Code);

      ERROR(CountryDoesntExistErr);
    END;

    [External]
    PROCEDURE UpdateAddress@4(VAR SalesHeader@1001 : Record "Sales Header";VAR FullAddress@1002 : Text);
    VAR
      TempStandardAddress@1000 : TEMPORARY Record "Standard Address";
    BEGIN
      TempStandardAddress.CopyFromSalesHeaderSellTo(SalesHeader);
      FullAddress := TempStandardAddress.ToString;
      SalesHeader."Bill-to Address" := SalesHeader."Sell-to Address";
      SalesHeader."Bill-to Address 2" := SalesHeader."Sell-to Address 2";
      SalesHeader."Bill-to Post Code" := SalesHeader."Sell-to Post Code";
      SalesHeader."Bill-to City" := SalesHeader."Sell-to City";
      SalesHeader."Bill-to Country/Region Code" := SalesHeader."Sell-to Country/Region Code";
      SalesHeader."Bill-to County" := SalesHeader."Sell-to County";
    END;

    PROCEDURE UpdateSellToAddress@1020001(VAR SalesHeader@1000 : Record "Sales Header";Customer@1001 : Record Customer);
    BEGIN
      SalesHeader."Sell-to Address" := Customer.Address;
      SalesHeader."Sell-to Address 2" := Customer."Address 2";
      SalesHeader."Sell-to City" := Customer.City;
      SalesHeader."Sell-to Post Code" := Customer."Post Code";
      SalesHeader."Sell-to County" := Customer.County;
      SalesHeader."Sell-to Country/Region Code" := Customer."Country/Region Code";
    END;

    [External]
    PROCEDURE CalcInvoiceDiscountAmount@8(VAR SalesHeader@1001 : Record "Sales Header";VAR SubTotalAmount@1003 : Decimal;VAR DiscountTxt@1002 : Text;VAR InvoiceDiscountAmount@1005 : Decimal;VAR InvDiscAmountVisible@1006 : Boolean);
    VAR
      SalesLine@1000 : Record "Sales Line";
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.CALCSUMS("Inv. Discount Amount","Line Amount");
      SubTotalAmount := SalesLine."Line Amount";
      InvoiceDiscountAmount := SalesLine."Inv. Discount Amount";
      if SalesHeader."Invoice Discount Value" <> 0 then
        DiscountTxt := ChangeDiscountTxt
      else
        DiscountTxt := AddDiscountTxt;

      InvDiscAmountVisible := SalesHeader."Invoice Discount Value" <> 0;
    END;

    [External]
    PROCEDURE UpdateNoOfAttachmentsLabel@7(NoOfAttachments@1000 : Integer;VAR NoOfAttachmentsValueTxt@1003 : Text);
    BEGIN
      if NoOfAttachments = 0 then
        NoOfAttachmentsValueTxt := AddAttachmentTxt
      else
        NoOfAttachmentsValueTxt := STRSUBSTNO(NoOfAttachmentsTxt,NoOfAttachments);
    END;

    [External]
    PROCEDURE OnAfterGetSalesHeaderRecord@1(VAR SalesHeader@1000 : Record "Sales Header";VAR CurrencyFormat@1005 : Text;VAR TaxAreaDescription@1007 : Text[50]);
    VAR
      Currency@1004 : Record Currency;
      GLSetup@1003 : Record "General Ledger Setup";
      TaxArea@1002 : Record "Tax Area";
      CurrencySymbol@1001 : Text[10];
    BEGIN
      SalesHeader.SetDefaultPaymentServices;
      if SalesHeader."Currency Code" = '' then begin
        GLSetup.GET;
        CurrencySymbol := GLSetup.GetCurrencySymbol;
      end else begin
        if Currency.GET(SalesHeader."Currency Code") then;
        CurrencySymbol := Currency.GetCurrencySymbol;
      end;
      CurrencyFormat := STRSUBSTNO('%1<precision, 2:2><standard format, 0>',CurrencySymbol);

      TaxAreaDescription := '';
      if SalesHeader."Tax Area Code" <> '' then
        if TaxArea.GET(SalesHeader."Tax Area Code") then
          TaxAreaDescription := TaxArea.GetDescriptionInCurrentLanguage;
    END;

    [External]
    PROCEDURE LookupCustomerName@5(VAR SalesHeader@1003 : Record "Sales Header";Text@1000 : Text;VAR CustomerName@1005 : Text[50];VAR CustomerEmail@1004 : Text[80]) : Boolean;
    VAR
      Customer@1002 : Record Customer;
      BCO365CustomerList@1001 : Page "BC O365 Customer List";
    BEGIN
      if Text <> '' then begin
        Customer.SETRANGE(Name,Text);
        if Customer.FINDFIRST then;
        Customer.SETRANGE(Name);
      end;

      BCO365CustomerList.LOOKUPMODE(true);
      BCO365CustomerList.SETRECORD(Customer);

      if BCO365CustomerList.RUNMODAL = ACTION::LookupOK then begin
        BCO365CustomerList.GETRECORD(Customer);
        SalesHeader.SetHideValidationDialog(true);
        CustomerName := Customer.Name;
        SalesHeader.VALIDATE("Sell-to Customer No.",Customer."No.");
        CustomerEmail := GetCustomerEmail(SalesHeader."Sell-to Customer No.");
        exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE NotifyOrWarnAboutCoupons@9(VAR SalesHeader@1003 : Record "Sales Header");
    BEGIN
      if not HasWarnedAboutExpiredOrClaimedCoupons then
        HasWarnedAboutExpiredOrClaimedCoupons :=
          CouponsManagement.WarnIfExpiredOrClaimedCoupons(SalesHeader."Document Type",SalesHeader."No.");
      if (SalesHeader."Sell-to Customer No." <> '') and
         (not CouponsHasBeenCheckedForCustomer) and (not HasWarnedAboutExpiredOrClaimedCoupons)
      then begin
        COMMIT;
        if CODEUNIT.RUN(CODEUNIT::"Coupons Sync",SalesHeader) then;
        NotificationShownForCustomer := CouponsManagement.ShowNotificationIfAnyNotApplied(SalesHeader);
        CouponsHasBeenCheckedForCustomer := true;
      end;
    END;

    [External]
    PROCEDURE InvoiceDateChanged@26(VAR SalesHeader@1003 : Record "Sales Header");
    BEGIN
      if not NotificationShownForCustomer then
        NotificationShownForCustomer := CouponsManagement.ShowNotificationIfAnyNotApplied(SalesHeader);
    END;

    [External]
    PROCEDURE GetCouponCodesAndCouponsExists@10(VAR SalesHeader@1001 : Record "Sales Header";VAR CouponCodes@1000 : Text;VAR CouponsExistsForCustomer@1002 : Boolean);
    VAR
      O365CouponClaim@1003 : Record "O365 Coupon Claim";
    BEGIN
      UpdateCouponCodes(SalesHeader,CouponCodes);
      CouponsExistsForCustomer := O365CouponClaim.CouponsExistForCustomer(SalesHeader."Sell-to Customer No.");
    END;

    PROCEDURE CustomerChanged@15();
    BEGIN
      CouponsManagement.RecallNotifications(NotificationShownForCustomer,HasWarnedAboutExpiredOrClaimedCoupons);
      HasWarnedAboutExpiredOrClaimedCoupons := false;
      CouponsHasBeenCheckedForCustomer := false;
      NotificationShownForCustomer := false;
    END;

    [External]
    PROCEDURE UpdateCustomerFields@11(SalesHeader@1000 : Record "Sales Header";VAR CustomerName@1002 : Text[50];VAR CustomerEmail@1001 : Text[80];VAR IsCompanyContact@1003 : Boolean);
    BEGIN
      CustomerName := SalesHeader."Sell-to Customer Name";
      CustomerEmail := GetCustomerEmail(SalesHeader."Sell-to Customer No.");
      IsCompanyContact := IsCustomerCompanyContact(SalesHeader."Sell-to Customer No.");
    END;

    [External]
    PROCEDURE ValidateCustomerName@12(VAR SalesHeader@1001 : Record "Sales Header";VAR CustomerName@1003 : Text[50];VAR CustomerEmail@1002 : Text[80]);
    VAR
      Customer@1000 : Record Customer;
      CompanyInformation@1020000 : Record "Company Information";
      Contact@1004 : Record Contact;
    BEGIN
      if SalesHeader."Sell-to Customer Name" = '' then
        exit;

      // Lookup by contact number
      if STRLEN(SalesHeader."Sell-to Customer Name") <= MAXSTRLEN(Contact."No.") then
        if Contact.GET(COPYSTR(SalesHeader."Sell-to Customer Name",1,MAXSTRLEN(Contact."No."))) then
          if not FindCustomerByContactNo(Contact."No.",Customer) then
            Customer.GET(CreateCustomerFromContact(Contact));

      // Lookup by customer number/name
      if Customer."No." = '' then
        if not Customer.GET(Customer.GetCustNoOpenCard(SalesHeader."Sell-to Customer Name",false,false)) then
          // Lookup by contact name
          if Contact.GET(Contact.GetContNo(SalesHeader."Sell-to Customer Name")) then begin
            if FindCustomerByContactNo(Contact."No.",Customer) then begin
              if Customer.IsBlocked then
                ERROR(CustomerBlockedErr);
            end else
              Customer.GET(CreateCustomerFromContact(Contact));
          end;

      // A customer is found, but it is blocked: silently undo the lookup.
      // (e.g. a new customer is created from lookup and immediately deleted from customer card)
      if (Customer."No." <> '') and Customer.IsBlocked then
        ERROR('');

      // When no customer or contact is found, create a new and notify the user
      if Customer."No." = '' then begin
        if SalesHeader."No." = '' then
          SalesHeader.INSERT(true);
        Customer.GET(Customer.CreateNewCustomer(COPYSTR(SalesHeader."Sell-to Customer Name",1,MAXSTRLEN(Customer.Name)),false));
        SendCustomerCreatedNotification(Customer,SalesHeader);
      end;

      EnforceCustomerTemplateIntegrity(Customer);

      SalesHeader.VALIDATE("Sell-to Customer No.",Customer."No.");
      CustomerName := Customer.Name;
      CustomerEmail := GetCustomerEmail(SalesHeader."Sell-to Customer No.");

      if SalesHeader."Tax Liable" and (SalesHeader."Tax Area Code" = '') then
        if CompanyInformation.GET then
          if CompanyInformation."Tax Area Code" <> '' then
            SalesHeader.VALIDATE("Tax Area Code",CompanyInformation."Tax Area Code");
    END;

    [External]
    PROCEDURE ValidateCustomerEmail@13(VAR SalesHeader@1002 : Record "Sales Header";CustomerEmail@1000 : Text[80]);
    VAR
      Customer@1003 : Record Customer;
      MailManagement@1001 : Codeunit "Mail Management";
    BEGIN
      if CustomerEmail <> '' then begin
        MailManagement.CheckValidEmailAddress(CustomerEmail);

        Customer.LOCKTABLE;
        if (SalesHeader."Sell-to Customer No." <> '') and Customer.WRITEPERMISSION then
          if Customer.GET(SalesHeader."Sell-to Customer No.") then
            if CustomerEmail <> Customer."E-Mail" then begin
              Customer."E-Mail" := CustomerEmail;
              Customer.MODIFY(true);
            end;
      end;
    END;

    PROCEDURE ValidateCustomerAddress@20(Address@1000 : Text[50];CustomerNo@1002 : Code[20]);
    VAR
      Customer@1003 : Record Customer;
    BEGIN
      if (Address <> '') and (CustomerNo <> '') then begin
        Customer.LOCKTABLE;
        if Customer.WRITEPERMISSION and Customer.GET(CustomerNo) then
          if Customer.Address = '' then begin
            Customer.Address := Address;
            Customer.MODIFY(true);
          end;
      end;
    END;

    PROCEDURE ValidateCustomerAddress2@21(Address2@1000 : Text[50];CustomerNo@1002 : Code[20]);
    VAR
      Customer@1003 : Record Customer;
    BEGIN
      if (Address2 <> '') and (CustomerNo <> '') then begin
        Customer.LOCKTABLE;
        if Customer.WRITEPERMISSION and Customer.GET(CustomerNo) then
          if Customer."Address 2" = '' then begin
            Customer."Address 2" := Address2;
            Customer.MODIFY(true);
          end;
      end;
    END;

    PROCEDURE ValidateCustomerCity@24(City@1000 : Text[30];CustomerNo@1002 : Code[20]);
    VAR
      Customer@1003 : Record Customer;
    BEGIN
      if (City <> '') and (CustomerNo <> '') then begin
        Customer.LOCKTABLE;
        if Customer.WRITEPERMISSION and Customer.GET(CustomerNo) then
          if Customer.City = '' then begin
            Customer.City := City;
            Customer.MODIFY(true);
          end;
      end;
    END;

    PROCEDURE ValidateCustomerPostCode@23(PostCode@1000 : Code[20];CustomerNo@1002 : Code[20]);
    VAR
      Customer@1003 : Record Customer;
    BEGIN
      if (PostCode <> '') and (CustomerNo <> '') then begin
        Customer.LOCKTABLE;
        if Customer.WRITEPERMISSION and Customer.GET(CustomerNo) then
          if Customer."Post Code" = '' then begin
            Customer."Post Code" := PostCode;
            Customer.MODIFY(true);
          end;
      end;
    END;

    PROCEDURE ValidateCustomerCounty@22(County@1000 : Text[30];CustomerNo@1002 : Code[20]);
    VAR
      Customer@1003 : Record Customer;
    BEGIN
      if (County <> '') and (CustomerNo <> '') then begin
        Customer.LOCKTABLE;
        if Customer.WRITEPERMISSION and Customer.GET(CustomerNo) then
          if Customer.County = '' then begin
            Customer.County := County;
            Customer.MODIFY(true);
          end;
      end;
    END;

    PROCEDURE ValidateCustomerCountryRegion@25(CountryCode@1000 : Code[10];CustomerNo@1002 : Code[20]);
    VAR
      Customer@1003 : Record Customer;
    BEGIN
      if (CountryCode <> '') and (CustomerNo <> '') then begin
        Customer.LOCKTABLE;
        if Customer.WRITEPERMISSION and Customer.GET(CustomerNo) then
          if Customer."Country/Region Code" = '' then begin
            Customer."Country/Region Code" := CountryCode;
            Customer.MODIFY(true);
          end;
      end;
    END;

    PROCEDURE EditCustomerCardFromSalesHeader@394(VAR SalesHeader@1000 : Record "Sales Header";VAR FullAddress@1003 : Text);
    VAR
      BeforeCustomer@1002 : Record Customer;
      AfterCustomer@1001 : Record Customer;
    BEGIN
      if SalesHeader."Sell-to Customer No." = '' then
        exit;
      if not BeforeCustomer.GET(SalesHeader."Sell-to Customer No.") then
        exit;

      PAGE.RUNMODAL(PAGE::"BC O365 Sales Customer Card",BeforeCustomer);

      if not AfterCustomer.GET(SalesHeader."Sell-to Customer No.") then
        exit;
      if not BeforeCustomer.HasDifferentAddress(AfterCustomer) then
        exit;

      if SalesHeaderHasAddress(SalesHeader) then
        exit;

      UpdateSellToAddress(SalesHeader,AfterCustomer);
      UpdateAddress(SalesHeader,FullAddress);
    END;

    LOCAL PROCEDURE SalesHeaderHasAddress@930(SalesHeader@1000 : Record "Sales Header") : Boolean;
    BEGIN
      case true of
        SalesHeader."Sell-to Address" <> '':
          exit(true);
        SalesHeader."Sell-to Address 2" <> '':
          exit(true);
        SalesHeader."Sell-to City" <> '':
          exit(true);
        SalesHeader."Sell-to County" <> '':
          exit(true);
        SalesHeader."Sell-to Post Code" <> '':
          exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE OnQueryCloseForSalesHeader@14(VAR SalesHeader@1001 : Record "Sales Header";ForceExit@1000 : Boolean;CustomerName@1002 : Text[50]) : Boolean;
    BEGIN
      if ForceExit then
        exit(true);

      if SalesHeader."No." = '' then
        exit(true);

      if CustomerName = '' then begin
        SalesHeader.DELETE(true);
        exit(true);
      end;

      if SalesHeader.SalesLinesExist then
        exit(true);

      if GUIALLOWED then
        exit(ProcessDraftInvoiceOnCreate(SalesHeader));
    END;

    [External]
    PROCEDURE ShowInvoiceDiscountNotification@18(VAR InvoiceDiscountNotification@1000 : Notification;DocumentRecordId@1002 : RecordID);
    BEGIN
      InvoiceDiscountNotification.ID := CREATEGUID;
      InvoiceDiscountNotification.MESSAGE := InvoiceDiscountChangedMsg;
      InvoiceDiscountNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      NotificationLifecycleMgt.SendNotification(InvoiceDiscountNotification,DocumentRecordId);
    END;

    [External]
    PROCEDURE LookupDescription@17(VAR SalesLine@1003 : Record "Sales Line";Text@1000 : Text;VAR DescriptionSelected@1004 : Boolean) : Boolean;
    VAR
      Item@1002 : Record Item;
      BCO365ItemList@1001 : Page "BC O365 Item List";
    BEGIN
      if Text <> '' then begin
        Item.SETRANGE(Description,Text);
        if Item.FINDFIRST then;
        Item.SETRANGE(Description);
      end;

      BCO365ItemList.LOOKUPMODE(true);
      BCO365ItemList.SETRECORD(Item);

      if BCO365ItemList.RUNMODAL = ACTION::LookupOK then begin
        BCO365ItemList.GETRECORD(Item);
        SalesLine.SetHideValidationDialog(true);
        SalesLine.VALIDATE("No.",Item."No.");
        DescriptionSelected := SalesLine.Description <> '';
        exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE ConstructCurrencyFormatString@16(VAR SalesLine@1004 : Record "Sales Line";VAR CurrencyFormat@1003 : Text);
    VAR
      Currency@1002 : Record Currency;
      GLSetup@1001 : Record "General Ledger Setup";
      CurrencySymbol@1000 : Text[10];
    BEGIN
      if SalesLine."Currency Code" = '' then begin
        GLSetup.GET;
        CurrencySymbol := GLSetup.GetCurrencySymbol;
      end else begin
        if Currency.GET(SalesLine."Currency Code") then;
        CurrencySymbol := Currency.GetCurrencySymbol;
      end;
      CurrencyFormat := STRSUBSTNO('%1<precision, 2:2><standard format, 0>',CurrencySymbol);
    END;

    [External]
    PROCEDURE GetValueWithinBounds@1027(Value@1000 : Decimal;MinValue@1001 : Decimal;MaxValue@1002 : Decimal;VAR AmountOutsideOfBoundsNotificationSend@1003 : Boolean;DocumentRecordId@1004 : RecordID) : Decimal;
    BEGIN
      if Value < MinValue then begin
        SendOutsideRangeNotification(AmountOutsideOfBoundsNotificationSend,DocumentRecordId);
        exit(MinValue);
      end;
      if Value > MaxValue then begin
        SendOutsideRangeNotification(AmountOutsideOfBoundsNotificationSend,DocumentRecordId);
        exit(MaxValue);
      end;
      exit(Value);
    END;

    PROCEDURE OpenNewPaymentInstructionsCard@300();
    BEGIN
      if PAGE.RUNMODAL(PAGE::"BC O365 Payment Instr. Card") = ACTION::LookupOK then;
    END;

    PROCEDURE GetPaymentInstructionsName@284(PaymentInstructionsId@1000 : Integer;VAR Name@1001 : Text[20]);
    VAR
      O365PaymentInstructions@1002 : Record "O365 Payment Instructions";
    BEGIN
      Name := '';
      if O365PaymentInstructions.GET(PaymentInstructionsId) then
        Name := O365PaymentInstructions.GetNameInCurrentLanguage;
    END;

    PROCEDURE GetDefaultPaymentInstructionsId@344() : Integer;
    VAR
      O365PaymentInstructions@1000 : Record "O365 Payment Instructions";
    BEGIN
      O365PaymentInstructions.SETRANGE(Default,true);
      if O365PaymentInstructions.FINDFIRST then
        exit(O365PaymentInstructions.Id);

      exit(0);
    END;

    PROCEDURE GetPaymentInstructionsFromPostedInvoice@41(SalesInvoiceHeader@1000 : Record "Sales Invoice Header") : Text;
    VAR
      TempBlob@1004 : Record TempBlob;
      CR@1003 : Text[1];
    BEGIN
      SalesInvoiceHeader.CALCFIELDS("Payment Instructions");
      if not SalesInvoiceHeader."Payment Instructions".HASVALUE then
        exit('');

      CR[1] := 10;
      TempBlob.Blob := SalesInvoiceHeader."Payment Instructions";

      exit(TempBlob.ReadAsText(CR,TEXTENCODING::Windows));
    END;

    [External]
    PROCEDURE SendOutsideRangeNotification@1028(VAR AmountOutsideOfBoundsNotificationSend@1001 : Boolean;DocumentRecordId@1003 : RecordID);
    VAR
      AmountOutOfBoundsNotification@1000 : Notification;
    BEGIN
      if AmountOutsideOfBoundsNotificationSend then
        exit;

      AmountOutOfBoundsNotification.ID := CREATEGUID;
      AmountOutOfBoundsNotification.MESSAGE := AmountOutsideRangeMsg;
      AmountOutOfBoundsNotification.SCOPE := NOTIFICATIONSCOPE::LocalScope;
      NotificationLifecycleMgt.SendNotification(AmountOutOfBoundsNotification,DocumentRecordId);
      AmountOutsideOfBoundsNotificationSend := true;
    END;

    PROCEDURE LookupContactFromSalesHeader@143(VAR SalesHeader@1004 : Record "Sales Header") : Boolean;
    VAR
      Customer@1002 : Record Customer;
      Contact@1000 : Record Contact;
      O365ContactLookup@1001 : Page "O365 Contact Lookup";
    BEGIN
      if SalesHeader."Sell-to Contact No." <> '' then begin
        Contact.GET(SalesHeader."Sell-to Contact No.");
        O365ContactLookup.SETRECORD(Contact);
      end;
      O365ContactLookup.LOOKUPMODE(true);
      if O365ContactLookup.RUNMODAL = ACTION::LookupOK then begin
        O365ContactLookup.GETRECORD(Contact);
        if SalesHeader."Sell-to Contact No." <> Contact."No." then begin
          if not FindCustomerByContactNo(Contact."No.",Customer) then
            Customer.GET(CreateCustomerFromContact(Contact));
          EnforceCustomerTemplateIntegrity(Customer);
          SalesHeader.VALIDATE("Sell-to Customer No.",Customer."No.");
        end;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE FindCustomerByContactNo@144(ContactNo@1001 : Code[20];VAR Customer@1002 : Record Customer) : Boolean;
    VAR
      ContBusRel@1000 : Record "Contact Business Relation";
    BEGIN
      if not ContBusRel.FindByContact(ContBusRel."Link to Table"::Customer,ContactNo) then
        exit(false);

      Customer.GET(ContBusRel."No.");
      exit(true);
    END;

    LOCAL PROCEDURE CreateCustomerFromContact@146(Contact@1000 : Record Contact) : Code[20];
    VAR
      MarketingSetup@1003 : Record "Marketing Setup";
      Customer@1001 : Record Customer;
    BEGIN
      MarketingSetup.GET;
      Contact.SetHideValidationDialog(true);
      case Contact.Type of
        Contact.Type::Company:
          begin
            MarketingSetup.TESTFIELD("Cust. Template Company Code");
            Contact.CreateCustomer(MarketingSetup."Cust. Template Company Code");
          end;
        Contact.Type::Person:
          begin
            MarketingSetup.TESTFIELD("Cust. Template Person Code");
            Contact.CreateCustomer(MarketingSetup."Cust. Template Person Code");
          end;
      end;

      FindCustomerByContactNo(Contact."No.",Customer);
      exit(Customer."No.");
    END;

    PROCEDURE IsCountryCanada@1020004() : Boolean;
    VAR
      CompanyInformation@1020000 : Record "Company Information";
    BEGIN
      exit(CompanyInformation.IsCanada);
    END;

    PROCEDURE NotifyTaxSetupNeeded@1020000(SalesHeader@1020000 : Record "Sales Header");
    VAR
      TaxArea@1020008 : Record "Tax Area";
      O365TaxSettingsManagement@1020002 : Codeunit "O365 Tax Settings Management";
      TaxSetupNeededNotification@1020001 : Notification;
      TaxAreaRecordId@1020003 : RecordID;
    BEGIN
      if SalesHeader.IsTest then
        exit;

      if (SalesHeader."Sell-to Customer Name" = '') or (not SalesHeader."Tax Liable") then
        exit;

      if O365TaxSettingsManagement.IsTaxSet(SalesHeader."Tax Area Code") then
        exit;

      TaxSetupNeededNotification.ID := TaxNotificationIdTok;
      TaxSetupNeededNotification.SCOPE(NOTIFICATIONSCOPE::LocalScope);
      TaxSetupNeededNotification.SETDATA('TaxAreaCode',SalesHeader."Tax Area Code");
      TaxSetupNeededNotification.MESSAGE(TaxSetupNeededMsg);
      TaxSetupNeededNotification.ADDACTION(SetupTaxLbl,CODEUNIT::"O365 Sales Invoice Mgmt",'OpenTaxSettingsCard');
      TaxAreaRecordId := TaxArea.RECORDID;
      if TaxArea.GET(SalesHeader."Tax Area Code") then
        TaxAreaRecordId := TaxArea.RECORDID;
      NotificationLifecycleMgt.SendNotification(TaxSetupNeededNotification,TaxAreaRecordId);
    END;

    PROCEDURE RecallTaxNotificationIfTaxSetup@1020008(TaxAreaCode@1020002 : Code[20]);
    VAR
      O365TaxSettingsManagement@1020001 : Codeunit "O365 Tax Settings Management";
      TaxSetupNotification@1020000 : Notification;
    BEGIN
      if not O365TaxSettingsManagement.IsTaxSet(TaxAreaCode) then
        exit;

      TaxSetupNotification.ID := TaxNotificationIdTok;
      if TaxSetupNotification.RECALL then;
    END;

    PROCEDURE OpenTaxSettingsCard@28(SenderNotification@1020000 : Notification);
    VAR
      TaxArea@1020001 : Record "Tax Area";
    BEGIN
      if not TaxArea.GET(SenderNotification.GETDATA('TaxAreaCode')) then
        exit;

      PAGE.RUN(PAGE::"BC O365 Tax Settings Card",TaxArea);
    END;

    LOCAL PROCEDURE SendCustomerCreatedNotification@29(Customer@1000 : Record Customer;SalesHeader@1001 : Record "Sales Header");
    VAR
      CustomerCreatedNotification@1002 : Notification;
      Type@1003 : Integer;
    BEGIN
      CustomerCreatedNotification.ID := CREATEGUID;
      CustomerCreatedNotification.MESSAGE(STRSUBSTNO(CustomerCreatedMsg,Customer.Name));
      CustomerCreatedNotification.SCOPE(NOTIFICATIONSCOPE::LocalScope);
      CustomerCreatedNotification.ADDACTION(UndoTxt,CODEUNIT::"O365 Sales Invoice Mgmt",'UndoCustomerCreation');
      CustomerCreatedNotification.SETDATA('CustomerNo',Customer."No.");
      CustomerCreatedNotification.SETDATA('SalesHeaderNo',SalesHeader."No.");

      Type := SalesHeader."Document Type";
      CustomerCreatedNotification.SETDATA('SalesHeaderType',FORMAT(Type));
      NotificationLifecycleMgt.SendNotification(CustomerCreatedNotification,SalesHeader.RECORDID);
    END;

    PROCEDURE SendCustomerHasBeenBlockedNotification@34(CustomerName@1000 : Text[50]);
    VAR
      CustomerBlockedNotification@1002 : Notification;
    BEGIN
      if not NotificationShownForBlockedCustomer then begin
        CustomerBlockedNotification.ID := CREATEGUID;
        CustomerBlockedNotification.MESSAGE(STRSUBSTNO(CustomerIsBlockedMsg,CustomerName));
        CustomerBlockedNotification.SCOPE(NOTIFICATIONSCOPE::LocalScope);
        CustomerBlockedNotification.SEND;
        NotificationShownForBlockedCustomer := true;
      end;
    END;

    LOCAL PROCEDURE SendItemCreatedNotification@35(Item@1000 : Record Item;SalesLine@1001 : Record "Sales Line");
    VAR
      ItemCreatedNotification@1002 : Notification;
    BEGIN
      ItemCreatedNotification.ID := CREATEGUID;
      ItemCreatedNotification.MESSAGE(STRSUBSTNO(ItemCreatedMsg,Item.Description));
      ItemCreatedNotification.SCOPE(NOTIFICATIONSCOPE::LocalScope);
      ItemCreatedNotification.ADDACTION(UndoTxt,CODEUNIT::"O365 Sales Invoice Mgmt",'UndoItemCreation');
      ItemCreatedNotification.SETDATA('ItemNo',Item."No.");
      NotificationLifecycleMgt.SendNotification(ItemCreatedNotification,SalesLine.RECORDID);
    END;

    PROCEDURE UndoItemCreation@36(VAR CreateItemNotification@1000 : Notification);
    VAR
      SalesLine@1003 : Record "Sales Line";
      Item@1002 : Record Item;
    BEGIN
      SalesLine.SETRANGE("No.",CreateItemNotification.GETDATA('ItemNo'));
      if SalesLine.FINDSET then
        repeat
          SalesLine.DELETE(true);
        until SalesLine.NEXT = 0;

      if Item.GET(CreateItemNotification.GETDATA('ItemNo')) then
        Item.DELETE(true);
    END;

    PROCEDURE UndoCustomerCreation@31(VAR CreateCustomerNotification@1000 : Notification);
    VAR
      Customer@1002 : Record Customer;
      SalesHeader@1003 : Record "Sales Header";
      CustContUpdate@1005 : Codeunit "CustCont-Update";
      DocumentType@1001 : Option;
    BEGIN
      EVALUATE(DocumentType,CreateCustomerNotification.GETDATA('SalesHeaderType'));

      if SalesHeader.GET(DocumentType,CreateCustomerNotification.GETDATA('SalesHeaderNo')) then begin
        SalesHeader.INIT;
        SalesHeader.MODIFY;
      end;

      if Customer.GET(CreateCustomerNotification.GETDATA('CustomerNo')) then begin
        CustContUpdate.DeleteCustomerContacts(Customer);
        Customer.DELETE(true);
      end;
    END;

    PROCEDURE GetInvoiceDiscountCaption@19(InvoiceDiscountValue@1000 : Decimal) : Text;
    BEGIN
      if InvoiceDiscountValue = 0 then
        exit(InvoiceDiscountLbl);
      exit(STRSUBSTNO('%1 (%2%)',InvoiceDiscountLbl,ROUND(InvoiceDiscountValue,0.1)));
    END;

    PROCEDURE EnforceCustomerTemplateIntegrity@33(VAR Customer@1000 : Record Customer);
    VAR
      ConfigTemplateLine@1002 : Record "Config. Template Line";
      O365SalesInitialSetup@1003 : Record "O365 Sales Initial Setup";
      IdentityManagement@1001 : Codeunit "Identity Management";
      CustomerRecRef@1005 : RecordRef;
      CustomerFieldRef@1006 : FieldRef;
      CustomerFixed@1004 : Boolean;
      OriginalLanguageID@1007 : Integer;
    BEGIN
      if not IdentityManagement.IsInvAppId then
        exit;

      if not O365SalesInitialSetup.GET then
        exit;

      ConfigTemplateLine.SETRANGE("Data Template Code",O365SalesInitialSetup."Default Customer Template");
      ConfigTemplateLine.SETRANGE("Table ID",DATABASE::Customer);
      // 88 = Gen. Bus. Posting Group
      // 21 = Customer Posting Group
      // 80 = Application Method
      // 104 = Reminder Terms Code
      // 28 = Fin. Charge Terms Code
      ConfigTemplateLine.SETFILTER("Field ID",'88|21|80|104|28');
      if not ConfigTemplateLine.FINDSET then
        exit;

      OriginalLanguageID := GLOBALLANGUAGE;
      CustomerRecRef.GETTABLE(Customer);
      repeat
        if CustomerRecRef.FIELDEXIST(ConfigTemplateLine."Field ID") then begin
          if ConfigTemplateLine."Language ID" <> 0 then
            GLOBALLANGUAGE := ConfigTemplateLine."Language ID"; // When formatting the value, make sure we are using the correct language
          CustomerFieldRef := CustomerRecRef.FIELD(ConfigTemplateLine."Field ID");
          if FORMAT(CustomerFieldRef.VALUE) <> ConfigTemplateLine."Default Value" then begin
            CustomerFieldRef.VALIDATE(ConfigTemplateLine."Default Value");
            ConfigValidateManagement.ValidateFieldValue(
              CustomerRecRef,CustomerFieldRef,ConfigTemplateLine."Default Value",false,ConfigTemplateLine."Language ID");
            CustomerFixed := true;
          end;
          GLOBALLANGUAGE := OriginalLanguageID;
        end;
      until ConfigTemplateLine.NEXT = 0;

      if CustomerFixed then
        if CustomerRecRef.MODIFY(true) then
          Customer.GET(Customer."No.");
    END;

    [External]
    PROCEDURE ValidateItemDescription@27(VAR SalesLine@1003 : Record "Sales Line";VAR DescriptionSelected@1004 : Boolean);
    VAR
      Item@1002 : Record Item;
      ItemTemplate@1005 : Record "Item Template";
      O365SalesManagement@1006 : Codeunit "O365 Sales Management";
      ReturnValue@1000 : Text[50];
      Found@1001 : Boolean;
    BEGIN
      if SalesLine.Description = '' then
        exit;

      // Lookup by item number/description
      if not Item.TryGetItemNoOpenCard(ReturnValue,SalesLine.Description,false,false,false) then begin
        if ItemTemplate.NewItemFromTemplate(Item) then begin
          Item.VALIDATE(Description,SalesLine.Description);
          O365SalesManagement.SetItemDefaultValues(Item);
          SendItemCreatedNotification(Item,SalesLine);
        end else
          ERROR(ItemNotExistErr);
      end else begin
        Found := false;
        if STRLEN(ReturnValue) <= MAXSTRLEN(Item."No.") then
          Found := Item.GET(ReturnValue);
        if not Found then begin
          Item.SETRANGE(Description,ReturnValue);
          if Item.FINDFIRST then;
        end;
      end;
      if (Item."No." <> '') and (Item."No." <> SalesLine."No.") then
        SalesLine.VALIDATE("No.",Item."No.");
      DescriptionSelected := SalesLine.Description <> '';
    END;

    PROCEDURE ValidateItemUnitOfMeasure@50(VAR SalesLine@1000 : Record "Sales Line");
    VAR
      TempUOM@1001 : TEMPORARY Record "Unit of Measure";
      Item@1003 : Record Item;
      OriginalLineDiscount@1002 : Decimal;
      OriginalUnitPrice@1004 : Decimal;
    BEGIN
      TempUOM.CreateListInCurrentLanguage(TempUOM);
      if not TryFindUnitOfMeasure(TempUOM,SalesLine."Unit of Measure") then begin
        CreateUnitOfMeasure(SalesLine."Unit of Measure",SalesLine."Unit of Measure");
        TempUOM.Code := SalesLine."Unit of Measure";
      end;

      if Item.WRITEPERMISSION then
        if Item.GET(SalesLine."No.") then
          if Item."Base Unit of Measure" <> TempUOM.Code then begin
            Item.VALIDATE("Base Unit of Measure",TempUOM.Code);
            Item.MODIFY
          end;

      OriginalUnitPrice := SalesLine."Unit Price"; // Changing uom resets the unit price and line discount.
      OriginalLineDiscount := SalesLine."Line Discount %";
      SalesLine.VALIDATE("Unit of Measure Code",TempUOM.Code);
      if SalesLine."Unit Price" <> OriginalUnitPrice then
        SalesLine.VALIDATE("Unit Price",OriginalUnitPrice);
      if OriginalLineDiscount <> 0 then
        SalesLine.VALIDATE("Line Discount %",OriginalLineDiscount);
    END;

    PROCEDURE CreateUnitOfMeasure@32(CodeToSet@1000 : Code[10];DescriptionToSet@1001 : Text[10]);
    VAR
      UOM@1002 : Record "Unit of Measure";
    BEGIN
      if UOM.GET(CodeToSet) then
        exit;

      UOM.INIT;
      UOM.VALIDATE(Code,CodeToSet);
      UOM.VALIDATE(Description,DescriptionToSet);
      UOM.INSERT(true);
    END;

    [TryFunction]
    PROCEDURE TryFindUnitOfMeasure@48(VAR TempUOM@1000 : TEMPORARY Record "Unit of Measure";Description@1001 : Text[10]);
    BEGIN
      TempUOM.SETFILTER(Description,'@' + Description);
      TempUOM.FINDFIRST;
    END;

    PROCEDURE ValidateItemPrice@38(VAR SalesLine@1003 : Record "Sales Line");
    VAR
      Item@1002 : Record Item;
      SalesHeader@1004 : Record "Sales Header";
      GLSetup@1005 : Record "General Ledger Setup";
      PriceExclVAT@1001 : Decimal;
    BEGIN
      if SalesLine."No." = '' then
        exit;

      if not SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.") then
        exit;

      if not GLSetup.GET then
        exit;

      if Item.WRITEPERMISSION then
        if Item.GET(SalesLine."No.") then begin
          if SalesHeader."Prices Including VAT" and not Item."Price Includes VAT" then begin
            PriceExclVAT := ROUND(SalesLine."Unit Price" / (1 + (SalesLine."VAT %" / 100)),GLSetup."Unit-Amount Rounding Precision");
            Item.VALIDATE("Unit Price",PriceExclVAT);
            Item.MODIFY;
            exit;
          end;
          Item.VALIDATE("Unit Price",SalesLine."Unit Price");
          Item.MODIFY;
        end;
    END;

    PROCEDURE ValidateVATRate@37(VAR SalesLine@1003 : Record "Sales Line");
    VAR
      Item@1002 : Record Item;
    BEGIN
      if SalesLine."No." = '' then
        exit;

      if Item.WRITEPERMISSION then
        if Item.GET(SalesLine."No.") then begin
          Item.VALIDATE("VAT Prod. Posting Group",SalesLine."VAT Prod. Posting Group");
          Item.MODIFY;
        end;
    END;

    PROCEDURE IsCustomerBlocked@30(CustomerNo@1000 : Code[20]) : Boolean;
    VAR
      Customer@1001 : Record Customer;
    BEGIN
      if Customer.GET(CustomerNo) then
        exit(Customer.IsBlocked);
      exit(false);
    END;

    PROCEDURE GetCustomerStatus@39(Customer@1001 : Record Customer;VAR BlockedStatus@1000 : Text);
    BEGIN
      if Customer.IsBlocked then
        BlockedStatus := Customer.FIELDCAPTION(Blocked)
      else
        BlockedStatus := '';
    END;

    BEGIN
    END.
  }
}

