OBJECT Table 407 Graph Mail Setup
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160111.877T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Graph Mail Setup;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code }
    { 2   ;   ;Refresh Code        ;BLOB          ;CaptionML=ENU=Refresh Code }
    { 3   ;   ;Expires On          ;DateTime      ;CaptionML=ENU=Expires On }
    { 4   ;   ;Sender Email        ;Text250       ;CaptionML=ENU=Sender Email }
    { 5   ;   ;Sender Name         ;Text250       ;CaptionML=ENU=Sender Name }
    { 6   ;   ;Enabled             ;Boolean       ;CaptionML=ENU=Enabled }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GraphMailCategoryTxt@1002 : TextConst '@@@={Locked};ENU=AL GraphMail';
      GraphMailSentMsg@1010 : TextConst '@@@={Locked};ENU=Sent an email';
      GraphMailSetupStartMsg@1007 : TextConst '@@@={Locked};ENU=Setting up graph mail';
      GraphMailSetupFinishMsg@1009 : TextConst '@@@={Locked};ENU=Graph mail setup for current user';
      GraphMailGetTokenMsg@1008 : TextConst '@@@={Locked};ENU=Attempting to get a token using the existing refresh code';
      ClientResourceNameTxt@1006 : TextConst '@@@={Locked};ENU=MailerResourceId';
      MissingClientInfoErr@1003 : TextConst 'ENU=Missing configuration data. Contact a system administrator.';
      InvalidResultErr@1000 : TextConst 'ENU=The configuration data is not valid. Contact a system administrator.';
      AuthFailErr@1001 : TextConst 'ENU=Could not authenticate while sending mail.';
      NotEnabledErr@1004 : TextConst 'ENU=Not enabled.';
      TestEmailSubjectTxt@1005 : TextConst 'ENU=Test Email';

    PROCEDURE IsEnabled@4() : Boolean;
    VAR
      GraphMail@1000 : Codeunit "Graph Mail";
    BEGIN
      exit(GraphMail.IsEnabled);
    END;

    PROCEDURE RenewRefreshCode@6();
    BEGIN
      GetToken;
    END;

    LOCAL PROCEDURE GetToken@1() : Text;
    VAR
      AzureKeyVaultManagement@1012 : Codeunit "Azure Key Vault Management";
      ResourceId@1004 : Text;
      RefreshCode@1000 : Text;
      AccessToken@1002 : Text;
    BEGIN
      if not AzureKeyVaultManagement.GetAzureKeyVaultSecret(ResourceId,ClientResourceNameTxt) then
        ERROR(MissingClientInfoErr);

      if ResourceId = '' then
        ERROR(MissingClientInfoErr);

      if not IsEnabled then
        ERROR(NotEnabledErr);

      if not TryGetToken(RefreshCode,AccessToken) then begin
        CLEAR("Refresh Code");
        CLEAR("Expires On");
        VALIDATE(Enabled,false);
        MODIFY;
        exit;
      end;

      SetRefreshCode(RefreshCode);
      VALIDATE("Expires On",CREATEDATETIME(TODAY + 14,TIME));
      MODIFY;

      exit(AccessToken);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetToken@7(VAR RefreshCode@1002 : Text;VAR AccessToken@1000 : Text);
    VAR
      AzureADMgt@1001 : Codeunit "Azure AD Mgt.";
    BEGIN
      SENDTRACETAG('00001QL',GraphMailCategoryTxt,VERBOSITY::Normal,GraphMailGetTokenMsg,DATACLASSIFICATION::SystemMetadata);
      AccessToken := AzureADMgt.GetTokenFromRefreshCode(GetRefreshCode,RefreshCode);

      if (AccessToken = '') or (RefreshCode = '') then
        ERROR('');
    END;

    PROCEDURE SendTestMail@2(Recipient@1003 : Text);
    VAR
      TempEmailItem@1002 : TEMPORARY Record "Email Item";
      GraphMail@1001 : Codeunit "Graph Mail";
      Payload@1000 : Text;
    BEGIN
      if Recipient = '' then
        ERROR('');

      TempEmailItem."Send to" := COPYSTR(Recipient,1,MAXSTRLEN(TempEmailItem."Send to"));
      TempEmailItem."From Address" := COPYSTR("Sender Email",1,MAXSTRLEN(TempEmailItem."From Address"));
      TempEmailItem."From Name" := COPYSTR("Sender Name",1,MAXSTRLEN(TempEmailItem."From Name"));
      TempEmailItem.Subject := TestEmailSubjectTxt;
      TempEmailItem.SetBodyText(GraphMail.GetTestMessageBody);

      Payload := GraphMail.PrepareMessage(TempEmailItem);

      SendWebRequest(Payload,GetToken);
    END;

    PROCEDURE SendMail@3(TempEmailItem@1000 : TEMPORARY Record "Email Item";VAR RefreshCode@1003 : Text);
    VAR
      GraphMail@1001 : Codeunit "Graph Mail";
      Payload@1002 : Text;
      Token@1004 : Text;
    BEGIN
      if not TryGetToken(RefreshCode,Token) then
        ERROR(AuthFailErr);

      Payload := GraphMail.PrepareMessage(TempEmailItem);

      SendWebRequest(Payload,Token);
      SENDTRACETAG('00001QM',GraphMailCategoryTxt,VERBOSITY::Normal,GraphMailSentMsg,DATACLASSIFICATION::SystemMetadata);
    END;

    LOCAL PROCEDURE SendWebRequest@5(Payload@1000 : Text;Token@1009 : Text) : Boolean;
    VAR
      TempBlob@1001 : TEMPORARY Record TempBlob;
      HttpWebRequestMgt@1002 : Codeunit "Http Web Request Mgt.";
      GraphMail@1006 : Codeunit "Graph Mail";
      HttpStatusCode@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeaders@1004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      ResponseInStream@1003 : InStream;
    BEGIN
      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(ResponseInStream);

      HttpWebRequestMgt.Initialize(STRSUBSTNO('%1/v1.0/me/sendMail',GraphMail.GetGraphDomain));
      HttpWebRequestMgt.SetMethod('POST');
      HttpWebRequestMgt.SetContentType('application/json');
      HttpWebRequestMgt.SetReturnType('application/json');
      HttpWebRequestMgt.AddHeader('Authorization',STRSUBSTNO('Bearer %1',Token));
      HttpWebRequestMgt.AddBodyAsText(Payload);

      if not HttpWebRequestMgt.GetResponse(ResponseInStream,HttpStatusCode,ResponseHeaders) then begin
        HttpWebRequestMgt.ProcessFaultResponse('');
        exit(false);
      end;

      exit(true);
    END;

    LOCAL PROCEDURE GetRefreshCode@9() RefreshCode : Text;
    VAR
      InStr@1000 : InStream;
    BEGIN
      CALCFIELDS("Refresh Code");
      "Refresh Code".CREATEINSTREAM(InStr);
      InStr.READTEXT(RefreshCode);
    END;

    PROCEDURE SetRefreshCode@10(Token@1000 : Text);
    VAR
      OutStr@1001 : OutStream;
    BEGIN
      "Refresh Code".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(Token);
    END;

    PROCEDURE Initialize@11();
    VAR
      AzureKeyVaultManagement@1015 : Codeunit "Azure Key Vault Management";
      AzureADMgt@1000 : Codeunit "Azure AD Mgt.";
      ResourceId@1003 : Text;
      RefreshCode@1001 : Text;
      Token@1006 : Text;
    BEGIN
      if not AzureKeyVaultManagement.GetAzureKeyVaultSecret(ResourceId,ClientResourceNameTxt) then
        ERROR(MissingClientInfoErr);

      if ResourceId = '' then
        ERROR(MissingClientInfoErr);

      SENDTRACETAG('00001QN',GraphMailCategoryTxt,VERBOSITY::Normal,GraphMailSetupStartMsg,DATACLASSIFICATION::SystemMetadata);
      Token := AzureADMgt.GetOnBehalfAccessTokenAndRefreshCode(ResourceId,RefreshCode);

      if (Token = '') or (RefreshCode = '') then
        ERROR(InvalidResultErr);

      SetRefreshCode(RefreshCode);
      VALIDATE("Expires On",CREATEDATETIME(TODAY + 14,TIME));

      SetUserFields(Token);
      SENDTRACETAG('00001QO',GraphMailCategoryTxt,VERBOSITY::Normal,GraphMailSetupFinishMsg,DATACLASSIFICATION::SystemMetadata);
    END;

    LOCAL PROCEDURE SetUserFields@8(Token@1000 : Text);
    VAR
      TempBlob@1001 : TEMPORARY Record TempBlob;
      HttpWebRequestMgt@1003 : Codeunit "Http Web Request Mgt.";
      JSONManagement@1002 : Codeunit "JSON Management";
      GraphMail@1010 : Codeunit "Graph Mail";
      HttpStatusCode@1008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      JsonObject@1007 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      ResponseHeaders@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      ResponseInStream@1005 : InStream;
      JsonResult@1004 : Variant;
      UserProfileJson@1009 : Text;
    BEGIN
      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(ResponseInStream);

      HttpWebRequestMgt.Initialize(STRSUBSTNO('%1/v1.0/me/',GraphMail.GetGraphDomain));
      HttpWebRequestMgt.SetReturnType('application/json');
      HttpWebRequestMgt.AddHeader('Authorization',STRSUBSTNO('Bearer %1',Token));

      HttpWebRequestMgt.GetResponse(ResponseInStream,HttpStatusCode,ResponseHeaders);
      ResponseInStream.READTEXT(UserProfileJson);
      JSONManagement.InitializeObject(UserProfileJson);
      JSONManagement.GetJSONObject(JsonObject);

      JSONManagement.GetPropertyValueFromJObjectByName(JsonObject,'displayName',JsonResult);
      VALIDATE("Sender Name",JsonResult);

      JSONManagement.GetPropertyValueFromJObjectByName(JsonObject,'mail',JsonResult);
      VALIDATE("Sender Email",JsonResult);

      TESTFIELD("Sender Email");
    END;

    BEGIN
    END.
  }
}

