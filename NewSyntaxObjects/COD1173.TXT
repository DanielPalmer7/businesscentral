OBJECT Codeunit 1173 Document Attachment Mgmt
{
  OBJECT-PROPERTIES
  {
    Date=0D;
    Time=0T;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    LOCAL PROCEDURE DeleteAttachedDocuments@2(RecRef@1005 : RecordRef);
    VAR
      DocumentAttachment@1002 : Record "Document Attachment";
      FieldRef@1000 : FieldRef;
      RecNo@1004 : Code[20];
      DocType@1003 : 'Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order"';
      LineNo@1001 : Integer;
    BEGIN
      if RecRef.ISTEMPORARY then
        exit;

      DocumentAttachment.SETRANGE("Table ID",RecRef.NUMBER);
      case RecRef.NUMBER of
        DATABASE::Customer,
        DATABASE::Vendor,
        DATABASE::Item,
        DATABASE::Employee,
        DATABASE::"Fixed Asset",
        DATABASE::Resource,
        DATABASE::Job:
          begin
            FieldRef := RecRef.FIELD(1);
            RecNo := FieldRef.VALUE;
            DocumentAttachment.SETRANGE("No.",RecNo);
          end;
      end;
      case RecRef.NUMBER of
        DATABASE::"Sales Header",
        DATABASE::"Purchase Header",
        DATABASE::"Sales Line",
        DATABASE::"Purchase Line":
          begin
            FieldRef := RecRef.FIELD(1);
            DocType := FieldRef.VALUE;
            DocumentAttachment.SETRANGE("Document Type",DocType);

            FieldRef := RecRef.FIELD(3);
            RecNo := FieldRef.VALUE;
            DocumentAttachment.SETRANGE("No.",RecNo);
          end;
      end;
      case RecRef.NUMBER of
        DATABASE::"Sales Line",
        DATABASE::"Purchase Line":
          begin
            FieldRef := RecRef.FIELD(4);
            LineNo := FieldRef.VALUE;
            DocumentAttachment.SETRANGE("Line No.",LineNo);
          end;
      end;
      case RecRef.NUMBER of
        DATABASE::"Sales Invoice Header",
        DATABASE::"Sales Invoice Line",
        DATABASE::"Sales Cr.Memo Header",
        DATABASE::"Sales Cr.Memo Line",
        DATABASE::"Purch. Inv. Header",
        DATABASE::"Purch. Inv. Line",
        DATABASE::"Purch. Cr. Memo Hdr.",
        DATABASE::"Purch. Cr. Memo Line":
          begin
            FieldRef := RecRef.FIELD(3);
            RecNo := FieldRef.VALUE;
            DocumentAttachment.SETRANGE("No.",RecNo);
          end;
      end;
      DocumentAttachment.DELETEALL;
    END;

    [EventSubscriber(Table,18,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeleteCustomer@4(VAR Rec@1000 : Record Customer;RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,36,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeleteSalesHeader@10(VAR Rec@1000 : Record "Sales Header";RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,37,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeleteSalesLine@16(VAR Rec@1000 : Record "Sales Line";RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,114,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeleteSalesCreditMemoHeader@27(VAR Rec@1000 : Record "Sales Cr.Memo Header";RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,115,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeleteSalesCreditMemoLine@32(VAR Rec@1000 : Record "Sales Cr.Memo Line";RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,112,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeleteSalesInvoiceHeader@34(VAR Rec@1000 : Record "Sales Invoice Header";RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,113,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeleteSalesInvoiceLine@38(VAR Rec@1000 : Record "Sales Invoice Line";RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,122,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeletePurchInvHeader@39(VAR Rec@1000 : Record "Purch. Inv. Header";RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,123,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeletePurchInvLine@40(VAR Rec@1000 : Record "Purch. Inv. Line";RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,124,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeletePurchCreditMemoHeader@41(VAR Rec@1000 : Record "Purch. Cr. Memo Hdr.";RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,125,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeletePurchCreditMemoLine@42(VAR Rec@1000 : Record "Purch. Cr. Memo Line";RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Codeunit,86,OnBeforeDeleteSalesQuote)]
    LOCAL PROCEDURE DocAttachFlowFormSalesQuoteToSalesOrder@1(VAR QuoteSalesHeader@1000 : Record "Sales Header";VAR OrderSalesHeader@1001 : Record "Sales Header");
    VAR
      FromRecRef@1003 : RecordRef;
      ToRecRef@1002 : RecordRef;
    BEGIN
      // SalesHeader - quote
      // SalesOrderHeader - order
      if QuoteSalesHeader."No." = '' then
        exit;

      if QuoteSalesHeader.ISTEMPORARY then
        exit;

      if OrderSalesHeader."No." = '' then
        exit;

      if OrderSalesHeader.ISTEMPORARY then
        exit;

      FromRecRef.OPEN(DATABASE::"Sales Header");
      FromRecRef.GETTABLE(QuoteSalesHeader);

      ToRecRef.OPEN(DATABASE::"Sales Header");
      ToRecRef.GETTABLE(OrderSalesHeader);

      CopyAttachments(FromRecRef,ToRecRef);
    END;

    [EventSubscriber(Codeunit,87,OnBeforeInsertSalesOrderHeader)]
    LOCAL PROCEDURE DocAttachFlowForSalesHeaderFromBlanketOrderToSalesOrder@13(VAR SalesOrderHeader@1000 : Record "Sales Header";BlanketOrderSalesHeader@1001 : Record "Sales Header");
    VAR
      FromRecRef@1003 : RecordRef;
      ToRecRef@1002 : RecordRef;
      RecRef@1004 : RecordRef;
    BEGIN
      // Invoked when a sales order is created from blanket sales order
      // Need to delete docs that came from customer to sales header and copy docs form blanket sales header
      if SalesOrderHeader."No." = '' then
        exit;

      if SalesOrderHeader.ISTEMPORARY then
        exit;

      if BlanketOrderSalesHeader."No." = '' then
        exit;

      if BlanketOrderSalesHeader.ISTEMPORARY then
        exit;

      RecRef.GETTABLE(SalesOrderHeader);
      DeleteAttachedDocuments(RecRef);

      // Copy docs for sales header from blanket order to sales order
      FromRecRef.OPEN(DATABASE::"Sales Header");
      FromRecRef.GETTABLE(BlanketOrderSalesHeader);

      ToRecRef.OPEN(DATABASE::"Sales Header");
      ToRecRef.GETTABLE(SalesOrderHeader);

      CopyAttachments(FromRecRef,ToRecRef);
    END;

    [EventSubscriber(Codeunit,87,OnAfterInsertSalesOrderLine)]
    LOCAL PROCEDURE DocAttachFlowForSalesLinesFromBlanketOrderToSalesOrder@43(VAR SalesOrderLine@1000 : Record "Sales Line";SalesOrderHeader@1001 : Record "Sales Header";BlanketOrderSalesLine@1002 : Record "Sales Line";BlanketOrderSalesHeader@1005 : Record "Sales Header");
    VAR
      FromRecRef@1003 : RecordRef;
      ToRecRef@1004 : RecordRef;
      RecRef@1006 : RecordRef;
    BEGIN
      // Invoked when a sales order line is created from blanket sales order line
      // Need to delete docs that came from item to sale item for sales order line and copy docs from blanket sales order line

      if SalesOrderLine."No." = '' then
        exit;

      if SalesOrderLine.ISTEMPORARY then
        exit;

      if BlanketOrderSalesLine."No." = '' then
        exit;

      if BlanketOrderSalesLine.ISTEMPORARY then
        exit;

      RecRef.GETTABLE(SalesOrderLine);
      DeleteAttachedDocuments(RecRef);

      FromRecRef.OPEN(DATABASE::"Sales Line");
      FromRecRef.GETTABLE(BlanketOrderSalesLine);

      ToRecRef.OPEN(DATABASE::"Sales Line");
      ToRecRef.GETTABLE(SalesOrderLine);

      CopyAttachments(FromRecRef,ToRecRef);
    END;

    [EventSubscriber(Codeunit,1305,OnBeforeDeletionOfQuote)]
    LOCAL PROCEDURE DocAttachFlowForSalesHeaderFromSalesQuoteToSalesInvoice@18(VAR SalesHeader@1000 : Record "Sales Header";VAR SalesInvoiceHeader@1001 : Record "Sales Header");
    VAR
      FromRecRef@1002 : RecordRef;
      ToRecRef@1003 : RecordRef;
    BEGIN
      if SalesHeader."No." = '' then
        exit;

      if SalesHeader.ISTEMPORARY then
        exit;

      if SalesInvoiceHeader."No." = '' then
        exit;

      if SalesInvoiceHeader.ISTEMPORARY then
        exit;

      FromRecRef.OPEN(DATABASE::"Sales Header");
      FromRecRef.GETTABLE(SalesHeader);

      ToRecRef.OPEN(DATABASE::"Sales Header");
      ToRecRef.GETTABLE(SalesInvoiceHeader);

      CopyAttachments(FromRecRef,ToRecRef);
    END;

    [EventSubscriber(Codeunit,1305,OnBeforeInsertSalesInvoiceLine)]
    LOCAL PROCEDURE DocAttachFlowForSalesLinesFromSalesQuoteToSalesInvoice@25(VAR SalesQuoteLine@1000 : Record "Sales Line";SalesQuoteHeader@1001 : Record "Sales Header";SalesInvoiceLine@1002 : Record "Sales Line";SalesInvoiceHeader@1003 : Record "Sales Header");
    VAR
      FromRecRef@1004 : RecordRef;
      ToRecRef@1005 : RecordRef;
    BEGIN
      // Copying sales line items from sales quote to a sales invoice

      if SalesInvoiceLine."No." = '' then
        exit;

      if SalesInvoiceLine.ISTEMPORARY then
        exit;

      FromRecRef.OPEN(DATABASE::"Sales Line");
      ToRecRef.OPEN(DATABASE::"Sales Line");

      FromRecRef.GETTABLE(SalesQuoteLine);
      ToRecRef.GETTABLE(SalesInvoiceLine);

      CopyAttachments(FromRecRef,ToRecRef);
    END;

    [EventSubscriber(Table,36,OnAfterInsertEvent)]
    LOCAL PROCEDURE DocAttachFlowForSalesHeaderInsert@23(VAR Rec@1000 : Record "Sales Header";RunTrigger@1001 : Boolean);
    VAR
      Customer@1005 : Record Customer;
      FromRecRef@1003 : RecordRef;
      ToRecRef@1004 : RecordRef;
    BEGIN
      // If quote no. is NOT empty that means this sales header came from an existing quote
      // In this case we need to exit out
      if Rec."Quote No." <> '' then
        exit;

      if Rec."No." = '' then
        exit;

      if Rec.ISTEMPORARY then
        exit;

      FromRecRef.OPEN(DATABASE::Customer);
      ToRecRef.OPEN(DATABASE::"Sales Header");

      if not Customer.GET(Rec."Sell-to Customer No.") then
        exit;

      FromRecRef.GETTABLE(Customer);
      ToRecRef.GETTABLE(Rec);

      CopyAttachments(FromRecRef,ToRecRef);
    END;

    [EventSubscriber(Codeunit,86,OnAfterInsertSalesOrderLine)]
    LOCAL PROCEDURE DocAttachFlowForSalesQuoteToSalesOrderSalesLines@24(VAR SalesOrderLine@1000 : Record "Sales Line";SalesOrderHeader@1001 : Record "Sales Header";SalesQuoteLine@1002 : Record "Sales Line";SalesQuoteHeader@1006 : Record "Sales Header");
    VAR
      FromRecRef@1003 : RecordRef;
      ToRecRef@1004 : RecordRef;
    BEGIN
      // Copying sales line items from quote to an order

      if SalesOrderLine."No." = '' then
        exit;

      if SalesOrderLine.ISTEMPORARY then
        exit;

      FromRecRef.OPEN(DATABASE::"Sales Line");
      ToRecRef.OPEN(DATABASE::"Sales Line");

      FromRecRef.GETTABLE(SalesQuoteLine);
      ToRecRef.GETTABLE(SalesOrderLine);

      CopyAttachments(FromRecRef,ToRecRef);
    END;

    [EventSubscriber(Table,36,OnAfterValidateEvent,"Sell-to Customer No.")]
    LOCAL PROCEDURE DocAttachFlowForSalesHeaderCustomerChg@5(VAR Rec@1000 : Record "Sales Header";VAR xRec@1001 : Record "Sales Header";CurrFieldNo@1002 : Integer);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      if Rec."No." = '' then
        exit;

      if Rec.ISTEMPORARY then
        exit;

      RecRef.GETTABLE(Rec);
      if (Rec."Sell-to Customer No." <> xRec."Sell-to Customer No.") and (xRec."Sell-to Customer No." <> '') then
        DeleteAttachedDocuments(RecRef);

      DocAttachFlowForSalesHeaderInsert(Rec,true);
    END;

    [EventSubscriber(Codeunit,6620,OnAfterCopySalesHeader)]
    LOCAL PROCEDURE DocAttachFlowForCopyDocumentSalesHeader@33(ToSalesHeader@1000 : Record "Sales Header";OldSalesHeader@1001 : Record "Sales Header");
    BEGIN
      DocAttachFlowForSalesHeaderCustomerChg(ToSalesHeader,OldSalesHeader,0);
    END;

    [EventSubscriber(Table,37,OnAfterInsertEvent)]
    LOCAL PROCEDURE DocAttachFlowForSalesLineInsert@6(VAR Rec@1000 : Record "Sales Line";RunTrigger@1001 : Boolean);
    VAR
      Item@1005 : Record Item;
      SalesHeader@1002 : Record "Sales Header";
      FromRecRef@1003 : RecordRef;
      ToRecRef@1004 : RecordRef;
    BEGIN
      if Rec."Line No." = 0 then
        exit;

      if Rec.ISTEMPORARY then
        exit;

      // Skipping if the parant sales header came from a quote
      if SalesHeader.GET(Rec."Document Type",Rec."Document No.") then
        if SalesHeader."Quote No." <> '' then
          exit;

      FromRecRef.OPEN(DATABASE::Item);
      ToRecRef.OPEN(DATABASE::"Sales Line");

      if not Item.GET(Rec."No.") then
        exit;

      FromRecRef.GETTABLE(Item);
      ToRecRef.GETTABLE(Rec);

      CopyAttachments(FromRecRef,ToRecRef);
    END;

    [EventSubscriber(Table,37,OnAfterValidateEvent,"No.")]
    LOCAL PROCEDURE DocAttachFlowForSalesLineItemChg@11(VAR Rec@1000 : Record "Sales Line";VAR xRec@1001 : Record "Sales Line";CurrFieldNo@1002 : Integer);
    VAR
      xRecRef@1003 : RecordRef;
    BEGIN
      if Rec."Line No." = 0 then
        exit;

      if Rec.ISTEMPORARY then
        exit;

      xRecRef.GETTABLE(xRec);
      if (Rec."No." <> xRec."No.") and (xRec."No." <> '') then
        DeleteAttachedDocuments(xRecRef);

      DocAttachFlowForSalesLineInsert(Rec,true);
    END;

    [EventSubscriber(Codeunit,80,OnBeforeDeleteAfterPosting)]
    LOCAL PROCEDURE DocAttachForPostedSalesDocs@29(VAR SalesHeader@1000 : Record "Sales Header";VAR SalesInvoiceHeader@1001 : Record "Sales Invoice Header";VAR SalesCrMemoHeader@1002 : Record "Sales Cr.Memo Header");
    VAR
      FromRecRef@1003 : RecordRef;
      ToRecRef@1004 : RecordRef;
    BEGIN
      // Triggered when a posted sales cr. memo / posted sales invoice is created
      if SalesHeader.ISTEMPORARY then
        exit;

      if SalesInvoiceHeader.ISTEMPORARY then
        exit;

      if SalesCrMemoHeader.ISTEMPORARY then
        exit;

      FromRecRef.GETTABLE(SalesHeader);

      if SalesInvoiceHeader."No." <> '' then
        ToRecRef.GETTABLE(SalesInvoiceHeader);

      if SalesCrMemoHeader."No." <> '' then
        ToRecRef.GETTABLE(SalesCrMemoHeader);

      CopyAttachmentsForPostedDocs(FromRecRef,ToRecRef);
    END;

    [EventSubscriber(Codeunit,90,OnBeforeDeleteAfterPosting)]
    LOCAL PROCEDURE DocAttachForPostedPurchaseDocs@37(VAR PurchaseHeader@1000 : Record "Purchase Header";VAR PurchInvHeader@1001 : Record "Purch. Inv. Header";VAR PurchCrMemoHdr@1002 : Record "Purch. Cr. Memo Hdr.");
    VAR
      FromRecRef@1003 : RecordRef;
      ToRecRef@1004 : RecordRef;
    BEGIN
      // Triggered when a posted purchase cr. memo / posted purchase invoice is created
      if PurchaseHeader.ISTEMPORARY then
        exit;

      if PurchInvHeader.ISTEMPORARY then
        exit;

      if PurchCrMemoHdr.ISTEMPORARY then
        exit;

      FromRecRef.GETTABLE(PurchaseHeader);

      if PurchInvHeader."No." <> '' then
        ToRecRef.GETTABLE(PurchInvHeader);

      if PurchCrMemoHdr."No." <> '' then
        ToRecRef.GETTABLE(PurchCrMemoHdr);

      CopyAttachmentsForPostedDocs(FromRecRef,ToRecRef);
    END;

    [EventSubscriber(Table,23,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeleteVendor@9(VAR Rec@1000 : Record Vendor;RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,38,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeletePurchaseHeader@15(VAR Rec@1000 : Record "Purchase Header";RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,39,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeletePurchaseLine@19(VAR Rec@1000 : Record "Purchase Line";RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,38,OnAfterInsertEvent)]
    LOCAL PROCEDURE DocAttachFlowForPurchaseHeaderInsert@21(VAR Rec@1000 : Record "Purchase Header";RunTrigger@1001 : Boolean);
    VAR
      Vendor@1005 : Record Vendor;
      FromRecRef@1003 : RecordRef;
      ToRecRef@1004 : RecordRef;
    BEGIN
      // If quote no. is NOT empty that means this purchase header came from an existing quote
      // In this case we need to exit out
      if Rec."Quote No." <> '' then
        exit;

      if Rec."No." = '' then
        exit;

      if Rec.ISTEMPORARY then
        exit;

      FromRecRef.OPEN(DATABASE::Vendor);
      ToRecRef.OPEN(DATABASE::"Purchase Header");

      if not Vendor.GET(Rec."Buy-from Vendor No.") then
        exit;

      FromRecRef.GETTABLE(Vendor);
      ToRecRef.GETTABLE(Rec);

      CopyAttachments(FromRecRef,ToRecRef);
    END;

    [EventSubscriber(Table,38,OnAfterValidateEvent,"Buy-from Vendor No.")]
    LOCAL PROCEDURE DocAttachFlowForPurchaseHeaderVendorChange@8(VAR Rec@1000 : Record "Purchase Header";VAR xRec@1001 : Record "Purchase Header";CurrFieldNo@1002 : Integer);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      if Rec."No." = '' then
        exit;

      if Rec.ISTEMPORARY then
        exit;

      RecRef.GETTABLE(Rec);
      if (Rec."Buy-from Vendor No." <> xRec."Buy-from Vendor No.") and (xRec."Buy-from Vendor No." <> '') then
        DeleteAttachedDocuments(RecRef);

      DocAttachFlowForPurchaseHeaderInsert(Rec,true);
    END;

    [EventSubscriber(Codeunit,6620,OnAfterCopyPurchaseHeader)]
    LOCAL PROCEDURE DocAttachFlowForCopyDocumentPurchHeader@45(ToPurchaseHeader@1000 : Record "Purchase Header";OldPurchaseHeader@1001 : Record "Purchase Header");
    BEGIN
      DocAttachFlowForPurchaseHeaderVendorChange(ToPurchaseHeader,OldPurchaseHeader,0);
    END;

    [EventSubscriber(Table,39,OnAfterInsertEvent)]
    LOCAL PROCEDURE DocAttachFlowForPurchaseLineInsert@26(VAR Rec@1000 : Record "Purchase Line";RunTrigger@1001 : Boolean);
    VAR
      Item@1005 : Record Item;
      FromRecRef@1003 : RecordRef;
      ToRecRef@1004 : RecordRef;
    BEGIN
      if Rec."Line No." = 0 then
        exit;

      if Rec.ISTEMPORARY then
        exit;

      FromRecRef.OPEN(DATABASE::Item);
      ToRecRef.OPEN(DATABASE::"Purchase Line");

      if not Item.GET(Rec."No.") then
        exit;

      FromRecRef.GETTABLE(Item);
      ToRecRef.GETTABLE(Rec);

      CopyAttachments(FromRecRef,ToRecRef);
    END;

    [EventSubscriber(Table,39,OnAfterValidateEvent,"No.")]
    LOCAL PROCEDURE DocAttachFlowForPurchaseLineItemChg@28(VAR Rec@1000 : Record "Purchase Line";VAR xRec@1001 : Record "Purchase Line";CurrFieldNo@1002 : Integer);
    VAR
      FromRecRef@1003 : RecordRef;
      ToRecRef@1004 : RecordRef;
      xRecRef@1005 : RecordRef;
    BEGIN
      if Rec."Line No." = 0 then
        exit;

      if Rec.ISTEMPORARY then
        exit;

      xRecRef.GETTABLE(xRec);
      if (Rec."No." <> xRec."No.") and (xRec."No." <> '') then
        DeleteAttachedDocuments(xRecRef);

      FromRecRef.OPEN(DATABASE::Item);
      ToRecRef.OPEN(DATABASE::"Sales Line");

      DocAttachFlowForPurchaseLineInsert(Rec,true);
    END;

    [EventSubscriber(Codeunit,96,OnBeforeDeletePurchQuote)]
    LOCAL PROCEDURE DocAttachFlowForPurchQuoteToPurchOrder@127(VAR QuotePurchHeader@1000 : Record "Purchase Header";VAR OrderPurchHeader@1001 : Record "Purchase Header");
    VAR
      FromRecRef@1003 : RecordRef;
      ToRecRef@1002 : RecordRef;
    BEGIN
      // SalesHeader - quote
      // SalesOrderHeader - order
      if QuotePurchHeader."No." = '' then
        exit;

      if QuotePurchHeader.ISTEMPORARY then
        exit;

      if OrderPurchHeader."No." = '' then
        exit;

      if OrderPurchHeader.ISTEMPORARY then
        exit;

      FromRecRef.OPEN(DATABASE::"Purchase Header");
      FromRecRef.GETTABLE(QuotePurchHeader);

      ToRecRef.OPEN(DATABASE::"Purchase Header");
      ToRecRef.GETTABLE(OrderPurchHeader);

      CopyAttachments(FromRecRef,ToRecRef);
    END;

    [EventSubscriber(Codeunit,96,OnAfterInsertPurchOrderLine)]
    LOCAL PROCEDURE DocAttachFlowForPurchQuoteToPurchOrderLines@129(VAR PurchaseQuoteLine@1000 : Record "Purchase Line";VAR PurchaseOrderLine@1001 : Record "Purchase Line");
    VAR
      FromRecRef@1003 : RecordRef;
      ToRecRef@1004 : RecordRef;
    BEGIN
      // Copying sales line items from quote to an order

      if PurchaseOrderLine."No." = '' then
        exit;

      if PurchaseOrderLine.ISTEMPORARY then
        exit;

      FromRecRef.OPEN(DATABASE::"Sales Line");
      ToRecRef.OPEN(DATABASE::"Sales Line");

      FromRecRef.GETTABLE(PurchaseQuoteLine);
      ToRecRef.GETTABLE(PurchaseOrderLine);

      CopyAttachments(FromRecRef,ToRecRef);
    END;

    [EventSubscriber(Codeunit,97,OnBeforeInsertPurchOrderHeader)]
    LOCAL PROCEDURE DocAttachFlowForBlanketPurchaseHeader@30(VAR PurchOrderHeader@1000 : Record "Purchase Header";BlanketOrderPurchHeader@1001 : Record "Purchase Header");
    VAR
      FromRecRef@1003 : RecordRef;
      ToRecRef@1002 : RecordRef;
      RecRef@1004 : RecordRef;
    BEGIN
      // Invoked when a sales order is created from blanket sales order
      // Need to delete docs that came from customer to sales header and copy docs form blanket sales header
      if PurchOrderHeader."No." = '' then
        exit;

      if PurchOrderHeader.ISTEMPORARY then
        exit;

      if BlanketOrderPurchHeader."No." = '' then
        exit;

      if BlanketOrderPurchHeader.ISTEMPORARY then
        exit;

      RecRef.GETTABLE(PurchOrderHeader);
      DeleteAttachedDocuments(RecRef);

      // Copy docs for sales header from blanket order to sales order
      FromRecRef.OPEN(DATABASE::"Purchase Header");
      FromRecRef.GETTABLE(BlanketOrderPurchHeader);

      ToRecRef.OPEN(DATABASE::"Purchase Header");
      ToRecRef.GETTABLE(PurchOrderHeader);

      CopyAttachments(FromRecRef,ToRecRef);
    END;

    [EventSubscriber(Codeunit,97,OnBeforeInsertPurchOrderLine)]
    LOCAL PROCEDURE DocAttachFlowForBlanketPurchaseLine@31(VAR PurchOrderLine@1000 : Record "Purchase Line";PurchOrderHeader@1001 : Record "Purchase Header";BlanketOrderPurchLine@1002 : Record "Purchase Line";BlanketOrderPurchHeader@1005 : Record "Purchase Header");
    VAR
      FromRecRef@1003 : RecordRef;
      ToRecRef@1004 : RecordRef;
      RecRef@1006 : RecordRef;
    BEGIN
      // Invoked when a purch order line is created from blanket purch order line
      // Need to delete docs that came from item to purch item for purch order line and copy docs from blanket purch order line

      if PurchOrderLine."No." = '' then
        exit;

      if PurchOrderLine.ISTEMPORARY then
        exit;

      if BlanketOrderPurchLine."No." = '' then
        exit;

      if BlanketOrderPurchLine.ISTEMPORARY then
        exit;

      RecRef.GETTABLE(PurchOrderLine);
      DeleteAttachedDocuments(RecRef);

      FromRecRef.OPEN(DATABASE::"Purchase Line");
      FromRecRef.GETTABLE(BlanketOrderPurchLine);

      ToRecRef.OPEN(DATABASE::"Purchase Line");
      ToRecRef.GETTABLE(PurchOrderLine);

      CopyAttachments(FromRecRef,ToRecRef);
    END;

    [EventSubscriber(Table,27,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeleteItem@12(VAR Rec@1000 : Record Item;RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,156,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeleteResource@14(VAR Rec@1000 : Record Resource;RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,167,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeleteJob@17(VAR Rec@1000 : Record Job;RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,5200,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeleteEmployee@20(VAR Rec@1000 : Record Employee;RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    [EventSubscriber(Table,5600,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteAttachedDocumentsOnAfterDeleteFixedAsset@22(VAR Rec@1000 : Record "Fixed Asset";RunTrigger@1001 : Boolean);
    VAR
      RecRef@1002 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      DeleteAttachedDocuments(RecRef);
    END;

    PROCEDURE IsDuplicateFile@3(TableID@1000 : Integer;DocumentNo@1001 : Code[20];RecDocType@1005 : 'Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order"';RecLineNo@1006 : Integer;FileName@1002 : Text;FileExtension@1003 : Text) : Boolean;
    VAR
      DocumentAttachment@1004 : Record "Document Attachment";
    BEGIN
      DocumentAttachment.SETRANGE("Table ID",TableID);
      DocumentAttachment.SETRANGE("No.",DocumentNo);
      DocumentAttachment.SETRANGE("Document Type",RecDocType);
      DocumentAttachment.SETRANGE("Line No.",RecLineNo);
      DocumentAttachment.SETRANGE("File Name",FileName);
      DocumentAttachment.SETRANGE("File Extension",FileExtension);

      if not DocumentAttachment.ISEMPTY then
        exit(true);

      exit(false);
    END;

    LOCAL PROCEDURE CopyAttachments@7(VAR FromRecRef@1000 : RecordRef;VAR ToRecRef@1001 : RecordRef);
    VAR
      FromDocumentAttachment@1002 : Record "Document Attachment";
      ToDocumentAttachment@1003 : Record "Document Attachment";
      FromFieldRef@1005 : FieldRef;
      ToFieldRef@1007 : FieldRef;
      FromDocumentType@1010 : 'Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order"';
      FromLineNo@1011 : Integer;
      FromNo@1006 : Code[20];
      ToNo@1008 : Code[20];
      ToDocumentType@1004 : 'Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order"';
      ToLineNo@1009 : Integer;
    BEGIN
      FromDocumentAttachment.SETRANGE("Table ID",FromRecRef.NUMBER);

      case FromRecRef.NUMBER of
        DATABASE::Customer,
        DATABASE::Vendor,
        DATABASE::Item:
          begin
            FromFieldRef := FromRecRef.FIELD(1);
            FromNo := FromFieldRef.VALUE;
            FromDocumentAttachment.SETRANGE("No.",FromNo);
          end;
        DATABASE::"Sales Header",
        DATABASE::"Purchase Header":
          begin
            FromFieldRef := FromRecRef.FIELD(1);
            FromDocumentType := FromFieldRef.VALUE;
            FromDocumentAttachment.SETRANGE("Document Type",FromDocumentType);
            FromFieldRef := FromRecRef.FIELD(3);
            FromNo := FromFieldRef.VALUE;
            FromDocumentAttachment.SETRANGE("No.",FromNo);
          end;
        DATABASE::"Sales Line",
        DATABASE::"Purchase Line":
          begin
            FromFieldRef := FromRecRef.FIELD(1);
            FromDocumentType := FromFieldRef.VALUE;
            FromDocumentAttachment.SETRANGE("Document Type",FromDocumentType);
            FromFieldRef := FromRecRef.FIELD(3);
            FromNo := FromFieldRef.VALUE;
            FromDocumentAttachment.SETRANGE("No.",FromNo);
            FromFieldRef := FromRecRef.FIELD(4);
            FromLineNo := FromFieldRef.VALUE;
            FromDocumentAttachment.SETRANGE("Line No.",FromLineNo);
          end
      end;

      case ToRecRef.NUMBER of
        DATABASE::"Sales Line":
          if FromRecRef.NUMBER <> DATABASE::"Sales Line" then
            FromDocumentAttachment.SETRANGE("Document Flow Sales",true);
        DATABASE::"Sales Header":
          if FromRecRef.NUMBER <> DATABASE::"Sales Header" then
            FromDocumentAttachment.SETRANGE("Document Flow Sales",true);
        DATABASE::"Purchase Line":
          if FromRecRef.NUMBER <> DATABASE::"Purchase Line" then
            FromDocumentAttachment.SETRANGE("Document Flow Purchase",true);
        DATABASE::"Purchase Header":
          if FromRecRef.NUMBER <> DATABASE::"Purchase Header" then
            FromDocumentAttachment.SETRANGE("Document Flow Purchase",true);
      end;

      if FromDocumentAttachment.FINDSET then begin
        repeat
          CLEAR(ToDocumentAttachment);
          ToDocumentAttachment.INIT;
          ToDocumentAttachment.TRANSFERFIELDS(FromDocumentAttachment);
          ToDocumentAttachment.VALIDATE("Table ID",ToRecRef.NUMBER);

          ToFieldRef := ToRecRef.FIELD(3);
          ToNo := ToFieldRef.VALUE;
          ToDocumentAttachment.VALIDATE("No.",ToNo);

          case ToRecRef.NUMBER of
            DATABASE::"Sales Header",
            DATABASE::"Purchase Header":
              begin
                ToFieldRef := ToRecRef.FIELD(1);
                ToDocumentType := ToFieldRef.VALUE;
                ToDocumentAttachment.VALIDATE("Document Type",ToDocumentType);
              end;
            DATABASE::"Sales Line",
            DATABASE::"Purchase Line":
              begin
                ToFieldRef := ToRecRef.FIELD(1);
                ToDocumentType := ToFieldRef.VALUE;
                ToDocumentAttachment.VALIDATE("Document Type",ToDocumentType);

                ToFieldRef := ToRecRef.FIELD(4);
                ToLineNo := ToFieldRef.VALUE;
                ToDocumentAttachment.VALIDATE("Line No.",ToLineNo);
              end;
          end;

          if not ToDocumentAttachment.INSERT(true) then;

        until FromDocumentAttachment.NEXT = 0;
      end;

      // Copies attachments for header and then calls CopyAttachmentsForPostedDocsLines to copy attachments for lines.
    END;

    LOCAL PROCEDURE CopyAttachmentsForPostedDocs@35(VAR FromRecRef@1000 : RecordRef;VAR ToRecRef@1001 : RecordRef);
    VAR
      FromDocumentAttachment@1002 : Record "Document Attachment";
      ToDocumentAttachment@1003 : Record "Document Attachment";
      FromFieldRef@1005 : FieldRef;
      ToFieldRef@1007 : FieldRef;
      FromDocumentType@1010 : 'Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order"';
      FromNo@1006 : Code[20];
      ToNo@1008 : Code[20];
    BEGIN
      FromDocumentAttachment.SETRANGE("Table ID",FromRecRef.NUMBER);

      FromFieldRef := FromRecRef.FIELD(1);
      FromDocumentType := FromFieldRef.VALUE;
      FromDocumentAttachment.SETRANGE("Document Type",FromDocumentType);

      FromFieldRef := FromRecRef.FIELD(3);
      FromNo := FromFieldRef.VALUE;
      FromDocumentAttachment.SETRANGE("No.",FromNo);

      // Find any attached docs for headers (sales / purch)
      if FromDocumentAttachment.FINDSET then begin
        repeat
          CLEAR(ToDocumentAttachment);
          ToDocumentAttachment.INIT;
          ToDocumentAttachment.TRANSFERFIELDS(FromDocumentAttachment);
          ToDocumentAttachment.VALIDATE("Table ID",ToRecRef.NUMBER);

          ToFieldRef := ToRecRef.FIELD(3);
          ToNo := ToFieldRef.VALUE;
          ToDocumentAttachment.VALIDATE("No.",ToNo);
          CLEAR(ToDocumentAttachment."Document Type");
          ToDocumentAttachment.INSERT(true);

        until FromDocumentAttachment.NEXT = 0;
      end;
      CopyAttachmentsForPostedDocsLines(FromRecRef,ToRecRef);
    END;

    LOCAL PROCEDURE CopyAttachmentsForPostedDocsLines@46(VAR FromRecRef@1001 : RecordRef;VAR ToRecRef@1000 : RecordRef);
    VAR
      FromDocumentAttachmentLines@1002 : Record "Document Attachment";
      ToDocumentAttachmentLines@1006 : Record "Document Attachment";
      FromFieldRef@1004 : FieldRef;
      ToFieldRef@1008 : FieldRef;
      FromDocumentType@1005 : 'Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order"';
      FromNo@1003 : Code[20];
      ToNo@1007 : Code[20];
    BEGIN
      FromFieldRef := FromRecRef.FIELD(3);
      FromNo := FromFieldRef.VALUE;
      FromDocumentAttachmentLines.RESET;

      FromFieldRef := FromRecRef.FIELD(1);
      FromDocumentType := FromFieldRef.VALUE;
      FromDocumentAttachmentLines.SETRANGE("Document Type",FromDocumentType);

      ToFieldRef := ToRecRef.FIELD(3);
      ToNo := ToFieldRef.VALUE;

      case FromRecRef.NUMBER of
        DATABASE::"Sales Header":
          FromDocumentAttachmentLines.SETRANGE("Table ID",DATABASE::"Sales Line");
        DATABASE::"Purchase Header":
          FromDocumentAttachmentLines.SETRANGE("Table ID",DATABASE::"Purchase Line");
      end;
      FromDocumentAttachmentLines.SETRANGE("No.",FromNo);
      FromDocumentAttachmentLines.SETRANGE("Document Type",FromDocumentType);

      if FromDocumentAttachmentLines.FINDSET then
        repeat
          ToDocumentAttachmentLines.TRANSFERFIELDS(FromDocumentAttachmentLines);
          case ToRecRef.NUMBER of
            DATABASE::"Sales Invoice Header":
              ToDocumentAttachmentLines.VALIDATE("Table ID",DATABASE::"Sales Invoice Line");
            DATABASE::"Sales Cr.Memo Header":
              ToDocumentAttachmentLines.VALIDATE("Table ID",DATABASE::"Sales Cr.Memo Line");
            DATABASE::"Purch. Inv. Header":
              ToDocumentAttachmentLines.VALIDATE("Table ID",DATABASE::"Purch. Inv. Line");
            DATABASE::"Purch. Cr. Memo Hdr.":
              ToDocumentAttachmentLines.VALIDATE("Table ID",DATABASE::"Purch. Cr. Memo Line");
          end;

          CLEAR(ToDocumentAttachmentLines."Document Type");
          ToDocumentAttachmentLines.VALIDATE("No.",ToNo);

          if ToDocumentAttachmentLines.INSERT(true) then;
        until FromDocumentAttachmentLines.NEXT = 0;
    END;

    BEGIN
    {
      // Code unit to manage document attachment to records.
    }
    END.
  }
}

