OBJECT Table 289 Payment Method
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160107.253T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Description;
    OnInsert=VAR
               IdentityManagement@1000 : Codeunit "Identity Management";
             BEGIN
               if IdentityManagement.IsInvAppId then
                 if not "Use for Invoicing" then
                   VALIDATE("Use for Invoicing",true);

               "Last Modified Date Time" := CURRENTDATETIME;
             END;

    OnModify=BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
             END;

    OnRename=BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
             END;

    CaptionML=ENU=Payment Method;
    LookupPageID="Payment Methods";
    DrillDownPageID="Payment Methods";
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 2   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 3   ;   ;Bal. Account Type   ;Option        ;OnValidate=BEGIN
                                                                "Bal. Account No." := '';
                                                              END;

                                                   CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Bank Account;
                                                   OptionString="G/L Account","Bank Account" }
    { 4   ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF ("Bal. Account Type"=CONST("G/L Account")) "G/L Account"
                                                                 ELSE IF ("Bal. Account Type"=CONST("Bank Account")) "Bank Account";
                                                   OnValidate=BEGIN
                                                                if "Bal. Account No." <> '' then
                                                                  TESTFIELD("Direct Debit",false);
                                                                if "Bal. Account Type" = "Bal. Account Type"::"G/L Account" then
                                                                  CheckGLAcc("Bal. Account No.");
                                                              END;

                                                   CaptionML=ENU=Bal. Account No. }
    { 6   ;   ;Direct Debit        ;Boolean       ;OnValidate=BEGIN
                                                                if not "Direct Debit" then
                                                                  "Direct Debit Pmt. Terms Code" := '';
                                                                if "Direct Debit" then
                                                                  TESTFIELD("Bal. Account No.",'');
                                                              END;

                                                   CaptionML=ENU=Direct Debit }
    { 7   ;   ;Direct Debit Pmt. Terms Code;Code10;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                if "Direct Debit Pmt. Terms Code" <> '' then
                                                                  TESTFIELD("Direct Debit",true);
                                                              END;

                                                   CaptionML=ENU=Direct Debit Pmt. Terms Code }
    { 8   ;   ;Pmt. Export Line Definition;Code20 ;OnLookup=VAR
                                                              DataExchLineDef@1000 : Record "Data Exch. Line Def";
                                                              TempDataExchLineDef@1001 : TEMPORARY Record "Data Exch. Line Def";
                                                              DataExchDef@1002 : Record "Data Exch. Def";
                                                            BEGIN
                                                              DataExchLineDef.SETFILTER(Code,'<>%1','');
                                                              if DataExchLineDef.FINDSET then begin
                                                                repeat
                                                                  DataExchDef.GET(DataExchLineDef."Data Exch. Def Code");
                                                                  if DataExchDef.Type = DataExchDef.Type::"Payment Export" then begin
                                                                    TempDataExchLineDef.INIT;
                                                                    TempDataExchLineDef.Code := DataExchLineDef.Code;
                                                                    TempDataExchLineDef.Name := DataExchLineDef.Name;
                                                                    if TempDataExchLineDef.INSERT then;
                                                                  end;
                                                                until DataExchLineDef.NEXT = 0;
                                                                if PAGE.RUNMODAL(PAGE::"Pmt. Export Line Definitions",TempDataExchLineDef) = ACTION::LookupOK then
                                                                  "Pmt. Export Line Definition" := TempDataExchLineDef.Code;
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Pmt. Export Line Definition }
    { 9   ;   ;Bank Data Conversion Pmt. Type;Text50;
                                                   TableRelation="Bank Data Conversion Pmt. Type";
                                                   CaptionML=ENU=Bank Data Conversion Pmt. Type }
    { 10  ;   ;Use for Invoicing   ;Boolean       ;OnValidate=VAR
                                                                IdentityManagement@1000 : Codeunit "Identity Management";
                                                              BEGIN
                                                                if IdentityManagement.IsInvAppId then
                                                                  if not "Use for Invoicing" then
                                                                    ERROR(UseForInvoicingErr);
                                                              END;

                                                   CaptionML=ENU=Use for Invoicing }
    { 11  ;   ;Last Modified Date Time;DateTime   ;CaptionML=ENU=Last Modified Date Time;
                                                   Editable=false }
    { 8000;   ;Id                  ;GUID          ;CaptionML=ENU=Id }
    { 27000;  ;SAT Payment Method Code;Code20     ;TableRelation="SAT Payment Method Code";
                                                   CaptionML=ENU=SAT Payment Method Code }
    { 27001;  ;SAT Method of Payment;Code10       ;TableRelation="SAT Payment Method";
                                                   CaptionML=ENU=SAT Method of Payment }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=true }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;Code,Description                         }
  }
  CODE
  {
    VAR
      UseForInvoicingErr@1000 : TextConst 'ENU=The Use for Invoicing property must be set to true in the Invoicing App.';

    LOCAL PROCEDURE CheckGLAcc@2(AccNo@1000 : Code[20]);
    VAR
      GLAcc@1001 : Record "G/L Account";
    BEGIN
      if AccNo <> '' then begin
        GLAcc.GET(AccNo);
        GLAcc.CheckGLAcc;
        GLAcc.TESTFIELD("Direct Posting",true);
      end;
    END;

    PROCEDURE GetDescriptionInCurrentLanguage@1() : Text[100];
    VAR
      Language@1000 : Record Language;
      PaymentMethodTranslation@1001 : Record "Payment Method Translation";
    BEGIN
      if PaymentMethodTranslation.GET(Code,Language.GetUserLanguage) then
        exit(PaymentMethodTranslation.Description);

      exit(Description);
    END;

    BEGIN
    END.
  }
}

