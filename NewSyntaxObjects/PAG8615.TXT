OBJECT Page 8615 Config. Packages
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=161630.387T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=ENU=Config. Packages;
    SourceTable="Config. Package";
    PageType=List;
    CardPageID="Config. Package Card";
    PromotedActionCategoriesML=ENU=New,Process,Report,Manage,Package;
    OnOpenPage=VAR
                 ConfigurationPackageFile@1000 : Record "Configuration Package File";
               BEGIN
                 DeleteOldSaaSPackage;
                 ImportPredefinedPackageVisible := not ConfigurationPackageFile.ISEMPTY;
               END;

    ActionList=ACTIONS
    {
      { 9       ;    ;ActionContainer;
                      Name=ActionContainer9;
                      ActionContainerType=ActionItems }
      { 20      ;1   ;ActionGroup;
                      Name=Package;
                      CaptionML=ENU=Package }
      { 22      ;2   ;Action    ;
                      Name="Export Package";
                      Ellipsis=true;
                      CaptionML=ENU=Export Package;
                      ToolTipML=ENU=Create a .rapidstart file that which delivers the package contents in a compressed format. Configuration questionnaires, configuration templates, and the configuration worksheet are added to the package automatically unless you specifically decide to exclude them.;
                      ApplicationArea=#Basic,#Suite,#Advanced;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Export;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 TESTFIELD(Code);
                                 ConfigXMLExchange.ExportPackage(Rec);
                               END;
                                }
      { 13      ;2   ;Action    ;
                      Name="Import Package";
                      Ellipsis=true;
                      CaptionML=ENU=Import Package;
                      ToolTipML=ENU=Import a .rapidstart package file.;
                      ApplicationArea=#Basic,#Suite,#Advanced;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Import;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ConfigXMLExchange.ImportPackageXMLFromClient;
                               END;
                                }
      { 7       ;2   ;Action    ;
                      Name="Import Predefined Package";
                      Ellipsis=true;
                      CaptionML=ENU=Import Predefined Package;
                      ToolTipML=ENU=Import one of the preloaded files with packages, such as Evaluation or Standard.;
                      ApplicationArea=#Basic,#Suite,#Advanced;
                      Promoted=true;
                      Visible=ImportPredefinedPackageVisible;
                      PromotedIsBig=true;
                      Image=Import;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 TempBlob@1005 : TEMPORARY Record TempBlob;
                                 TempBlobUncompressed@1002 : TEMPORARY Record TempBlob;
                                 ConfigurationPackageFile@1001 : Record "Configuration Package File";
                                 ConfigurationPackageFiles@1000 : Page "Configuration Package Files";
                                 InStream@1003 : InStream;
                               BEGIN
                                 ConfigurationPackageFiles.LOOKUPMODE(true);
                                 if ConfigurationPackageFiles.RUNMODAL <> ACTION::LookupOK then
                                   exit;

                                 ConfigurationPackageFiles.GETRECORD(ConfigurationPackageFile);
                                 ConfigurationPackageFile.CALCFIELDS(Package);
                                 TempBlob.Blob := ConfigurationPackageFile.Package;
                                 ConfigXMLExchange.DecompressPackageToBlob(TempBlob,TempBlobUncompressed);
                                 TempBlobUncompressed.Blob.CREATEINSTREAM(InStream);
                                 ConfigXMLExchange.ImportPackageXMLFromStream(InStream);
                               END;
                                }
      { 11      ;2   ;Action    ;
                      Name="Export to Excel";
                      CaptionML=ENU=Export to Excel;
                      ToolTipML=ENU=Export the data in the package to Excel.;
                      ApplicationArea=#Basic,#Suite,#Advanced;
                      Promoted=true;
                      Image=ExportToExcel;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 ConfigPackageTable@1000 : Record "Config. Package Table";
                                 ConfigExcelExchange@1001 : Codeunit "Config. Excel Exchange";
                               BEGIN
                                 TESTFIELD(Code);

                                 ConfigPackageTable.SETRANGE("Package Code",Code);
                                 if CONFIRM(Text004,true,Code) then
                                   ConfigExcelExchange.ExportExcelFromTables(ConfigPackageTable);
                               END;
                                }
      { 15      ;2   ;Action    ;
                      Name="Import from Excel";
                      CaptionML=ENU=Import from Excel;
                      ToolTipML=ENU=Begin the migration of legacy data.;
                      ApplicationArea=#Basic,#Suite,#Advanced;
                      Promoted=true;
                      Image=ImportExcel;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 ConfigExcelExchange@1000 : Codeunit "Config. Excel Exchange";
                               BEGIN
                                 ConfigExcelExchange.ImportExcelFromPackage;
                               END;
                                }
      { 16      ;1   ;ActionGroup;
                      Name="F&unctions";
                      CaptionML=ENU=F&unctions }
      { 19      ;2   ;Action    ;
                      Name="Get Tables";
                      Ellipsis=true;
                      CaptionML=ENU=Get Tables;
                      ToolTipML=ENU=Select tables that you want to add to the configuration package.;
                      ApplicationArea=#Basic,#Suite,#Advanced;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=GetLines;
                      PromotedCategory=New;
                      OnAction=VAR
                                 GetPackageTables@1000 : Report "Get Package Tables";
                               BEGIN
                                 CurrPage.SAVERECORD;
                                 GetPackageTables.Set(Code);
                                 GetPackageTables.RUNMODAL;
                                 CLEAR(GetPackageTables);
                               END;
                                }
      { 3       ;2   ;Action    ;
                      Name="Apply Package";
                      CaptionML=ENU=Apply Package;
                      ToolTipML=ENU=Import the configuration package and apply the package database data at the same time.;
                      ApplicationArea=#Basic,#Suite,#Advanced;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Apply;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ConfigPackageTable@1002 : Record "Config. Package Table";
                                 ConfigPackageMgt@1000 : Codeunit "Config. Package Management";
                               BEGIN
                                 TESTFIELD(Code);
                                 if CONFIRM(Text003,true,Code) then begin
                                   ConfigPackageTable.SETRANGE("Package Code",Code);
                                   ConfigPackageMgt.ApplyPackage(Rec,ConfigPackageTable,true);
                                 end;
                               END;
                                }
      { 14      ;2   ;Action    ;
                      Name="Copy Package";
                      CaptionML=ENU=Copy Package;
                      ToolTipML=ENU=Copy an existing configuration package to create a new package based on the same content.;
                      ApplicationArea=#Basic,#Suite,#Advanced;
                      Image=CopyWorksheet;
                      OnAction=VAR
                                 CopyPackage@1000 : Report "Copy Package";
                               BEGIN
                                 TESTFIELD(Code);
                                 CopyPackage.Set(Rec);
                                 CopyPackage.RUNMODAL;
                                 CLEAR(CopyPackage);
                               END;
                                }
      { 17      ;2   ;Action    ;
                      Name=ValidatePackage;
                      CaptionML=ENU=Validate Package;
                      ToolTipML=ENU=Determine if you have introduced errors, such as not including tables that the configuration relies on.;
                      ApplicationArea=#Basic,#Suite,#Advanced;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=CheckRulesSyntax;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 ConfigPackageTable@1000 : Record "Config. Package Table";
                                 ActiveSession@1004 : Record "Active Session";
                                 SessionEvent@1005 : Record "Session Event";
                                 ConfigProgressBar@1001 : Codeunit "Config. Progress Bar";
                                 Canceled@1002 : Boolean;
                               BEGIN
                                 if CONFIRM(Text002,true,"Package Name") then begin
                                   ConfigPackageTable.SETRANGE("Package Code",Code);
                                   ConfigProgressBar.Init(ConfigPackageTable.COUNT,1,ValidatingTableRelationsMsg);

                                   BackgroundSessionId := 0;
                                   STARTSESSION(BackgroundSessionId,CODEUNIT::"Config. Validate Package",COMPANYNAME,ConfigPackageTable);

                                   ConfigPackageTable.SETRANGE(Validated,false);
                                   ConfigPackageTable.SETCURRENTKEY("Package Processing Order","Processing Order");

                                   SLEEP(1000);
                                   while not Canceled and ActiveSession.GET(SERVICEINSTANCEID,BackgroundSessionId) and ConfigPackageTable.FINDFIRST do begin
                                     ConfigPackageTable.CALCFIELDS("Table Name");
                                     Canceled := not ConfigProgressBar.UpdateCount(ConfigPackageTable."Table Name",ConfigPackageTable.COUNT);
                                     SLEEP(1000);
                                   end;

                                   if ActiveSession.GET(SERVICEINSTANCEID,BackgroundSessionId) then
                                     STOPSESSION(BackgroundSessionId,ValidationCanceledMsg);

                                   if not Canceled and ConfigPackageTable.FINDFIRST then begin
                                     SessionEvent.SETASCENDING("Event Datetime",true);
                                     SessionEvent.SETRANGE("User ID",USERID);
                                     SessionEvent.SETRANGE("Server Instance ID",SERVICEINSTANCEID);
                                     SessionEvent.SETRANGE("Session ID",BackgroundSessionId);
                                     SessionEvent.FINDLAST;
                                     MESSAGE(SessionEvent.Comment);
                                   end;

                                   ConfigProgressBar.Close;
                                 end;
                               END;
                                }
      { 12      ;2   ;Separator ;
                      Name=Separator12 }
      { 21      ;2   ;Action    ;
                      Name="Export to Translation";
                      CaptionML=ENU=Export to Translation;
                      ToolTipML=ENU=Export the data to a file that is suited translation.;
                      ApplicationArea=#Basic,#Suite,#Advanced;
                      Visible=FALSE;
                      Image=Export;
                      OnAction=VAR
                                 ConfigPackageTable@1001 : Record "Config. Package Table";
                               BEGIN
                                 TESTFIELD(Code);
                                 ConfigXMLExchange.SetAdvanced(true);
                                 ConfigPackageTable.SETRANGE("Package Code",Code);
                                 if CONFIRM(Text004,true,Code) then
                                   ConfigXMLExchange.ExportPackageXML(ConfigPackageTable,'');
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Control1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Control2;
                GroupType=Repeater }

    { 31  ;2   ;Field     ;
                Name=Code;
                ToolTipML=ENU=Specifies a code for the configuration package.;
                ApplicationArea=#Basic,#Suite,#Advanced;
                SourceExpr=Code;
                ImplicitType=Code20 }

    { 4   ;2   ;Field     ;
                Name="Package Name";
                ToolTipML=ENU=Specifies the name of the package.;
                ApplicationArea=#Basic,#Suite,#Advanced;
                SourceExpr="Package Name";
                ImplicitType=Text50 }

    { 5   ;2   ;Field     ;
                Name="Language ID";
                ToolTipML=ENU=Specifies the ID of the Windows language to use for the configuration package. Choose the field and select a language ID from the list.;
                ApplicationArea=#Basic,#Suite,#Advanced;
                SourceExpr="Language ID";
                ImplicitType=Integer }

    { 32  ;2   ;Field     ;
                Name="Product Version";
                ToolTipML=ENU=Specifies the version of the product that you are configuring. You can use this field to help differentiate among various versions of a solution.;
                ApplicationArea=#Basic,#Suite,#Advanced;
                SourceExpr="Product Version";
                ImplicitType=Text248 }

    { 23  ;2   ;Field     ;
                Name="Processing Order";
                ToolTipML=ENU=Specifies the order in which the package is to be processed.;
                ApplicationArea=#Basic,#Suite,#Advanced;
                SourceExpr="Processing Order";
                ImplicitType=Integer }

    { 6   ;2   ;Field     ;
                Name="Exclude Config. Tables";
                ToolTipML=ENU=Specifies whether to exclude configuration tables from the package. Select the check box to exclude these types of tables.;
                ApplicationArea=#Basic,#Suite,#Advanced;
                SourceExpr="Exclude Config. Tables";
                ImplicitType=Boolean }

    { 33  ;2   ;Field     ;
                Name="No. of Tables";
                ToolTipML=ENU=Specifies the number of tables that the package contains.;
                ApplicationArea=#Basic,#Suite,#Advanced;
                SourceExpr="No. of Tables";
                ImplicitType=Integer }

    { 34  ;2   ;Field     ;
                Name="No. of Records";
                ToolTipML=ENU=Specifies the number of records in the package.;
                ApplicationArea=#Basic,#Suite,#Advanced;
                SourceExpr="No. of Records";
                ImplicitType=Integer }

    { 27  ;2   ;Field     ;
                Name="No. of Errors";
                ToolTipML=ENU=Specifies the number of errors that the package contains.;
                ApplicationArea=#Basic,#Suite,#Advanced;
                SourceExpr="No. of Errors";
                ImplicitType=Integer }

  }
  CODE
  {
    VAR
      ConfigXMLExchange@1000 : Codeunit "Config. XML Exchange";
      Text002@1002 : TextConst 'ENU=Validate package %1?';
      Text003@1003 : TextConst 'ENU=Apply data from package %1?';
      Text004@1005 : TextConst 'ENU=Export package %1?';
      ValidatingTableRelationsMsg@1004 : TextConst 'ENU=Validating table relations';
      ValidationCanceledMsg@1001 : TextConst 'ENU=Validation canceled.';
      BackgroundSessionId@1007 : Integer;
      SaaSPackageCodeTxt@1011 : TextConst '@@@={Locked};ENU=DYNAMICS365';
      OldSaaSPackageCodeTxt@1014 : TextConst '@@@={Locked};ENU=D365';
      ImportPredefinedPackageVisible@1006 : Boolean;

    LOCAL PROCEDURE DeleteOldSaaSPackage@5();
    VAR
      ConfigPackage@1000 : Record "Config. Package";
    BEGIN
      if ConfigPackage.GET(OldSaaSPackageCodeTxt) then
        ConfigPackage.DELETE(true);

      ConfigPackage.RESET;
      if ConfigPackage.GET(SaaSPackageCodeTxt) then
        ConfigPackage.DELETE(true);
    END;

    BEGIN
    END.
  }
}

