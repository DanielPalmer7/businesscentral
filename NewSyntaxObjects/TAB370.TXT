OBJECT Table 370 Excel Buffer
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160110.893T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Excel Buffer;
  }
  FIELDS
  {
    { 1   ;   ;Row No.             ;Integer       ;OnValidate=BEGIN
                                                                xlRowID := '';
                                                                if "Row No." <> 0 then
                                                                  xlRowID := FORMAT("Row No.");
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Row No. }
    { 2   ;   ;xlRowID             ;Text10        ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=xlRowID }
    { 3   ;   ;Column No.          ;Integer       ;OnValidate=VAR
                                                                x@1000 : Integer;
                                                                i@1001 : Integer;
                                                                y@1003 : Integer;
                                                                c@1002 : Char;
                                                                t@1102601000 : Text[30];
                                                              BEGIN
                                                                xlColID := '';
                                                                x := "Column No.";
                                                                while x > 26 do begin
                                                                  y := x mod 26;
                                                                  if y = 0 then
                                                                    y := 26;
                                                                  c := 64 + y;
                                                                  i := i + 1;
                                                                  t[i] := c;
                                                                  x := (x - y) div 26;
                                                                end;
                                                                if x > 0 then begin
                                                                  c := 64 + x;
                                                                  i := i + 1;
                                                                  t[i] := c;
                                                                end;
                                                                for x := 1 to i do
                                                                  xlColID[x] := t[1 + i - x];
                                                              END;

                                                   DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Column No. }
    { 4   ;   ;xlColID             ;Text10        ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=xlColID }
    { 5   ;   ;Cell Value as Text  ;Text250       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Cell Value as Text }
    { 6   ;   ;Comment             ;Text250       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Comment }
    { 7   ;   ;Formula             ;Text250       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Formula }
    { 8   ;   ;Bold                ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Bold }
    { 9   ;   ;Italic              ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Italic }
    { 10  ;   ;Underline           ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Underline }
    { 11  ;   ;NumberFormat        ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=NumberFormat }
    { 12  ;   ;Formula2            ;Text250       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Formula2 }
    { 13  ;   ;Formula3            ;Text250       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Formula3 }
    { 14  ;   ;Formula4            ;Text250       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Formula4 }
    { 15  ;   ;Cell Type           ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Cell Type;
                                                   OptionCaptionML=ENU=Number,Text,Date,Time;
                                                   OptionString=Number,Text,Date,Time }
    { 16  ;   ;Double Underline    ;Boolean       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Double Underline }
  }
  KEYS
  {
    {    ;"Row No.","Column No."                  ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=You must enter a file name.';
      Text002@1002 : TextConst '@@@="{Locked=""Excel""}";ENU=You must enter an Excel worksheet name.';
      Text003@1003 : TextConst 'ENU=The file %1 does not exist.';
      Text004@1004 : TextConst '@@@="{Locked=""Excel""}";ENU=The Excel worksheet %1 does not exist.';
      Text005@1005 : TextConst '@@@="{Locked=""Excel""}";ENU=Creating Excel worksheet...\\';
      PageTxt@1006 : TextConst 'ENU=Page';
      Text007@1007 : TextConst '@@@="{Locked=""Excel""}";ENU=Reading Excel worksheet...\\';
      Text013@1013 : TextConst 'ENU=&B';
      Text014@1014 : TextConst 'ENU=&D';
      Text015@1015 : TextConst 'ENU=&P';
      Text016@1016 : TextConst 'ENU=A1';
      Text017@1017 : TextConst 'ENU=SUMIF';
      Text018@1018 : TextConst 'ENU=#N/A';
      Text019@1019 : TextConst '@@@={Locked} Used to define an Excel range name. You must refer to Excel rules to change this term.;ENU=GLAcc';
      Text020@1020 : TextConst '@@@={Locked} Used to define an Excel range name. You must refer to Excel rules to change this term.;ENU=Period';
      Text021@1021 : TextConst 'ENU=Budget';
      TempInfoExcelBuf@1036 : TEMPORARY Record "Excel Buffer";
      FileManagement@1045 : Codeunit "File Management";
      XlWrkBkWriter@1022 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorkbookWriter";
      XlWrkBkReader@1023 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorkbookReader";
      XlWrkShtWriter@1024 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetWriter";
      XlWrkShtReader@1043 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetReader";
      RangeStartXlRow@1034 : Text[30];
      RangeStartXlCol@1033 : Text[30];
      RangeEndXlRow@1032 : Text[30];
      RangeEndXlCol@1031 : Text[30];
      FileNameServer@1046 : Text;
      FriendlyName@1025 : Text;
      CurrentRow@1029 : Integer;
      CurrentCol@1030 : Integer;
      UseInfoSheet@1035 : Boolean;
      Text022@1041 : TextConst '@@@={Locked} Used to define an Excel range name. You must refer to Excel rules to change this term.;ENU=CostAcc';
      Text023@1037 : TextConst 'ENU=Information';
      Text034@1039 : TextConst '@@@="{Split=r''\|\*\..{1,4}\|?''}{Locked=""Excel""}";ENU=Excel Files (*.xls*)|*.xls*|All Files (*.*)|*.*';
      Text035@1040 : TextConst 'ENU=The operation was canceled.';
      Text037@1047 : TextConst '@@@="{Locked=""Excel""}";ENU=Could not create the Excel workbook.';
      Text038@1048 : TextConst 'ENU=Global variable %1 is not included for test.';
      Text039@1050 : TextConst 'ENU=Cell type has not been set.';
      SavingDocumentMsg@1010 : TextConst 'ENU=Saving the following document: %1.';
      ExcelFileExtensionTok@1012 : TextConst '@@@={Locked};ENU=.xlsx';
      ErrorMessage@1026 : Text;

    [External]
    PROCEDURE CreateNewBook@42(SheetName@1000 : Text[250]);
    BEGIN
      CreateBook('',SheetName);
    END;

    [Internal]
    PROCEDURE CreateBook@1(FileName@1001 : Text;SheetName@1000 : Text);
    BEGIN
      if SheetName = '' then
        ERROR(Text002);

      if FileName = '' then
        FileNameServer := FileManagement.ServerTempFileName('xlsx')
      else begin
        if EXISTS(FileName) then
          ERASE(FileName);
        FileNameServer := FileName;
      end;

      XlWrkBkWriter := XlWrkBkWriter.Create(FileNameServer);
      if ISNULL(XlWrkBkWriter) then
        ERROR(Text037);

      XlWrkShtWriter := XlWrkBkWriter.FirstWorksheet;
      if SheetName <> '' then
        XlWrkShtWriter.Name := SheetName;
    END;

    PROCEDURE OpenBook@2(FileName@1000 : Text;SheetName@1001 : Text);
    BEGIN
      if FileName = '' then
        ERROR(Text001);

      if SheetName = '' then
        ERROR(Text002);

      if SheetName = 'G/L Account' then
        SheetName := 'GL Account';

      XlWrkBkReader := XlWrkBkReader.Open(FileName);
      if XlWrkBkReader.HasWorksheet(SheetName) then begin
        XlWrkShtReader := XlWrkBkReader.GetWorksheetByName(SheetName);
      end else begin
        CloseBook;
        ERROR(Text004,SheetName);
      end;
    END;

    [External]
    PROCEDURE OpenBookStream@44(FileStream@1000 : InStream;SheetName@1001 : Text) : Text;
    BEGIN
      if SheetName = '' then
        exit(Text002);

      if SheetName = 'G/L Account' then
        SheetName := 'GL Account';

      XlWrkBkReader := XlWrkBkReader.Open(FileStream);
      if XlWrkBkReader.HasWorksheet(SheetName) then
        XlWrkShtReader := XlWrkBkReader.GetWorksheetByName(SheetName)
      else begin
        CloseBook;
        ErrorMessage := STRSUBSTNO(Text004,SheetName);
        exit(ErrorMessage);
      end;
    END;

    [Internal]
    PROCEDURE UpdateBook@5(FileName@1000 : Text;SheetName@1001 : Text);
    BEGIN
      UpdateBookExcel(FileName,SheetName,true);
    END;

    [Internal]
    PROCEDURE UpdateBookExcel@48(FileName@1001 : Text;SheetName@1000 : Text;PreserveDataOnUpdate@1002 : Boolean);
    BEGIN
      if FileName = '' then
        ERROR(Text001);

      if SheetName = '' then
        ERROR(Text002);

      FileNameServer := FileName;
      XlWrkBkWriter := XlWrkBkWriter.Open(FileNameServer);
      if XlWrkBkWriter.HasWorksheet(SheetName) then begin
        XlWrkShtWriter := XlWrkBkWriter.GetWorksheetByName(SheetName);
        // Set PreserverDataOnUpdate to false if the sheet writer should clear all empty cells
        // in which NAV does not have new data. Notice that the sheet writer will only clear Excel
        // cells that are addressed by the writer. All other cells will be left unmodified.
        XlWrkShtWriter.PreserveDataOnUpdate := PreserveDataOnUpdate;
      end else begin
        CloseBook;
        ERROR(Text004,SheetName);
      end;
    END;

    [External]
    PROCEDURE CloseBook@30();
    BEGIN
      if not ISNULL(XlWrkBkWriter) then begin
        XlWrkBkWriter.ClearFormulaCalculations;
        XlWrkBkWriter.ValidateDocument;
        XlWrkBkWriter.Close;
        CLEAR(XlWrkShtWriter);
        CLEAR(XlWrkBkWriter);
      end;

      if not ISNULL(XlWrkBkReader) then begin
        CLEAR(XlWrkShtReader);
        CLEAR(XlWrkBkReader);
      end;
    END;

    PROCEDURE SelectOrAddSheet@47(NewSheetName@1000 : Text);
    BEGIN
      if NewSheetName = '' then
        exit;
      if XlWrkBkWriter.HasWorksheet(NewSheetName) then
        XlWrkShtWriter := XlWrkBkWriter.GetWorksheetByName(NewSheetName)
      else
        XlWrkShtWriter := XlWrkBkWriter.AddWorksheet(NewSheetName);
    END;

    [External]
    PROCEDURE WriteSheet@37(ReportHeader@1001 : Text;CompanyName2@1002 : Text;UserID2@1003 : Text);
    VAR
      OrientationValues@1000 : DotNet "'DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.DocumentFormat.OpenXml.Spreadsheet.OrientationValues";
      CRLF@1008 : Char;
    BEGIN
      CRLF := 10;

      XlWrkShtWriter.AddPageSetup(OrientationValues.Landscape,9); // 9 - default value for Paper Size - A4

      WriteAllToCurrentSheet(Rec);

      if ReportHeader <> '' then
        XlWrkShtWriter.AddHeader(
          true,
          STRSUBSTNO('%1%2%1%3%4',GetExcelReference(1),ReportHeader,CRLF,CompanyName2));

      XlWrkShtWriter.AddHeader(
        false,
        STRSUBSTNO('%1%3%4%3%5 %2',GetExcelReference(2),GetExcelReference(3),CRLF,UserID2,PageTxt));

      if UseInfoSheet then
        if not TempInfoExcelBuf.ISEMPTY then begin
          SelectOrAddSheet(Text023);
          WriteAllToCurrentSheet(TempInfoExcelBuf);
        end;
    END;

    [External]
    PROCEDURE WriteAllToCurrentSheet@49(VAR ExcelBuffer@1002 : Record "Excel Buffer");
    VAR
      ExcelBufferDialogMgt@1000 : Codeunit "Excel Buffer Dialog Management";
      RecNo@1001 : Integer;
      TotalRecNo@1004 : Integer;
      LastUpdate@1003 : DateTime;
    BEGIN
      if ExcelBuffer.ISEMPTY then
        exit;
      ExcelBufferDialogMgt.Open(Text005);
      LastUpdate := CURRENTDATETIME;
      TotalRecNo := ExcelBuffer.COUNT;
      if ExcelBuffer.FINDSET then
        repeat
          RecNo := RecNo + 1;
          if not UpdateProgressDialog(ExcelBufferDialogMgt,LastUpdate,RecNo,TotalRecNo) then begin
            CloseBook;
            ERROR(Text035)
          end;
          if Formula = '' then
            WriteCellValue(ExcelBuffer)
          else
            WriteCellFormula(ExcelBuffer)
        until ExcelBuffer.NEXT = 0;
      ExcelBufferDialogMgt.Close;
    END;

    LOCAL PROCEDURE WriteCellValue@28(ExcelBuffer@1000 : Record "Excel Buffer");
    VAR
      Decorator@1001 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.CellDecorator";
    BEGIN
      with ExcelBuffer do begin
        GetCellDecorator(Bold,Italic,Underline,"Double Underline",Decorator);

        case "Cell Type" of
          "Cell Type"::Number:
            XlWrkShtWriter.SetCellValueNumber("Row No.",xlColID,"Cell Value as Text",NumberFormat,Decorator);
          "Cell Type"::Text:
            XlWrkShtWriter.SetCellValueText("Row No.",xlColID,"Cell Value as Text",Decorator);
          "Cell Type"::Date:
            XlWrkShtWriter.SetCellValueDate("Row No.",xlColID,"Cell Value as Text",NumberFormat,Decorator);
          "Cell Type"::Time:
            XlWrkShtWriter.SetCellValueTime("Row No.",xlColID,"Cell Value as Text",NumberFormat,Decorator);
          else
            ERROR(Text039)
        end;
      end;
    END;

    LOCAL PROCEDURE WriteCellFormula@38(ExcelBuffer@1000 : Record "Excel Buffer");
    VAR
      Decorator@1001 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.CellDecorator";
    BEGIN
      with ExcelBuffer do begin
        GetCellDecorator(Bold,Italic,Underline,"Double Underline",Decorator);

        XlWrkShtWriter.SetCellFormula("Row No.",xlColID,GetFormula,NumberFormat,Decorator);
      end;
    END;

    LOCAL PROCEDURE GetCellDecorator@33(IsBold@1000 : Boolean;IsItalic@1001 : Boolean;IsUnderlined@1002 : Boolean;IsDoubleUnderlined@1004 : Boolean;VAR Decorator@1003 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.CellDecorator");
    BEGIN
      if IsBold and IsItalic then begin
        if IsDoubleUnderlined then begin
          Decorator := XlWrkShtWriter.DefaultBoldItalicDoubleUnderlinedCellDecorator;
          exit;
        end;
        if IsUnderlined then begin
          Decorator := XlWrkShtWriter.DefaultBoldItalicUnderlinedCellDecorator;
          exit;
        end;
      end;

      if IsBold and IsItalic then begin
        Decorator := XlWrkShtWriter.DefaultBoldItalicCellDecorator;
        exit;
      end;

      if IsBold then begin
        if IsDoubleUnderlined then begin
          Decorator := XlWrkShtWriter.DefaultBoldDoubleUnderlinedCellDecorator;
          exit;
        end;
        if IsUnderlined then begin
          Decorator := XlWrkShtWriter.DefaultBoldUnderlinedCellDecorator;
          exit;
        end;
      end;

      if IsBold then begin
        Decorator := XlWrkShtWriter.DefaultBoldCellDecorator;
        exit;
      end;

      if IsItalic then begin
        if IsDoubleUnderlined then begin
          Decorator := XlWrkShtWriter.DefaultItalicDoubleUnderlinedCellDecorator;
          exit;
        end;
        if IsUnderlined then begin
          Decorator := XlWrkShtWriter.DefaultItalicUnderlinedCellDecorator;
          exit;
        end;
      end;

      if IsItalic then begin
        Decorator := XlWrkShtWriter.DefaultItalicCellDecorator;
        exit;
      end;

      if IsDoubleUnderlined then
        Decorator := XlWrkShtWriter.DefaultDoubleUnderlinedCellDecorator
      else begin
        if IsUnderlined then
          Decorator := XlWrkShtWriter.DefaultUnderlinedCellDecorator
        else
          Decorator := XlWrkShtWriter.DefaultCellDecorator;
      end;
    END;

    [External]
    PROCEDURE SetColumnWidth@50(ColName@1000 : Text[10];NewColWidth@1001 : Decimal);
    BEGIN
      if not ISNULL(XlWrkShtWriter) then
        XlWrkShtWriter.SetColumnWidth(ColName,NewColWidth);
    END;

    [Internal]
    PROCEDURE CreateRangeName@9(RangeName@1000 : Text[30];FromColumnNo@1001 : Integer;FromRowNo@1002 : Integer);
    VAR
      TempExcelBuf@1005 : TEMPORARY Record "Excel Buffer";
      ToxlRowID@1004 : Text[10];
    BEGIN
      SETCURRENTKEY("Row No.","Column No.");
      if FIND('+') then
        ToxlRowID := xlRowID;
      TempExcelBuf.VALIDATE("Row No.",FromRowNo);
      TempExcelBuf.VALIDATE("Column No.",FromColumnNo);

      XlWrkShtWriter.AddRange(
        RangeName,
        GetExcelReference(4) + TempExcelBuf.xlColID + GetExcelReference(4) + TempExcelBuf.xlRowID +
        ':' +
        GetExcelReference(4) + TempExcelBuf.xlColID + GetExcelReference(4) + ToxlRowID);
    END;

    [External]
    PROCEDURE ReadSheet@4();
    VAR
      ExcelBufferDialogMgt@1003 : Codeunit "Excel Buffer Dialog Management";
      CellData@1002 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.CellData";
      Enumerator@1001 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      RowCount@1009 : Integer;
      LastUpdate@1004 : DateTime;
    BEGIN
      LastUpdate := CURRENTDATETIME;
      ExcelBufferDialogMgt.Open(Text007);
      DELETEALL;

      Enumerator := XlWrkShtReader.GetEnumerator;
      RowCount := XlWrkShtReader.RowCount;
      while Enumerator.MoveNext do begin
        CellData := Enumerator.Current;
        if CellData.HasValue then begin
          VALIDATE("Row No.",CellData.RowNumber);
          VALIDATE("Column No.",CellData.ColumnNumber);
          ParseCellValue(CellData.Value,CellData.Format);
          INSERT;

          if not UpdateProgressDialog(ExcelBufferDialogMgt,LastUpdate,CellData.RowNumber,RowCount) then begin
            CloseBook;
            ERROR(Text035)
          end;
        end;
      end;

      CloseBook;
      ExcelBufferDialogMgt.Close;
    END;

    LOCAL PROCEDURE ParseCellValue@40(Value@1000 : Text;FormatString@1001 : Text);
    VAR
      Decimal@1004 : Decimal;
    BEGIN
      // The format contains only en-US number separators, this is an OpenXML standard requirement
      // The algorithm sieves the data based on formatting as follows (the steps must run in this order)
      // 1. FormatString = '@' -> Text
      // 2. FormatString.Contains(':') -> Time
      // 3. FormatString.ContainsOneOf('y', 'm', 'd') && FormatString.DoesNotContain('Red') -> Date
      // 4. anything else -> Decimal

      NumberFormat := COPYSTR(FormatString,1,30);

      if FormatString = '@' then begin
        "Cell Type" := "Cell Type"::Text;
        "Cell Value as Text" := Value;
        exit;
      end;

      EVALUATE(Decimal,Value);

      if STRPOS(FormatString,':') <> 0 then begin
        // Excel Time is stored in OADate format
        "Cell Type" := "Cell Type"::Time;
        "Cell Value as Text" := FORMAT(DT2TIME(ConvertDateTimeDecimalToDateTime(Decimal)));
        exit;
      end;

      if ((STRPOS(FormatString,'y') <> 0) or
          (STRPOS(FormatString,'m') <> 0) or
          (STRPOS(FormatString,'d') <> 0)) and
         (STRPOS(FormatString,'Red') = 0)
      then begin
        "Cell Type" := "Cell Type"::Date;
        "Cell Value as Text" := FORMAT(DT2DATE(ConvertDateTimeDecimalToDateTime(Decimal)));
        exit;
      end;

      "Cell Type" := "Cell Type"::Number;
      "Cell Value as Text" := FORMAT(ROUND(Decimal,0.000001),0,1);
    END;

    [External]
    PROCEDURE SelectSheetsName@6(FileName@1000 : Text) : Text[250];
    VAR
      TempNameValueBuffer@1009 : TEMPORARY Record "Name/Value Buffer";
      SheetNames@1008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.ArrayList";
      SheetName@1002 : Text[250];
      SelectedSheetName@1007 : Text[250];
      i@1001 : Integer;
    BEGIN
      if FileName = '' then
        ERROR(Text001);

      XlWrkBkReader := XlWrkBkReader.Open(FileName);

      SelectedSheetName := '';
      SheetNames := SheetNames.ArrayList(XlWrkBkReader.SheetNames);
      if not ISNULL(SheetNames) then begin
        for i := 0 to SheetNames.Count - 1 do begin
          SheetName := SheetNames.Item(i);
          if SheetName <> '' then begin
            TempNameValueBuffer.INIT;
            TempNameValueBuffer.ID := i;
            TempNameValueBuffer.Name := FORMAT(i + 1);
            TempNameValueBuffer.Value := SheetName;
            TempNameValueBuffer.INSERT;
          end;
        end;
        if not TempNameValueBuffer.ISEMPTY then
          if TempNameValueBuffer.COUNT = 1 then
            SelectedSheetName := TempNameValueBuffer.Value
          else begin
            TempNameValueBuffer.FINDFIRST;
            if PAGE.RUNMODAL(PAGE::"Name/Value Lookup",TempNameValueBuffer) = ACTION::LookupOK then
              SelectedSheetName := TempNameValueBuffer.Value;
          end;
      end;

      CloseBook;
      exit(SelectedSheetName);
    END;

    [External]
    PROCEDURE GetExcelReference@10(Which@1000 : Integer) : Text[250];
    BEGIN
      case Which of
        1:
          exit(Text013);
        // DO NOT TRANSLATE: &B is the Excel code to turn bold printing on or off for customized Header/Footer.
        2:
          exit(Text014);
        // DO NOT TRANSLATE: &D is the Excel code to print the current date in customized Header/Footer.
        3:
          exit(Text015);
        // DO NOT TRANSLATE: &P is the Excel code to print the page number in customized Header/Footer.
        4:
          exit('$');
        // DO NOT TRANSLATE: $ is the Excel code for absolute reference to cells.
        5:
          exit(Text016);
        // DO NOT TRANSLATE: A1 is the Excel reference of the first cell.
        6:
          exit(Text017);
        // DO NOT TRANSLATE: SUMIF is the name of the Excel function used to summarize values according to some conditions.
        7:
          exit(Text018);
        // DO NOT TRANSLATE: The #N/A Excel error value occurs when a value is not available to a function or formula.
        8:
          exit(Text019);
        // DO NOT TRANSLATE: GLAcc is used to define an Excel range name. You must refer to Excel rules to change this term.
        9:
          exit(Text020);
        // DO NOT TRANSLATE: Period is used to define an Excel range name. You must refer to Excel rules to change this term.
        10:
          exit(Text021);
        // DO NOT TRANSLATE: Budget is used to define an Excel worksheet name. You must refer to Excel rules to change this term.
        11:
          exit(Text022);
        // DO NOT TRANSLATE: CostAcc is used to define an Excel range name. You must refer to Excel rules to change this term.
      end;
    END;

    [External]
    PROCEDURE ExportBudgetFilterToFormula@11(VAR ExcelBuf@1000 : Record "Excel Buffer") : Boolean;
    VAR
      TempExcelBufFormula@1001 : TEMPORARY Record "Excel Buffer";
      TempExcelBufFormula2@1004 : TEMPORARY Record "Excel Buffer";
      FirstRow@1002 : Integer;
      LastRow@1003 : Integer;
      HasFormulaError@1005 : Boolean;
      ThisCellHasFormulaError@1006 : Boolean;
    BEGIN
      ExcelBuf.SETFILTER(Formula,'<>%1','');
      if ExcelBuf.FINDSET then
        repeat
          TempExcelBufFormula := ExcelBuf;
          TempExcelBufFormula.INSERT;
        until ExcelBuf.NEXT = 0;
      ExcelBuf.RESET;

      with TempExcelBufFormula do
        if FINDSET then
          repeat
            ThisCellHasFormulaError := false;
            ExcelBuf.SETRANGE("Column No.",1);
            ExcelBuf.SETFILTER("Row No.",'<>%1',"Row No.");
            ExcelBuf.SETFILTER("Cell Value as Text",Formula);
            TempExcelBufFormula2 := TempExcelBufFormula;
            if ExcelBuf.FINDSET then
              repeat
                if not GET(ExcelBuf."Row No.","Column No.") then
                  ExcelBuf.MARK(true);
              until ExcelBuf.NEXT = 0;
            TempExcelBufFormula := TempExcelBufFormula2;
            ClearFormula;
            ExcelBuf.SETRANGE("Cell Value as Text");
            ExcelBuf.SETRANGE("Row No.");
            if ExcelBuf.FINDSET then
              repeat
                if ExcelBuf.MARK then begin
                  LastRow := ExcelBuf."Row No.";
                  if FirstRow = 0 then
                    FirstRow := LastRow;
                end else
                  if FirstRow <> 0 then begin
                    if FirstRow = LastRow then
                      ThisCellHasFormulaError := AddToFormula(xlColID + FORMAT(FirstRow))
                    else
                      ThisCellHasFormulaError :=
                        AddToFormula('SUM(' + xlColID + FORMAT(FirstRow) + ':' + xlColID + FORMAT(LastRow) + ')');
                    FirstRow := 0;
                    if ThisCellHasFormulaError then
                      SetFormula(ExcelBuf.GetExcelReference(7));
                  end;
              until ThisCellHasFormulaError or (ExcelBuf.NEXT = 0);

            if not ThisCellHasFormulaError and (FirstRow <> 0) then begin
              if FirstRow = LastRow then
                ThisCellHasFormulaError := AddToFormula(xlColID + FORMAT(FirstRow))
              else
                ThisCellHasFormulaError :=
                  AddToFormula('SUM(' + xlColID + FORMAT(FirstRow) + ':' + xlColID + FORMAT(LastRow) + ')');
              FirstRow := 0;
              if ThisCellHasFormulaError then
                SetFormula(ExcelBuf.GetExcelReference(7));
            end;

            ExcelBuf.RESET;
            ExcelBuf.GET("Row No.","Column No.");
            ExcelBuf.SetFormula(GetFormula);
            ExcelBuf.MODIFY;
            HasFormulaError := HasFormulaError or ThisCellHasFormulaError;
          until NEXT = 0;

      exit(HasFormulaError);
    END;

    [External]
    PROCEDURE AddToFormula@12(Text@1001 : Text[30]) : Boolean;
    VAR
      Overflow@1002 : Boolean;
      LongFormula@1000 : Text[1000];
    BEGIN
      LongFormula := GetFormula;
      if LongFormula = '' then
        LongFormula := '=';
      if LongFormula <> '=' then
        if STRLEN(LongFormula) + 1 > MAXSTRLEN(LongFormula) then
          Overflow := true
        else
          LongFormula := LongFormula + '+';
      if STRLEN(LongFormula) + STRLEN(Text) > MAXSTRLEN(LongFormula) then
        Overflow := true
      else
        SetFormula(LongFormula + Text);
      exit(Overflow);
    END;

    [External]
    PROCEDURE GetFormula@13() : Text[1000];
    BEGIN
      exit(Formula + Formula2 + Formula3 + Formula4);
    END;

    [External]
    PROCEDURE SetFormula@22(LongFormula@1000 : Text[1000]);
    BEGIN
      ClearFormula;
      if LongFormula = '' then
        exit;

      Formula := COPYSTR(LongFormula,1,MAXSTRLEN(Formula));
      if STRLEN(LongFormula) > MAXSTRLEN(Formula) then
        Formula2 := COPYSTR(LongFormula,MAXSTRLEN(Formula) + 1,MAXSTRLEN(Formula2));
      if STRLEN(LongFormula) > MAXSTRLEN(Formula) + MAXSTRLEN(Formula2) then
        Formula3 := COPYSTR(LongFormula,MAXSTRLEN(Formula) + MAXSTRLEN(Formula2) + 1,MAXSTRLEN(Formula3));
      if STRLEN(LongFormula) > MAXSTRLEN(Formula) + MAXSTRLEN(Formula2) + MAXSTRLEN(Formula3) then
        Formula4 := COPYSTR(LongFormula,MAXSTRLEN(Formula) + MAXSTRLEN(Formula2) + MAXSTRLEN(Formula3) + 1,MAXSTRLEN(Formula4));
    END;

    [External]
    PROCEDURE ClearFormula@18();
    BEGIN
      Formula := '';
      Formula2 := '';
      Formula3 := '';
      Formula4 := '';
    END;

    [External]
    PROCEDURE NewRow@14();
    BEGIN
      SetCurrent(CurrentRow + 1,0);
    END;

    [External]
    PROCEDURE AddColumn@16(Value@1000 : Variant;IsFormula@1001 : Boolean;CommentText@1002 : Text;IsBold@1003 : Boolean;IsItalics@1004 : Boolean;IsUnderline@1005 : Boolean;NumFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      AddColumnToBuffer(Rec,Value,IsFormula,CommentText,IsBold,IsItalics,IsUnderline,NumFormat,CellType);
    END;

    [External]
    PROCEDURE AddInfoColumn@24(Value@1006 : Variant;IsFormula@1005 : Boolean;IsBold@1003 : Boolean;IsItalics@1002 : Boolean;IsUnderline@1001 : Boolean;NumFormat@1000 : Text[30];CellType@1007 : Option);
    BEGIN
      AddColumnToBuffer(TempInfoExcelBuf,Value,IsFormula,'',IsBold,IsItalics,IsUnderline,NumFormat,CellType);
    END;

    LOCAL PROCEDURE AddColumnToBuffer@54(VAR ExcelBuffer@1008 : Record "Excel Buffer";Value@1000 : Variant;IsFormula@1001 : Boolean;CommentText@1002 : Text;IsBold@1003 : Boolean;IsItalics@1004 : Boolean;IsUnderline@1005 : Boolean;NumFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      if CurrentRow < 1 then
        NewRow;

      CurrentCol := CurrentCol + 1;
      ExcelBuffer.INIT;
      ExcelBuffer.VALIDATE("Row No.",CurrentRow);
      ExcelBuffer.VALIDATE("Column No.",CurrentCol);
      if IsFormula then
        ExcelBuffer.SetFormula(FORMAT(Value))
      else
        ExcelBuffer."Cell Value as Text" := FORMAT(Value);
      ExcelBuffer.Comment := COPYSTR(CommentText,1,MAXSTRLEN(ExcelBuffer.Comment));
      ExcelBuffer.Bold := IsBold;
      ExcelBuffer.Italic := IsItalics;
      ExcelBuffer.Underline := IsUnderline;
      ExcelBuffer.NumberFormat := NumFormat;
      ExcelBuffer."Cell Type" := CellType;
      ExcelBuffer.INSERT;
    END;

    [External]
    PROCEDURE EnterCell@51(VAR ExcelBuffer@1006 : Record "Excel Buffer";RowNo@1000 : Integer;ColumnNo@1001 : Integer;Value@1002 : Variant;IsBold@1005 : Boolean;IsItalics@1004 : Boolean;IsUnderline@1003 : Boolean);
    BEGIN
      ExcelBuffer.INIT;
      ExcelBuffer.VALIDATE("Row No.",RowNo);
      ExcelBuffer.VALIDATE("Column No.",ColumnNo);

      case true of
        Value.ISDECIMAL or Value.ISINTEGER:
          ExcelBuffer.VALIDATE("Cell Type",ExcelBuffer."Cell Type"::Number);
        Value.ISDATE:
          ExcelBuffer.VALIDATE("Cell Type",ExcelBuffer."Cell Type"::Date);
        else
          ExcelBuffer.VALIDATE("Cell Type",ExcelBuffer."Cell Type"::Text);
      end;

      ExcelBuffer."Cell Value as Text" := COPYSTR(FORMAT(Value),1,MAXSTRLEN(ExcelBuffer."Cell Value as Text" ));
      ExcelBuffer.Bold := IsBold;
      ExcelBuffer.Italic := IsItalics;
      ExcelBuffer.Underline := IsUnderline;
      ExcelBuffer.INSERT(true);
    END;

    [External]
    PROCEDURE StartRange@19();
    VAR
      DummyExcelBuf@1000 : Record "Excel Buffer";
    BEGIN
      DummyExcelBuf.VALIDATE("Row No.",CurrentRow);
      DummyExcelBuf.VALIDATE("Column No.",CurrentCol);

      RangeStartXlRow := DummyExcelBuf.xlRowID;
      RangeStartXlCol := DummyExcelBuf.xlColID;
    END;

    [External]
    PROCEDURE EndRange@23();
    VAR
      DummyExcelBuf@1000 : Record "Excel Buffer";
    BEGIN
      DummyExcelBuf.VALIDATE("Row No.",CurrentRow);
      DummyExcelBuf.VALIDATE("Column No.",CurrentCol);

      RangeEndXlRow := DummyExcelBuf.xlRowID;
      RangeEndXlCol := DummyExcelBuf.xlColID;
    END;

    [External]
    PROCEDURE CreateRange@45(RangeName@1000 : Text[250]);
    BEGIN
      XlWrkShtWriter.AddRange(
        RangeName,
        GetExcelReference(4) + RangeStartXlCol + GetExcelReference(4) + RangeStartXlRow +
        ':' +
        GetExcelReference(4) + RangeEndXlCol + GetExcelReference(4) + RangeEndXlRow);
    END;

    [External]
    PROCEDURE ClearNewRow@26();
    BEGIN
      SetCurrent(0,0);
    END;

    [External]
    PROCEDURE SetUseInfoSheet@25();
    BEGIN
      UseInfoSheet := true;
    END;

    [External]
    PROCEDURE UTgetGlobalValue@35(globalVariable@1001 : Text[30];VAR value@1000 : Variant);
    BEGIN
      case globalVariable of
        'CurrentRow':
          value := CurrentRow;
        'CurrentCol':
          value := CurrentCol;
        'RangeStartXlRow':
          value := RangeStartXlRow;
        'RangeStartXlCol':
          value := RangeStartXlCol;
        'RangeEndXlRow':
          value := RangeEndXlRow;
        'RangeEndXlCol':
          value := RangeEndXlCol;
        'XlWrkSht':
          value := XlWrkShtWriter;
        'ExcelFile':
          value := FileNameServer;
        else
          ERROR(Text038,globalVariable);
      end;
    END;

    [External]
    PROCEDURE SetCurrent@27(NewCurrentRow@1000 : Integer;NewCurrentCol@1001 : Integer);
    BEGIN
      CurrentRow := NewCurrentRow;
      CurrentCol := NewCurrentCol;
    END;

    [Internal]
    PROCEDURE CreateValidationRule@17(Range@1000 : Code[20]);
    BEGIN
      XlWrkShtWriter.AddRangeDataValidation(
        Range,
        GetExcelReference(4) + RangeStartXlCol + GetExcelReference(4) + RangeStartXlRow +
        ':' +
        GetExcelReference(4) + RangeEndXlCol + GetExcelReference(4) + RangeEndXlRow);
    END;

    [External]
    PROCEDURE QuitExcel@29();
    BEGIN
      CloseBook;
    END;

    [External]
    PROCEDURE OpenExcel@31();
    BEGIN
      if OpenUsingDocumentService('') then
        exit;

      FileManagement.DownloadHandler(FileNameServer,'','',Text034,GetFriendlyFilename);
    END;

    [Internal]
    PROCEDURE DownloadAndOpenExcel@34();
    BEGIN
      OpenExcelWithName(GetFriendlyFilename);
    END;

    [Internal]
    PROCEDURE OpenExcelWithName@15(FileName@1000 : Text);
    BEGIN
      if FileName = '' then
        ERROR(Text001);

      if OpenUsingDocumentService(FileName) then
        exit;

      FileManagement.DownloadHandler(FileNameServer,'','',Text034,FileName);
    END;

    LOCAL PROCEDURE OpenUsingDocumentService@21(FileName@1000 : Text) : Boolean;
    VAR
      DocumentServiceMgt@1005 : Codeunit "Document Service Management";
      FileMgt@1004 : Codeunit "File Management";
      PathHelper@1003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path";
      DialogWindow@1002 : Dialog;
      DocumentUrl@1001 : Text;
    BEGIN
      if not EXISTS(FileNameServer) then
        ERROR(Text003,FileNameServer);

      // if document service is configured we save the generated document to SharePoint and open it from there.
      if DocumentServiceMgt.IsConfigured then begin
        if FileName = '' then
          FileName := 'Book.' + PathHelper.ChangeExtension(PathHelper.GetRandomFileName,'xlsx')
        else begin
          // if file is not applicable for the service it can not be opened using the document service.
          if not DocumentServiceMgt.IsServiceUri(FileName) then
            exit(false);

          FileName := FileMgt.GetFileName(FileName);
        end;

        DialogWindow.OPEN(STRSUBSTNO(SavingDocumentMsg,FileName));
        DocumentUrl := DocumentServiceMgt.SaveFile(FileNameServer,FileName,true);
        DocumentServiceMgt.OpenDocument(DocumentUrl);
        DialogWindow.CLOSE;
        exit(true);
      end;

      exit(false);
    END;

    [Internal]
    PROCEDURE CreateBookAndOpenExcel@32(FileName@1004 : Text;SheetName@1000 : Text[250];ReportHeader@1003 : Text;CompanyName2@1002 : Text;UserID2@1001 : Text);
    BEGIN
      CreateBook(FileName,SheetName);
      WriteSheet(ReportHeader,CompanyName2,UserID2);
      CloseBook;
      OpenExcel;
    END;

    LOCAL PROCEDURE UpdateProgressDialog@36(VAR ExcelBufferDialogManagement@1000 : Codeunit "Excel Buffer Dialog Management";VAR LastUpdate@1001 : DateTime;CurrentCount@1002 : Integer;TotalCount@1004 : Integer) : Boolean;
    VAR
      CurrentTime@1003 : DateTime;
    BEGIN
      // Refresh at 100%, and every second in between 0% to 100%
      // Duration is measured in miliseconds -> 1 sec = 1000 ms
      CurrentTime := CURRENTDATETIME;
      if (CurrentCount = TotalCount) or (CurrentTime - LastUpdate >= 1000) then begin
        LastUpdate := CurrentTime;
        if not ExcelBufferDialogManagement.SetProgress(ROUND(CurrentCount / TotalCount * 10000,1)) then
          exit(false);
      end;

      exit(true)
    END;

    LOCAL PROCEDURE GetFriendlyFilename@46() : Text;
    BEGIN
      if FriendlyName = '' then
        exit('Book1' + ExcelFileExtensionTok);

      exit(FileManagement.StripNotsupportChrInFileName(FriendlyName) + ExcelFileExtensionTok);
    END;

    [External]
    PROCEDURE SetFriendlyFilename@41(Name@1000 : Text);
    BEGIN
      FriendlyName := Name;
    END;

    [External]
    PROCEDURE ConvertDateTimeDecimalToDateTime@43(DateTimeAsOADate@1000 : Decimal) : DateTime;
    VAR
      DotNetDateTime@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      DotNetDateTimeWithKind@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      DotNetDateTimeKind@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTimeKind";
    BEGIN
      DotNetDateTime := DotNetDateTime.FromOADate(DateTimeAsOADate);
      DotNetDateTimeWithKind := DotNetDateTime.DateTime(DotNetDateTime.Ticks,DotNetDateTimeKind.Local);
      exit(DotNetDateTimeWithKind);
    END;

    BEGIN
    END.
  }
}

