OBJECT Codeunit 10145 E-Invoice Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160933.37T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    Permissions=TableData "Sales Invoice Header"=rimd,
                TableData "Sales Cr.Memo Header"=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Customer@1020005 : Record Customer;
      GLSetup@1020004 : Record "General Ledger Setup";
      CompanyInfo@1020000 : Record "Company Information";
      SourceCodeSetup@1020001 : Record "Source Code Setup";
      DocNameSpace@1020009 : Text;
      Text000@1020012 : TextConst 'ENU=Dear customer, please find invoice number %1 in the attachment.';
      PaymentAttachmentMsg@1020016 : TextConst '@@@="%1=The payment number.";ENU=Dear customer, please find payment number %1 in the attachment.';
      Text001@1020018 : TextConst 'ENU=E-Document %1 has been sent.';
      Text002@1020002 : TextConst 'ENU=One or more invoices have already been sent.\Do you want to continue?';
      PaymentsAlreadySentQst@1020015 : TextConst 'ENU=One or more payments have already been sent.\Do you want to continue?';
      Text004@1020006 : TextConst 'ENU=Dear customer, please find credit memo number %1 in the attachment.';
      Text005@1020010 : TextConst 'ENU=Invoice no. %1.';
      Text006@1020011 : TextConst 'ENU=Credit memo no. %1.';
      Export@1020007 : Boolean;
      PaymentNoMsg@1020017 : TextConst '@@@="%1=The payment number.";ENU=Payment no. %1.';
      Text007@1020008 : TextConst 'ENU=You cannot perform this action on a deleted document.';
      Text008@1020013 : TextConst 'ENU=&Request Stamp,&Send,Request Stamp &and Send';
      Text009@1020020 : TextConst 'ENU=Cannot find a valid PAC web service for the action %1.\You must specify web service details for the combination of the %1 action and the %2 and %3 that you have selected in the %4 window.';
      Text010@1020022 : TextConst 'ENU=You cannot choose the action %1 when the document status is %2.';
      EDocAction@1020023 : '"Request Stamp",Send,Cancel';
      Text011@1020024 : TextConst 'ENU=There is no electronic stamp for document no. %1.\Do you want to continue?';
      MethodType@1020025 : '"Request Stamp",Cancel';
      Text012@1020026 : TextConst 'ENU="Cannot contact the PAC. You must specify a value for the %1 field in the %2 window for the PAC that you selected in the %3 window. "';
      Text013@1020027 : TextConst 'ENU=Request Stamp,Send,Cancel';
      Text014@1020028 : TextConst 'ENU=You cannot perform this action because the %1 field in the %2 window is set to %3.';
      Text015@1020030 : TextConst 'ENU=Do you want to cancel the electronic document?';
      Text016@1020003 : TextConst 'ENU=The SMTP mail system returned the following error: %1.';
      FileDialogTxt@1020029 : TextConst 'ENU=Import electronic invoice';
      ImportFailedErr@1020031 : TextConst 'ENU=The import failed. The XML document is not a valid electronic invoice.';
      WebClientErr@1020032 : TextConst 'ENU=The import is not supported on the webclient.';
      StampErr@1020014 : TextConst '@@@="%1=Document Type";ENU=You have chosen the document type %1. You can only request and send documents if the document type is Payment.';
      UnableToStampErr@1020019 : TextConst 'ENU=An existing payment is applied to the invoice that has not been stamped. That payment must be stamped before you can request a stamp for any additional payments.';
      UnableToStampAppliedErr@1020021 : TextConst '@@@="%1=The invoice number.";ENU=The prepayment invoice %1 has not been stamped. That invoice must be stamped before you can request a stamp for this applied invoice.';
      CurrencyDecimalPlaces@1020033 : Integer;

    [External]
    PROCEDURE RequestStampDocument@1020000(VAR RecRef@1020000 : RecordRef;Prepayment@1020001 : Boolean);
    VAR
      Selection@1020003 : Integer;
      ElectronicDocumentStatus@1020006 : Option;
    BEGIN
      // Called from Send Action
      Export := false;
      GetCompanyInfo;
      GetGLSetup;
      SourceCodeSetup.GET;
      Selection := STRMENU(Text008,3);

      ElectronicDocumentStatus := RecRef.FIELD(10030).VALUE;

      case Selection of
        1:// Request Stamp
          begin
            EDocActionValidation(EDocAction::"Request Stamp",ElectronicDocumentStatus);
            RequestStamp(RecRef,Prepayment,false);
          end;
        2:// Send
          begin
            EDocActionValidation(EDocAction::Send,ElectronicDocumentStatus);
            Send(RecRef,false);
          end;
        3:// Request Stamp and Send
          begin
            EDocActionValidation(EDocAction::"Request Stamp",ElectronicDocumentStatus);
            RequestStamp(RecRef,Prepayment,false);
            COMMIT;
            ElectronicDocumentStatus := RecRef.FIELD(10030).VALUE;
            EDocActionValidation(EDocAction::Send,ElectronicDocumentStatus);
            Send(RecRef,false);
          end;
      end;
    END;

    [External]
    PROCEDURE CancelDocument@1020029(VAR RecRef@1020000 : RecordRef);
    VAR
      SalesInvHeader@1020002 : Record "Sales Invoice Header";
      SalesCrMemoHeader@1020001 : Record "Sales Cr.Memo Header";
      ServiceInvHeader@1020004 : Record "Service Invoice Header";
      ServiceCrMemoHeader@1020005 : Record "Service Cr.Memo Header";
      CustLedgerEntry@1020003 : Record "Cust. Ledger Entry";
    BEGIN
      if not CONFIRM(Text015,false) then
        exit;
      Export := false;
      GetCompanyInfo;
      GetGLSetup;
      SourceCodeSetup.GET;

      case RecRef.NUMBER of
        DATABASE::"Sales Invoice Header":
          begin
            RecRef.SETTABLE(SalesInvHeader);
            EDocActionValidation(EDocAction::Cancel,SalesInvHeader."Electronic Document Status");
            CancelESalesInvoice(SalesInvHeader);
          end;
        DATABASE::"Sales Cr.Memo Header":
          begin
            RecRef.SETTABLE(SalesCrMemoHeader);
            EDocActionValidation(EDocAction::Cancel,SalesCrMemoHeader."Electronic Document Status");
            CancelESalesCrMemo(SalesCrMemoHeader);
          end;
        DATABASE::"Service Invoice Header":
          begin
            RecRef.SETTABLE(ServiceInvHeader);
            EDocActionValidation(EDocAction::Cancel,ServiceInvHeader."Electronic Document Status");
            CancelEServiceInvoice(ServiceInvHeader);
          end;
        DATABASE::"Service Cr.Memo Header":
          begin
            RecRef.SETTABLE(ServiceCrMemoHeader);
            EDocActionValidation(EDocAction::Cancel,ServiceCrMemoHeader."Electronic Document Status");
            CancelEServiceCrMemo(ServiceCrMemoHeader);
          end;
        DATABASE::"Cust. Ledger Entry":
          begin
            RecRef.SETTABLE(CustLedgerEntry);
            EDocActionValidation(EDocAction::Cancel,CustLedgerEntry."Electronic Document Status");
            CancelEPayment(CustLedgerEntry);
          end;
      end;
    END;

    [External]
    PROCEDURE EDocActionValidation@1020028(Action@1020000 : '"Request Stamp",Send,Cancel';Status@1020001 : '" ","Stamp Received",Sent,Canceled,"Stamp Request Error","Cancel Error"') Selection : Integer;
    VAR
      TempSalesInvoiceHeader@1020002 : TEMPORARY Record "Sales Invoice Header";
    BEGIN
      TempSalesInvoiceHeader."Electronic Document Status" := Status;

      if Action = Action::"Request Stamp" then
        if Status in [Status::"Stamp Received",Status::Sent,Status::"Cancel Error",Status::Canceled] then
          ERROR(Text010,SELECTSTR(Action + 1,Text013),TempSalesInvoiceHeader."Electronic Document Status");

      if Action = Action::Send then
        if Status in [Status::" ",Status::Canceled,Status::"Cancel Error",Status::"Stamp Request Error"] then
          ERROR(Text010,SELECTSTR(Action + 1,Text013),TempSalesInvoiceHeader."Electronic Document Status");

      if Action = Action::Cancel then
        if Status in [Status::" ",Status::Canceled,Status::"Stamp Request Error"] then
          ERROR(Text010,SELECTSTR(Action + 1,Text013),TempSalesInvoiceHeader."Electronic Document Status");
    END;

    [External]
    PROCEDURE EDocPrintValidation@1020013(EDocStatus@1020001 : '" ","Stamp Received",Sent,Canceled,"Stamp Request Error","Cancel Error"';DocNo@1020000 : Code[20]);
    BEGIN
      GLSetup.GET;
      if (GLSetup."PAC Environment" <> GLSetup."PAC Environment"::Disabled) and
         (EDocStatus in [EDocStatus::" ",EDocStatus::Canceled,EDocStatus::"Cancel Error",EDocStatus::"Stamp Request Error"])
      then
        if not CONFIRM(STRSUBSTNO(Text011,DocNo)) then
          ERROR('');
    END;

    LOCAL PROCEDURE RequestStamp@1020082(VAR DocumentHeaderRecordRef@1020000 : RecordRef;Prepayment@1020024 : Boolean;Reverse@1020031 : Boolean);
    VAR
      TempDocumentHeader@1020004 : TEMPORARY Record "Document Header";
      TempDocumentLine@1020018 : TEMPORARY Record "Document Line";
      SalesInvoiceHeader@1020017 : Record "Sales Invoice Header";
      SalesCrMemoHeader@1020021 : Record "Sales Cr.Memo Header";
      ServiceInvoiceHeader@1020016 : Record "Service Invoice Header";
      ServiceCrMemoHeader@1020015 : Record "Service Cr.Memo Header";
      TempBlobOriginalString@1020008 : Record TempBlob;
      TempBlobDigitalStamp@1020019 : Record TempBlob;
      CFDIDocuments@1020032 : Record "CFDI Documents";
      XMLDOMManagement@1020010 : Codeunit "XML DOM Management";
      OutStrOriginalDoc@1020012 : OutStream;
      OutStrSignedDoc@1020020 : OutStream;
      XMLDoc@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocResult@1170000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Environment@1020022 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Environment";
      OriginalString@1020006 : Text;
      SignedString@1020007 : Text;
      Certificate@1020005 : Text;
      Response@1020002 : Text;
      DateTimeFirstReqSent@1020003 : Text[50];
      CertificateSerialNo@1020014 : Text[250];
      SubTotal@1020011 : Decimal;
      RetainAmt@1020009 : Decimal;
      AmountInclVAT@1020001 : Decimal;
      UUID@1020028 : Text[50];
      AdvanceSettle@1020029 : Boolean;
      AdvanceAmount@1020030 : Decimal;
      SalesInvoiceNumber@1020023 : Code[20];
    BEGIN
      Export := true;

      case DocumentHeaderRecordRef.NUMBER of
        DATABASE::"Sales Invoice Header":
          begin
            DocumentHeaderRecordRef.SETTABLE(SalesInvoiceHeader);
            if not Reverse then // If reverse, AdvanceSettle must be false else you fall into an infinite loop
              AdvanceSettle := IsInvoicePrepaymentSettle(SalesInvoiceHeader."No.",AdvanceAmount);
            if AdvanceSettle then
              if GetUUIDFromOriginalPrepayment(SalesInvoiceHeader,SalesInvoiceNumber) = '' then
                ERROR(UnableToStampAppliedErr,SalesInvoiceNumber);
            CreateAbstractDocument(SalesInvoiceHeader,TempDocumentHeader,TempDocumentLine,AdvanceSettle);
            ValidateSalesInvoice(SalesInvoiceHeader);
            DateTimeFirstReqSent := GetDateTimeOfFirstReqSalesInv(SalesInvoiceHeader);
            CalcSalesInvLineTotal(SubTotal,RetainAmt,TempDocumentHeader."No.",AdvanceSettle);
            SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
            TempDocumentHeader."Amount Including VAT" := SalesInvoiceHeader."Amount Including VAT";
          end;
        DATABASE::"Sales Cr.Memo Header":
          begin
            DocumentHeaderRecordRef.SETTABLE(SalesCrMemoHeader);
            CreateAbstractDocument(SalesCrMemoHeader,TempDocumentHeader,TempDocumentLine,false);
            ValidateSalesCrMemo(SalesCrMemoHeader);
            DateTimeFirstReqSent := GetDateTimeOfFirstReqSalesCr(SalesCrMemoHeader);
            CalcSalesCrMemoLineTotal(SubTotal,RetainAmt,TempDocumentHeader."No.");
            SalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
            TempDocumentHeader."Amount Including VAT" := SalesCrMemoHeader."Amount Including VAT";
          end;
        DATABASE::"Service Invoice Header":
          begin
            DocumentHeaderRecordRef.SETTABLE(ServiceInvoiceHeader);
            CreateAbstractDocument(ServiceInvoiceHeader,TempDocumentHeader,TempDocumentLine,false);
            ValidateServiceInvoice(ServiceInvoiceHeader);
            DateTimeFirstReqSent := GetDateTimeOfFirstReqServInv(ServiceInvoiceHeader);
            CalcServiceInvLineTotal(SubTotal,RetainAmt,AmountInclVAT,TempDocumentHeader."No.");
            TempDocumentHeader."Amount Including VAT" := AmountInclVAT;
          end;
        DATABASE::"Service Cr.Memo Header":
          begin
            DocumentHeaderRecordRef.SETTABLE(ServiceCrMemoHeader);
            CreateAbstractDocument(ServiceCrMemoHeader,TempDocumentHeader,TempDocumentLine,false);
            ValidateServiceCrMemo(ServiceCrMemoHeader);
            DateTimeFirstReqSent := GetDateTimeOfFirstReqServCr(ServiceCrMemoHeader);
            CalcServiceCrMemoLineTotal(SubTotal,RetainAmt,AmountInclVAT,TempDocumentHeader."No.");
            TempDocumentHeader."Amount Including VAT" := AmountInclVAT;
          end;
      end;

      GetCustomer(TempDocumentHeader."Bill-to/Pay-To No.");
      CurrencyDecimalPlaces := GetCurrencyDecimalPlaces(TempDocumentHeader."Currency Code");

      // Create Digital Stamp
      if Reverse then begin
        UUID := SalesInvoiceHeader."Fiscal Invoice Number PAC";
        AdvanceAmount := GetAdvanceAmountFromSettledInvoice(SalesInvoiceHeader);
        CreateOriginalStr33AdvanceReverse(
          TempDocumentHeader,DateTimeFirstReqSent,TempBlobOriginalString,UUID,AdvanceAmount);
      end else
        if Prepayment then
          CreateOriginalStr33AdvancePayment(TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,SubTotal,RetainAmt,
            TempBlobOriginalString)
        else
          if not AdvanceSettle then
            CreateOriginalStr33(TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,SubTotal,RetainAmt,
              DocumentHeaderRecordRef.NUMBER in [DATABASE::"Sales Cr.Memo Header",DATABASE::"Service Cr.Memo Header"],
              TempBlobOriginalString)
          else begin
            UUID := GetUUIDFromOriginalPrepayment(SalesInvoiceHeader,SalesInvoiceNumber);
            CreateOriginalStr33AdvanceSettle(TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,SubTotal,RetainAmt,
              TempBlobOriginalString,UUID)
          end;

      OriginalString := TempBlobOriginalString.ReadAsText(Environment.NewLine,TEXTENCODING::MSDos);
      CreateDigitalSignature(OriginalString,SignedString,CertificateSerialNo,Certificate);
      TextToBlob(TempBlobDigitalStamp,SignedString);

      // Create Original XML
      if Reverse then
        CreateXMLDocument33AdvanceReverse(
          TempDocumentHeader,DateTimeFirstReqSent,SignedString,
          Certificate,CertificateSerialNo,XMLDoc,UUID,AdvanceAmount)
      else
        if Prepayment then
          CreateXMLDocument33AdvancePayment(
            TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,SignedString,Certificate,CertificateSerialNo,SubTotal,RetainAmt,
            XMLDoc)
        else
          if not AdvanceSettle then
            CreateXMLDocument33(
              TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,SignedString,Certificate,CertificateSerialNo,SubTotal,RetainAmt,
              DocumentHeaderRecordRef.NUMBER in [DATABASE::"Sales Cr.Memo Header",DATABASE::"Service Cr.Memo Header"],XMLDoc)
          else
            CreateXMLDocument33AdvanceSettle(
              TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,SignedString,Certificate,CertificateSerialNo,SubTotal,RetainAmt,
              XMLDoc,UUID);

      case DocumentHeaderRecordRef.NUMBER of
        DATABASE::"Sales Invoice Header":
          with SalesInvoiceHeader do
            if not Reverse then begin
              "Original String" := TempBlobOriginalString.Blob;
              "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
              "Certificate Serial No." := CertificateSerialNo;
              "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
              "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
              XMLDoc.Save(OutStrOriginalDoc);
              MODIFY;
            end else begin
              if not CFDIDocuments.GET("No.",DATABASE::"Sales Invoice Header",true,true) then begin
                CFDIDocuments.INIT;
                CFDIDocuments."No." := "No.";
                CFDIDocuments."Document Table ID" := DATABASE::"Sales Invoice Header";
                CFDIDocuments.Prepayment := true;
                CFDIDocuments.Reversal := true;
                CFDIDocuments.INSERT;
              end;

              CFDIDocuments."Original String" := TempBlobOriginalString.Blob;
              CFDIDocuments."Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
              CFDIDocuments."Certificate Serial No." := CertificateSerialNo;
              CFDIDocuments."Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
              CFDIDocuments."Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
              XMLDoc.Save(OutStrOriginalDoc);
              MODIFY;
            end;
        DATABASE::"Sales Cr.Memo Header":
          with SalesCrMemoHeader do begin
            "Original String" := TempBlobOriginalString.Blob;
            "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
            "Certificate Serial No." := CertificateSerialNo;
            "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
            "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
            XMLDoc.Save(OutStrOriginalDoc);
            MODIFY;
          end;
        DATABASE::"Service Invoice Header":
          with ServiceInvoiceHeader do begin
            "Original String" := TempBlobOriginalString.Blob;
            "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
            "Certificate Serial No." := CertificateSerialNo;
            "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
            "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
            XMLDoc.Save(OutStrOriginalDoc);
            MODIFY;
          end;
        DATABASE::"Service Cr.Memo Header":
          with ServiceCrMemoHeader do begin
            "Original String" := TempBlobOriginalString.Blob;
            "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
            "Certificate Serial No." := CertificateSerialNo;
            "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
            "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
            XMLDoc.Save(OutStrOriginalDoc);
            MODIFY;
          end;
      end;

      COMMIT;

      Response := InvokeMethod(XMLDoc,MethodType::"Request Stamp");

      // For Test Mocking
      if not GLSetup."Sim. Request Stamp" then begin
        if Reverse then
          with CFDIDocuments do begin
            XMLDOMManagement.LoadXMLDocumentFromText(Response,XMLDocResult);
            XMLDocResult.Save(OutStrSignedDoc);
            MODIFY;
          end;
        if not Reverse then begin
          XMLDOMManagement.LoadXMLDocumentFromText(Response,XMLDocResult);
          XMLDocResult.Save(OutStrSignedDoc);
        end;
      end;

      case DocumentHeaderRecordRef.NUMBER of
        DATABASE::"Sales Invoice Header":
          begin
            ProcessResponseESalesInvoice(SalesInvoiceHeader,EDocAction::"Request Stamp",Reverse);
            SalesInvoiceHeader.MODIFY;
            DocumentHeaderRecordRef.GETTABLE(SalesInvoiceHeader);
          end;
        DATABASE::"Sales Cr.Memo Header":
          begin
            ProcessResponseESalesCrMemo(SalesCrMemoHeader,EDocAction::"Request Stamp");
            SalesCrMemoHeader.MODIFY;
            DocumentHeaderRecordRef.GETTABLE(SalesCrMemoHeader);
          end;
        DATABASE::"Service Invoice Header":
          begin
            ProcessResponseEServiceInvoice(ServiceInvoiceHeader,EDocAction::"Request Stamp",AmountInclVAT);
            ServiceInvoiceHeader.MODIFY;
            DocumentHeaderRecordRef.GETTABLE(ServiceInvoiceHeader);
          end;
        DATABASE::"Service Cr.Memo Header":
          begin
            ProcessResponseEServiceCrMemo(ServiceCrMemoHeader,EDocAction::"Request Stamp",AmountInclVAT);
            ServiceCrMemoHeader.MODIFY;
            DocumentHeaderRecordRef.GETTABLE(ServiceCrMemoHeader);
          end;
      end;

      // If Advance Settle, and everything went well, then need to create CFDI document for Advance reverse.
      if AdvanceSettle then begin
        if SalesInvoiceHeader."Electronic Document Status" = SalesInvoiceHeader."Electronic Document Status"::"Stamp Received" then
          RequestStamp(DocumentHeaderRecordRef,true,true);
      end;
    END;

    PROCEDURE Send@1020072(VAR DocumentHeaderRecordRef@1020004 : RecordRef;Reverse@1020005 : Boolean);
    VAR
      SalesInvHeader@1020003 : Record "Sales Invoice Header";
      SalesCrMemoHeader@1020002 : Record "Sales Cr.Memo Header";
      ServiceInvHeader@1020001 : Record "Service Invoice Header";
      ServiceCrMemoHeader@1020000 : Record "Service Cr.Memo Header";
    BEGIN
      case DocumentHeaderRecordRef.NUMBER of
        DATABASE::"Sales Invoice Header":
          begin
            DocumentHeaderRecordRef.SETTABLE(SalesInvHeader);
            SendESalesInvoice(SalesInvHeader,Reverse);
          end;
        DATABASE::"Sales Cr.Memo Header":
          begin
            DocumentHeaderRecordRef.SETTABLE(SalesCrMemoHeader);
            SendESalesCrMemo(SalesCrMemoHeader);
          end;
        DATABASE::"Service Invoice Header":
          begin
            DocumentHeaderRecordRef.SETTABLE(ServiceInvHeader);
            SendEServiceInvoice(ServiceInvHeader);
          end;
        DATABASE::"Service Cr.Memo Header":
          begin
            DocumentHeaderRecordRef.SETTABLE(ServiceCrMemoHeader);
            SendEServiceCrMemo(ServiceCrMemoHeader);
          end;
      end;
    END;

    LOCAL PROCEDURE SendESalesInvoice@1020030(VAR SalesInvHeader@1020000 : Record "Sales Invoice Header";Reverse@1020004 : Boolean);
    VAR
      CFDIDocuments@1020007 : Record "CFDI Documents";
      CFDIDocumentsLoc@1020009 : Record "CFDI Documents";
      TempBlob@1020001 : Record TempBlob;
      ReportSelection@1020006 : Record "Report Selections";
      SalesInvHeaderLoc@1020008 : Record "Sales Invoice Header";
      DocumentHeaderRef@1020005 : RecordRef;
      XMLInstream@1020035 : InStream;
      FileNameEdoc@1020003 : Text;
      PDFFileName@1020002 : Text;
    BEGIN
      if Reverse then
        CFDIDocuments.GET(SalesInvHeader."No.",DATABASE::"Sales Invoice Header",true,true);

      GetCustomer(SalesInvHeader."Bill-to Customer No.");
      Customer.TESTFIELD("E-Mail");
      if not Reverse then
        if SalesInvHeader."No. of E-Documents Sent" <> 0 then
          if not CONFIRM(Text002) then
            ERROR('');
      if Reverse then
        if CFDIDocuments."No. of E-Documents Sent" <> 0 then
          if not CONFIRM(PaymentsAlreadySentQst) then
            ERROR('');

      // Export XML
      if not Reverse then begin
        SalesInvHeader.CALCFIELDS("Signed Document XML");
        TempBlob.Blob := SalesInvHeader."Signed Document XML";
        TempBlob.Blob.CREATEINSTREAM(XMLInstream);
        FileNameEdoc := SalesInvHeader."No." + '.xml';
      end else begin
        CFDIDocuments.CALCFIELDS("Signed Document XML");
        TempBlob.Blob := CFDIDocuments."Signed Document XML";
        TempBlob.Blob.CREATEINSTREAM(XMLInstream);
        FileNameEdoc := CFDIDocuments."No." + '.xml';
        CFDIDocumentsLoc."Signed Document XML" := TempBlob.Blob;
        CFDIDocumentsLoc."Signed Document XML" := CFDIDocumentsLoc."Signed Document XML";
      end;

      if GLSetup."Send PDF Report" then begin
        DocumentHeaderRef.GETTABLE(SalesInvHeader);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"S.Invoice");
        PDFFileName := SaveAsPDFOnServer(DocumentHeaderRef,GetReportNo(ReportSelection));
      end;

      // Reset No. Printed
      if not Reverse then begin
        SalesInvHeaderLoc.GET(SalesInvHeader."No.");
        SalesInvHeaderLoc."No. Printed" := SalesInvHeader."No. Printed";
        SalesInvHeaderLoc.MODIFY;
      end;

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(Text005,SalesInvHeader."No."),
        STRSUBSTNO(Text000,SalesInvHeader."No."),FileNameEdoc,PDFFileName,GLSetup."Send PDF Report",XMLInstream);

      if not Reverse then begin
        SalesInvHeaderLoc.GET(SalesInvHeader."No.");
        SalesInvHeaderLoc."No. of E-Documents Sent" := SalesInvHeaderLoc."No. of E-Documents Sent" + 1;
        if not SalesInvHeaderLoc."Electronic Document Sent" then
          SalesInvHeaderLoc."Electronic Document Sent" := true;
        SalesInvHeaderLoc."Electronic Document Status" := SalesInvHeaderLoc."Electronic Document Status"::Sent;
        SalesInvHeaderLoc."Date/Time Sent" := FormatDateTime(CURRENTDATETIME);
        SalesInvHeaderLoc.MODIFY;
      end else begin
        CFDIDocumentsLoc.GET(SalesInvHeader."No.",DATABASE::"Sales Invoice Header",true,true);
        CFDIDocumentsLoc."No. of E-Documents Sent" := CFDIDocumentsLoc."No. of E-Documents Sent" + 1;
        if not CFDIDocumentsLoc."Electronic Document Sent" then
          CFDIDocumentsLoc."Electronic Document Sent" := true;
        CFDIDocumentsLoc."Electronic Document Status" := CFDIDocumentsLoc."Electronic Document Status"::Sent;
        CFDIDocumentsLoc."Date/Time Sent" := FormatDateTime(CURRENTDATETIME);
        CFDIDocumentsLoc.MODIFY;
      end;
      MESSAGE(Text001,SalesInvHeader."No.");
    END;

    LOCAL PROCEDURE SendESalesCrMemo@1020031(VAR SalesCrMemoHeader@1020000 : Record "Sales Cr.Memo Header");
    VAR
      TempBlob@1020001 : Record TempBlob;
      ReportSelection@1020006 : Record "Report Selections";
      SalesCrMemoHeaderLoc@1020008 : Record "Sales Cr.Memo Header";
      DocumentHeaderRef@1020005 : RecordRef;
      XMLInstream@1020035 : InStream;
      FileNameEdoc@1020003 : Text;
      PDFFileName@1020007 : Text;
    BEGIN
      GetCustomer(SalesCrMemoHeader."Bill-to Customer No.");
      Customer.TESTFIELD("E-Mail");
      if SalesCrMemoHeader."No. of E-Documents Sent" <> 0 then
        if not CONFIRM(Text002) then
          ERROR('');

      // Export XML
      SalesCrMemoHeader.CALCFIELDS("Signed Document XML");
      TempBlob.Blob := SalesCrMemoHeader."Signed Document XML";
      TempBlob.Blob.CREATEINSTREAM(XMLInstream);
      FileNameEdoc := SalesCrMemoHeader."No." + '.xml';

      if GLSetup."Send PDF Report" then begin
        DocumentHeaderRef.GETTABLE(SalesCrMemoHeader);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"S.Cr.Memo");
        PDFFileName := SaveAsPDFOnServer(DocumentHeaderRef,GetReportNo(ReportSelection));
      end;

      // Reset No. Printed
      SalesCrMemoHeaderLoc.GET(SalesCrMemoHeader."No.");
      SalesCrMemoHeaderLoc."No. Printed" := SalesCrMemoHeader."No. Printed";
      SalesCrMemoHeaderLoc.MODIFY;

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(Text006,SalesCrMemoHeader."No."),
        STRSUBSTNO(Text004,SalesCrMemoHeader."No."),FileNameEdoc,PDFFileName,GLSetup."Send PDF Report",XMLInstream);

      SalesCrMemoHeaderLoc.GET(SalesCrMemoHeader."No.");
      SalesCrMemoHeaderLoc."No. of E-Documents Sent" := SalesCrMemoHeaderLoc."No. of E-Documents Sent" + 1;
      if not SalesCrMemoHeaderLoc."Electronic Document Sent" then
        SalesCrMemoHeaderLoc."Electronic Document Sent" := true;
      SalesCrMemoHeaderLoc."Electronic Document Status" := SalesCrMemoHeaderLoc."Electronic Document Status"::Sent;
      SalesCrMemoHeaderLoc."Date/Time Sent" := FormatDateTime(CURRENTDATETIME);
      SalesCrMemoHeaderLoc.MODIFY;

      MESSAGE(Text001,SalesCrMemoHeader."No.");
    END;

    LOCAL PROCEDURE SendEServiceInvoice@1020043(VAR ServiceInvoiceHeader@1020000 : Record "Service Invoice Header");
    VAR
      TempBlob@1020001 : Record TempBlob;
      ReportSelection@1020006 : Record "Report Selections";
      ServiceInvoiceHeaderLoc@1020008 : Record "Service Invoice Header";
      DocumentHeaderRef@1020005 : RecordRef;
      XMLInstream@1020035 : InStream;
      FileNameEdoc@1020003 : Text;
      PDFFileName@1020007 : Text;
    BEGIN
      GetCustomer(ServiceInvoiceHeader."Bill-to Customer No.");
      Customer.TESTFIELD("E-Mail");
      if ServiceInvoiceHeader."No. of E-Documents Sent" <> 0 then
        if not CONFIRM(Text002) then
          ERROR('');
      // Export XML
      ServiceInvoiceHeader.CALCFIELDS("Signed Document XML");
      TempBlob.Blob := ServiceInvoiceHeader."Signed Document XML";
      TempBlob.Blob.CREATEINSTREAM(XMLInstream);
      FileNameEdoc := ServiceInvoiceHeader."No." + '.xml';

      if GLSetup."Send PDF Report" then begin
        DocumentHeaderRef.GETTABLE(ServiceInvoiceHeader);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"SM.Invoice");
        PDFFileName := SaveAsPDFOnServer(DocumentHeaderRef,GetReportNo(ReportSelection));
      end;

      // Reset No. Printed
      ServiceInvoiceHeaderLoc.GET(ServiceInvoiceHeader."No.");
      ServiceInvoiceHeaderLoc."No. Printed" := ServiceInvoiceHeader."No. Printed";
      ServiceInvoiceHeaderLoc.MODIFY;

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(Text005,ServiceInvoiceHeader."No."),
        STRSUBSTNO(Text000,ServiceInvoiceHeader."No."),FileNameEdoc,PDFFileName,GLSetup."Send PDF Report",XMLInstream);

      ServiceInvoiceHeaderLoc.GET(ServiceInvoiceHeader."No.");
      ServiceInvoiceHeaderLoc."No. of E-Documents Sent" := ServiceInvoiceHeaderLoc."No. of E-Documents Sent" + 1;
      if not ServiceInvoiceHeaderLoc."Electronic Document Sent" then
        ServiceInvoiceHeaderLoc."Electronic Document Sent" := true;
      ServiceInvoiceHeaderLoc."Electronic Document Status" := ServiceInvoiceHeaderLoc."Electronic Document Status"::Sent;
      ServiceInvoiceHeaderLoc."Date/Time Sent" := FormatDateTime(CURRENTDATETIME);
      ServiceInvoiceHeaderLoc.MODIFY;

      MESSAGE(Text001,ServiceInvoiceHeader."No.");
    END;

    LOCAL PROCEDURE SendEServiceCrMemo@1020045(VAR ServiceCrMemoHeader@1020000 : Record "Service Cr.Memo Header");
    VAR
      TempBlob@1020001 : Record TempBlob;
      ReportSelection@1020006 : Record "Report Selections";
      ServiceCrMemoHeaderLoc@1020008 : Record "Service Cr.Memo Header";
      DocumentHeaderRef@1020005 : RecordRef;
      XMLInstream@1020035 : InStream;
      FileNameEdoc@1020003 : Text;
      PDFFileName@1020007 : Text;
    BEGIN
      GetCustomer(ServiceCrMemoHeader."Bill-to Customer No.");
      Customer.TESTFIELD("E-Mail");
      if ServiceCrMemoHeader."No. of E-Documents Sent" <> 0 then
        if not CONFIRM(Text002) then
          ERROR('');
      // Export XML
      ServiceCrMemoHeader.CALCFIELDS("Signed Document XML");
      TempBlob.Blob := ServiceCrMemoHeader."Signed Document XML";
      TempBlob.Blob.CREATEINSTREAM(XMLInstream);
      FileNameEdoc := ServiceCrMemoHeader."No." + '.xml';

      if GLSetup."Send PDF Report" then begin
        DocumentHeaderRef.GETTABLE(ServiceCrMemoHeader);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"SM.Credit Memo");
        PDFFileName := SaveAsPDFOnServer(DocumentHeaderRef,GetReportNo(ReportSelection));
      end;

      // Reset No. Printed
      ServiceCrMemoHeaderLoc.GET(ServiceCrMemoHeader."No.");
      ServiceCrMemoHeaderLoc."No. Printed" := ServiceCrMemoHeader."No. Printed";
      ServiceCrMemoHeaderLoc.MODIFY;

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(Text006,ServiceCrMemoHeader."No."),
        STRSUBSTNO(Text004,ServiceCrMemoHeader."No."),FileNameEdoc,PDFFileName,GLSetup."Send PDF Report",XMLInstream);

      ServiceCrMemoHeaderLoc.GET(ServiceCrMemoHeader."No.");
      ServiceCrMemoHeaderLoc."No. of E-Documents Sent" := ServiceCrMemoHeaderLoc."No. of E-Documents Sent" + 1;
      if not ServiceCrMemoHeaderLoc."Electronic Document Sent" then
        ServiceCrMemoHeaderLoc."Electronic Document Sent" := true;
      ServiceCrMemoHeaderLoc."Electronic Document Status" := ServiceCrMemoHeaderLoc."Electronic Document Status"::Sent;
      ServiceCrMemoHeaderLoc."Date/Time Sent" := FormatDateTime(CURRENTDATETIME);
      ServiceCrMemoHeaderLoc.MODIFY;

      MESSAGE(Text001,ServiceCrMemoHeader."No.");
    END;

    LOCAL PROCEDURE CancelESalesInvoice@1170000000(VAR SalesInvHeader@1020000 : Record "Sales Invoice Header");
    VAR
      TempBlob@1020004 : Record TempBlob;
      XMLDOMManagement@1020002 : Codeunit "XML DOM Management";
      XMLDoc@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Response@1020005 : Text;
      OutStr@1020003 : OutStream;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      if SalesInvHeader."Source Code" = SourceCodeSetup."Deleted Document" then
        ERROR(Text007);

      // Create instance
      if ISNULL(XMLDoc) then
        XMLDoc := XMLDoc.XmlDocument;

      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> <CancelaCFD /> ',XMLDoc);
      XMLCurrNode := XMLDoc.DocumentElement;
      AddElement(XMLCurrNode,'Cancelacion','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
      with SalesInvHeader do begin
        CancelDateTime := FormatDateTime(CURRENTDATETIME);
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',CancelDateTime);
        "Date/Time Canceled" := CancelDateTime;
        AddAttribute(XMLDoc,XMLCurrNode,'RfcEmisor',CompanyInfo."RFC No.");
        AddElement(XMLCurrNode,'Folios','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddElement(XMLCurrNode,'Folio','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaTimbrado',"Date/Time Stamped");
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',"Fiscal Invoice Number PAC");
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
      end;

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      if not GLSetup."Sim. Request Stamp" then begin
        TextToBlob(TempBlob,Response);
        SalesInvHeader."Signed Document XML" := TempBlob.Blob;
      end;

      SalesInvHeader.MODIFY;
      ProcessResponseESalesInvoice(SalesInvHeader,EDocAction::Cancel,false);
      SalesInvHeader.MODIFY;
    END;

    LOCAL PROCEDURE CancelESalesCrMemo@1020033(VAR SalesCrMemoHeader@1020000 : Record "Sales Cr.Memo Header");
    VAR
      TempBlob@1020002 : Record TempBlob;
      XMLDOMManagement@1020004 : Codeunit "XML DOM Management";
      XMLDoc@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Response@1020005 : Text;
      OutStr@1020003 : OutStream;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      if SalesCrMemoHeader."Source Code" = SourceCodeSetup."Deleted Document" then
        ERROR(Text007);

      // Create instance
      if ISNULL(XMLDoc) then
        XMLDoc := XMLDoc.XmlDocument;

      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> <CancelaCFD /> ',XMLDoc);
      XMLCurrNode := XMLDoc.DocumentElement;
      AddElement(XMLCurrNode,'Cancelacion','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
      with SalesCrMemoHeader do begin
        CancelDateTime := FormatDateTime(CURRENTDATETIME);
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',CancelDateTime);
        "Date/Time Canceled" := CancelDateTime;
        AddAttribute(XMLDoc,XMLCurrNode,'RfcEmisor',CompanyInfo."RFC No.");
        AddElement(XMLCurrNode,'Folios','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddElement(XMLCurrNode,'Folio','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaTimbrado',"Date/Time Stamped");
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',"Fiscal Invoice Number PAC");
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
      end;

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      if not GLSetup."Sim. Request Stamp" then begin
        TextToBlob(TempBlob,Response);
        SalesCrMemoHeader."Signed Document XML" := TempBlob.Blob;
      end;

      SalesCrMemoHeader.MODIFY;
      ProcessResponseESalesCrMemo(SalesCrMemoHeader,EDocAction::Cancel);
      SalesCrMemoHeader.MODIFY;
    END;

    LOCAL PROCEDURE CancelEServiceInvoice@1020034(VAR ServiceInvHeader@1020000 : Record "Service Invoice Header");
    VAR
      TempBlob@1020004 : Record TempBlob;
      XMLDOMManagement@1020002 : Codeunit "XML DOM Management";
      XMLDoc@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Response@1020005 : Text;
      OutStr@1020003 : OutStream;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      if ServiceInvHeader."Source Code" = SourceCodeSetup."Deleted Document" then
        ERROR(Text007);

      // Create instance
      if ISNULL(XMLDoc) then
        XMLDoc := XMLDoc.XmlDocument;

      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> <CancelaCFD /> ',XMLDoc);
      XMLCurrNode := XMLDoc.DocumentElement;
      AddElement(XMLCurrNode,'Cancelacion','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
      with ServiceInvHeader do begin
        CancelDateTime := FormatDateTime(CURRENTDATETIME);
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',CancelDateTime);
        "Date/Time Canceled" := CancelDateTime;
        AddAttribute(XMLDoc,XMLCurrNode,'RfcEmisor',CompanyInfo."RFC No.");
        AddElement(XMLCurrNode,'Folios','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddElement(XMLCurrNode,'Folio','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaTimbrado',"Date/Time Stamped");
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',"Fiscal Invoice Number PAC");
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
      end;

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      if not GLSetup."Sim. Request Stamp" then begin
        TextToBlob(TempBlob,Response);
        ServiceInvHeader."Signed Document XML" := TempBlob.Blob;
      end;

      ServiceInvHeader.MODIFY;
      ProcessResponseEServiceInvoice(ServiceInvHeader,EDocAction::Cancel,0);
      ServiceInvHeader.MODIFY;
    END;

    LOCAL PROCEDURE CancelEServiceCrMemo@1020037(VAR ServiceCrMemoHeader@1020000 : Record "Service Cr.Memo Header");
    VAR
      TempBlob@1020004 : Record TempBlob;
      XMLDOMManagement@1020002 : Codeunit "XML DOM Management";
      XMLDoc@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Response@1020005 : Text;
      OutStr@1020003 : OutStream;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      if ServiceCrMemoHeader."Source Code" = SourceCodeSetup."Deleted Document" then
        ERROR(Text007);

      // Create instance
      if ISNULL(XMLDoc) then
        XMLDoc := XMLDoc.XmlDocument;

      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> <CancelaCFD /> ',XMLDoc);
      XMLCurrNode := XMLDoc.DocumentElement;
      AddElement(XMLCurrNode,'Cancelacion','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
      with ServiceCrMemoHeader do begin
        CancelDateTime := FormatDateTime(CURRENTDATETIME);
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',CancelDateTime);
        "Date/Time Canceled" := CancelDateTime;
        AddAttribute(XMLDoc,XMLCurrNode,'RfcEmisor',CompanyInfo."RFC No.");
        AddElement(XMLCurrNode,'Folios','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddElement(XMLCurrNode,'Folio','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaTimbrado',"Date/Time Stamped");
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',"Fiscal Invoice Number PAC");
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
      end;

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      if not GLSetup."Sim. Request Stamp" then begin
        TextToBlob(TempBlob,Response);
        ServiceCrMemoHeader."Signed Document XML" := TempBlob.Blob;
      end;

      ServiceCrMemoHeader.MODIFY;
      ProcessResponseEServiceCrMemo(ServiceCrMemoHeader,EDocAction::Cancel,0);
      ServiceCrMemoHeader.MODIFY;
    END;

    LOCAL PROCEDURE CancelEPayment@1020010(VAR CustLedgerEntry@1020000 : Record "Cust. Ledger Entry");
    VAR
      TempBlob@1020004 : Record TempBlob;
      XMLDOMManagement@1020002 : Codeunit "XML DOM Management";
      OutStr@1020003 : OutStream;
      XMLDoc@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Response@1020005 : Text;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      // Create instance
      if ISNULL(XMLDoc) then
        XMLDoc := XMLDoc.XmlDocument;

      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> <CancelaCFD /> ',XMLDoc);
      XMLCurrNode := XMLDoc.DocumentElement;
      AddElement(XMLCurrNode,'Cancelacion','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
      with CustLedgerEntry do begin
        CancelDateTime := FormatDateTime(CURRENTDATETIME);
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',CancelDateTime);
        "Date/Time Canceled" := CancelDateTime;
        AddAttribute(XMLDoc,XMLCurrNode,'RfcEmisor',CompanyInfo."RFC No.");
        AddElement(XMLCurrNode,'Folios','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddElement(XMLCurrNode,'Folio','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaTimbrado',"Date/Time Stamped");
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',"Fiscal Invoice Number PAC");
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
      end;

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      if not GLSetup."Sim. Request Stamp" then begin
        TextToBlob(TempBlob,Response);
        CustLedgerEntry."Signed Document XML" := TempBlob.Blob;
      end;

      CustLedgerEntry.MODIFY;
      ProcessResponseEPayment(CustLedgerEntry,EDocAction::Cancel);
      CustLedgerEntry.MODIFY;
    END;

    LOCAL PROCEDURE ProcessResponseESalesInvoice@1020054(VAR SalesInvoiceHeader@1020000 : Record "Sales Invoice Header";Action@1020007 : Option;Reverse@1020016 : Boolean);
    VAR
      CFDIDocuments@1020017 : Record "CFDI Documents";
      TempBlob@1020002 : Record TempBlob;
      PACWebService@1020003 : Record "PAC Web Service";
      XMLDOMManagement@1020015 : Codeunit "XML DOM Management";
      XMLDoc@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocResult@1310000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020008 : Text[95];
      ErrorDescription@1020009 : Text;
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      GetCustomer(SalesInvoiceHeader."Bill-to Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      if ISNULL(XMLDocResult) then
        XMLDocResult := XMLDocResult.XmlDocument;

      if not Reverse then begin
        SalesInvoiceHeader.CALCFIELDS("Signed Document XML");
        SalesInvoiceHeader."Signed Document XML".CREATEINSTREAM(InStr);
        XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDocResult);
        CLEAR(SalesInvoiceHeader."Signed Document XML");
      end else begin
        CFDIDocuments.GET(SalesInvoiceHeader."No.",DATABASE::"Sales Invoice Header",true,true);
        CFDIDocuments.CALCFIELDS("Signed Document XML");
        CFDIDocuments."Signed Document XML".CREATEINSTREAM(InStr);
        XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDocResult);
        CLEAR(CFDIDocuments."Signed Document XML");
      end;

      XMLCurrNode := XMLDocResult.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");

      if not Reverse then
        SalesInvoiceHeader."PAC Web Service Name" := PACWebService.Name
      else
        CFDIDocuments."PAC Web Service Name" := PACWebService.Name;

      if XMLCurrNode.Value <> '1' then begin // Error encountered
        if not Reverse then begin
          SalesInvoiceHeader."Error Code" := XMLCurrNode.Value;
          XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
          ErrorDescription := XMLCurrNode.Value;
          XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
          if not ISNULL(XMLCurrNode) then
            ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
          if STRLEN(ErrorDescription) > 250 then
            ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
          SalesInvoiceHeader."Error Description" := COPYSTR(ErrorDescription,1,250);
          case Action of
            EDocAction::"Request Stamp":
              SalesInvoiceHeader."Electronic Document Status" :=
                SalesInvoiceHeader."Electronic Document Status"::"Stamp Request Error";
            EDocAction::Cancel:
              begin
                SalesInvoiceHeader."Electronic Document Status" :=
                  SalesInvoiceHeader."Electronic Document Status"::"Cancel Error";
                SalesInvoiceHeader."Date/Time Canceled" := '';
              end;
          end;
        end else begin
          CFDIDocuments."Error Code" := XMLCurrNode.Value;
          XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
          ErrorDescription := XMLCurrNode.Value;
          XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
          if not ISNULL(XMLCurrNode) then
            ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
          if STRLEN(ErrorDescription) > 250 then
            ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
          CFDIDocuments."Error Description" := COPYSTR(ErrorDescription,1,250);
          case Action of
            EDocAction::"Request Stamp":
              CFDIDocuments."Electronic Document Status" := CFDIDocuments."Electronic Document Status"::"Stamp Request Error";
          end;
          CFDIDocuments.MODIFY;
        end;
        exit;
      end;

      if not Reverse then begin
        SalesInvoiceHeader."Error Code" := '';
        SalesInvoiceHeader."Error Description" := '';
        if Action = EDocAction::Cancel then begin
          SalesInvoiceHeader."Electronic Document Status" := SalesInvoiceHeader."Electronic Document Status"::Canceled;
          exit;
        end;
      end else begin
        CFDIDocuments."Error Code" := '';
        CFDIDocuments."Error Description" := '';
      end;

      XMLCurrNode := XMLDocResult.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;

      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;
      for Counter := 0 to (NodeCount - 1) do begin
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,true));
      end;

      if not Reverse then
        SalesInvoiceHeader."Signed Document XML".CREATEOUTSTREAM(OutStr)
      else
        CFDIDocuments."Signed Document XML".CREATEOUTSTREAM(OutStr);

      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/3');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      if not Reverse then begin
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
        SalesInvoiceHeader."Date/Time Stamped" := XMLCurrNode.Value;

        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
        SalesInvoiceHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
        SalesInvoiceHeader."Certificate Serial No." := XMLCurrNode.Value;
      end else begin
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
        CFDIDocuments."Date/Time Stamped" := XMLCurrNode.Value;

        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
        CFDIDocuments."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
        CFDIDocuments."Certificate Serial No." := XMLCurrNode.Value;
      end;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');

      CLEAR(OutStr);
      if not Reverse then begin
        SalesInvoiceHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
        OutStr.WRITETEXT(XMLCurrNode.Value);
        // Certificate Serial
        SalesInvoiceHeader."Electronic Document Status" := SalesInvoiceHeader."Electronic Document Status"::"Stamp Received";
      end else begin
        CFDIDocuments."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
        OutStr.WRITETEXT(XMLCurrNode.Value);
        // Certificate Serial
        CFDIDocuments."Electronic Document Status" := CFDIDocuments."Electronic Document Status"::"Stamp Received";
      end;

      // Create QRCode
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
      if not Reverse then begin
        QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",SalesInvoiceHeader."Amount Including VAT",
            FORMAT(SalesInvoiceHeader."Fiscal Invoice Number PAC"));
        CreateQRCode(QRCodeInput,TempBlob);
        SalesInvoiceHeader."QR Code" := TempBlob.Blob;
      end else begin
        QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",SalesInvoiceHeader."Amount Including VAT",
            FORMAT(CFDIDocuments."Fiscal Invoice Number PAC"));
        CreateQRCode(QRCodeInput,TempBlob);
        CFDIDocuments."QR Code" := TempBlob.Blob;
        CFDIDocuments.MODIFY;
      end;
    END;

    LOCAL PROCEDURE ProcessResponseESalesCrMemo@1020032(VAR SalesCrMemoHeader@1020000 : Record "Sales Cr.Memo Header";Action@1020007 : Option);
    VAR
      TempBlob@1020002 : Record TempBlob;
      PACWebService@1020003 : Record "PAC Web Service";
      XMLDOMManagement@1020015 : Codeunit "XML DOM Management";
      XMLDoc@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020008 : Text[95];
      ErrorDescription@1020010 : Text;
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      GetCustomer(SalesCrMemoHeader."Bill-to Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      if ISNULL(XMLDoc) then
        XMLDoc := XMLDoc.XmlDocument;

      SalesCrMemoHeader.CALCFIELDS("Signed Document XML");
      SalesCrMemoHeader."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDoc);
      CLEAR(SalesCrMemoHeader."Signed Document XML");
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      SalesCrMemoHeader."PAC Web Service Name" := PACWebService.Name;

      if XMLCurrNode.Value <> '1' then begin
        SalesCrMemoHeader."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        ErrorDescription := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
        if not ISNULL(XMLCurrNode) then
          ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
        if STRLEN(ErrorDescription) > 250 then
          ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
        SalesCrMemoHeader."Error Description" := COPYSTR(ErrorDescription,1,250);

        case Action of
          EDocAction::"Request Stamp":
            SalesCrMemoHeader."Electronic Document Status" := SalesCrMemoHeader."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            begin
              SalesCrMemoHeader."Electronic Document Status" := SalesCrMemoHeader."Electronic Document Status"::"Cancel Error";
              SalesCrMemoHeader."Date/Time Canceled" := '';
            end;
        end;
        exit;
      end;

      SalesCrMemoHeader."Error Code" := '';
      SalesCrMemoHeader."Error Description" := '';
      if Action = EDocAction::Cancel then begin
        SalesCrMemoHeader."Electronic Document Status" := SalesCrMemoHeader."Electronic Document Status"::Canceled;
        exit;
      end;
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;
      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;

      for Counter := 0 to (NodeCount - 1) do begin
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,true));
      end;

      SalesCrMemoHeader."Signed Document XML".CREATEOUTSTREAM(OutStr);
      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/3');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      SalesCrMemoHeader."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      SalesCrMemoHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
      SalesCrMemoHeader."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');

      CLEAR(OutStr);
      SalesCrMemoHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);
      // Certificate Serial
      SalesCrMemoHeader."Electronic Document Status" := SalesCrMemoHeader."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      SalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
      QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",SalesCrMemoHeader."Amount Including VAT",
          FORMAT(SalesCrMemoHeader."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      SalesCrMemoHeader."QR Code" := TempBlob.Blob;
    END;

    LOCAL PROCEDURE ProcessResponseEServiceInvoice@1020042(VAR ServInvoiceHeader@1020000 : Record "Service Invoice Header";Action@1020007 : Option;AmountInclVAT@1020010 : Decimal);
    VAR
      TempBlob@1020002 : Record TempBlob;
      PACWebService@1020003 : Record "PAC Web Service";
      XMLDOMManagement@1020016 : Codeunit "XML DOM Management";
      XMLDoc@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020009 : Text[95];
      ErrorDescription@1020011 : Text;
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      GetCustomer(ServInvoiceHeader."Bill-to Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      if ISNULL(XMLDoc) then
        XMLDoc := XMLDoc.XmlDocument;

      ServInvoiceHeader.CALCFIELDS("Signed Document XML");
      ServInvoiceHeader."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDoc);
      CLEAR(ServInvoiceHeader."Signed Document XML");
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      ServInvoiceHeader."PAC Web Service Name" := PACWebService.Name;

      if XMLCurrNode.Value <> '1' then begin
        ServInvoiceHeader."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        ErrorDescription := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
        if not ISNULL(XMLCurrNode) then
          ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
        if STRLEN(ErrorDescription) > 250 then
          ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
        ServInvoiceHeader."Error Description" := COPYSTR(ErrorDescription,1,250);

        case Action of
          EDocAction::"Request Stamp":
            ServInvoiceHeader."Electronic Document Status" := ServInvoiceHeader."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            begin
              ServInvoiceHeader."Electronic Document Status" := ServInvoiceHeader."Electronic Document Status"::"Cancel Error";
              ServInvoiceHeader."Date/Time Canceled" := '';
            end;
        end;
        exit;
      end;

      ServInvoiceHeader."Error Code" := '';
      ServInvoiceHeader."Error Description" := '';
      if Action = EDocAction::Cancel then begin
        ServInvoiceHeader."Electronic Document Status" := ServInvoiceHeader."Electronic Document Status"::Canceled;
        exit;
      end;
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;
      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;

      for Counter := 0 to (NodeCount - 1) do begin
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,true));
      end;

      ServInvoiceHeader."Signed Document XML".CREATEOUTSTREAM(OutStr);
      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/3');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      ServInvoiceHeader."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      ServInvoiceHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
      ServInvoiceHeader."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');

      CLEAR(OutStr);
      ServInvoiceHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);
      // Certiificate Serial
      ServInvoiceHeader."Electronic Document Status" := ServInvoiceHeader."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",AmountInclVAT,
          FORMAT(ServInvoiceHeader."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      ServInvoiceHeader."QR Code" := TempBlob.Blob;
    END;

    LOCAL PROCEDURE ProcessResponseEServiceCrMemo@1020044(VAR ServCrMemoHeader@1020000 : Record "Service Cr.Memo Header";Action@1020007 : Option;AmountInclVAT@1020010 : Decimal);
    VAR
      TempBlob@1020002 : Record TempBlob;
      PACWebService@1020003 : Record "PAC Web Service";
      XMLDOMManagement@1020016 : Codeunit "XML DOM Management";
      XMLDoc@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020009 : Text[95];
      ErrorDescription@1020011 : Text;
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      GetCustomer(ServCrMemoHeader."Bill-to Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      if ISNULL(XMLDoc) then
        XMLDoc := XMLDoc.XmlDocument;

      ServCrMemoHeader.CALCFIELDS("Signed Document XML");
      ServCrMemoHeader."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDoc);
      CLEAR(ServCrMemoHeader."Signed Document XML");
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      ServCrMemoHeader."PAC Web Service Name" := PACWebService.Name;

      if XMLCurrNode.Value <> '1' then begin
        ServCrMemoHeader."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        ErrorDescription := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
        if not ISNULL(XMLCurrNode) then
          ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
        if STRLEN(ErrorDescription) > 250 then
          ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
        ServCrMemoHeader."Error Description" := COPYSTR(ErrorDescription,1,250);

        case Action of
          EDocAction::"Request Stamp":
            ServCrMemoHeader."Electronic Document Status" := ServCrMemoHeader."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            begin
              ServCrMemoHeader."Electronic Document Status" := ServCrMemoHeader."Electronic Document Status"::"Cancel Error";
              ServCrMemoHeader."Date/Time Canceled" := '';
            end;
        end;
        exit;
      end;

      ServCrMemoHeader."Error Code" := '';
      ServCrMemoHeader."Error Description" := '';
      if Action = EDocAction::Cancel then begin
        ServCrMemoHeader."Electronic Document Status" := ServCrMemoHeader."Electronic Document Status"::Canceled;
        exit;
      end;
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;
      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;

      for Counter := 0 to (NodeCount - 1) do begin
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,true));
      end;

      ServCrMemoHeader."Signed Document XML".CREATEOUTSTREAM(OutStr);
      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/3');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      ServCrMemoHeader."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      ServCrMemoHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
      ServCrMemoHeader."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');

      CLEAR(OutStr);
      ServCrMemoHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);
      // Certificate Serial
      ServCrMemoHeader."Electronic Document Status" := ServCrMemoHeader."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",AmountInclVAT,
          FORMAT(ServCrMemoHeader."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      ServCrMemoHeader."QR Code" := TempBlob.Blob;
    END;

    LOCAL PROCEDURE ValidateSalesInvoice@1020075(VAR SalesInvoiceHeader@1020000 : Record "Sales Invoice Header");
    BEGIN
      with SalesInvoiceHeader do begin
        if "Source Code" = SourceCodeSetup."Deleted Document" then
          ERROR(Text007);
        TESTFIELD("Bill-to Address");
        TESTFIELD("Bill-to Post Code");
        TESTFIELD("No.");
        TESTFIELD("Document Date");
        TESTFIELD("Payment Terms Code");
      end;
    END;

    LOCAL PROCEDURE ValidateSalesCrMemo@1020078(VAR SalesCrMemoHeader@1020000 : Record "Sales Cr.Memo Header");
    BEGIN
      with SalesCrMemoHeader do begin
        if "Source Code" = SourceCodeSetup."Deleted Document" then
          ERROR(Text007);
        TESTFIELD("Bill-to Address");
        TESTFIELD("Bill-to Post Code");
        TESTFIELD("No.");
        TESTFIELD("Document Date");
        TESTFIELD("Payment Terms Code");
      end;
    END;

    LOCAL PROCEDURE ValidateServiceInvoice@1020079(VAR ServiceInvoiceHeader@1020000 : Record "Service Invoice Header");
    BEGIN
      with ServiceInvoiceHeader do begin
        if "Source Code" = SourceCodeSetup."Deleted Document" then
          ERROR(Text007);
        TESTFIELD("Bill-to Address");
        TESTFIELD("Bill-to Post Code");
        TESTFIELD("No.");
        TESTFIELD("Document Date");
        TESTFIELD("Payment Terms Code");
      end;
    END;

    LOCAL PROCEDURE ValidateServiceCrMemo@1020080(VAR ServiceCrMemoHeader@1020000 : Record "Service Cr.Memo Header");
    BEGIN
      with ServiceCrMemoHeader do begin
        if "Source Code" = SourceCodeSetup."Deleted Document" then
          ERROR(Text007);
        TESTFIELD("Bill-to Address");
        TESTFIELD("Bill-to Post Code");
        TESTFIELD("No.");
        TESTFIELD("Document Date");
        TESTFIELD("Payment Terms Code");
      end;
    END;

    LOCAL PROCEDURE CreateXMLDocument33@1020003(VAR TempDocumentHeader@1020000 : TEMPORARY Record "Document Header";VAR TempDocumentLine@1020009 : TEMPORARY Record "Document Line";DateTimeFirstReqSent@1020007 : Text[50];SignedString@1020001 : Text;Certificate@1020002 : Text;CertificateSerialNo@1020008 : Text[250];SubTotal@1020004 : Decimal;RetainAmt@1020003 : Decimal;IsCredit@1020010 : Boolean;VAR XMLDoc@1020005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      SATUtilities@1020012 : Codeunit "SAT Utilities";
      XMLCurrNode@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TotalDiscount@1020013 : Decimal;
      TotalTaxes@1020014 : Decimal;
      TaxCode@1020015 : Code[10];
      TaxType@1020016 : 'Translado,Retencion';
      LineTaxes@1020017 : Boolean;
    BEGIN
      InitXML33(XMLDoc,XMLCurrNode);
      with TempDocumentHeader do begin
        AddAttribute(XMLDoc,XMLCurrNode,'Version','3.3');
        AddAttribute(XMLDoc,XMLCurrNode,'Folio',"No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',DateTimeFirstReqSent);
        AddAttribute(XMLDoc,XMLCurrNode,'Sello',SignedString);
        AddAttribute(XMLDoc,XMLCurrNode,'FormaPago',SATUtilities.GetSATPaymentTerm("Payment Terms Code"));
        AddAttribute(XMLDoc,XMLCurrNode,'NoCertificado',CertificateSerialNo);
        AddAttribute(XMLDoc,XMLCurrNode,'Certificado',Certificate);
        AddAttribute(XMLDoc,XMLCurrNode,'SubTotal',FormatAmount(SubTotal));

        // Need the sum of line discount to add to total amount
        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        if TempDocumentLine.FINDSET then
          repeat
            TotalTaxes := TotalTaxes + (TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount);
            TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";
          until TempDocumentLine.NEXT = 0;
        AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatAmount(TotalDiscount));

        if "Currency Code" <> '' then begin
          AddAttribute(XMLDoc,XMLCurrNode,'Moneda',"Currency Code");
          if ("Currency Code" <> 'MXN') and ("Currency Code" <> 'XXX') then
            AddAttribute(XMLDoc,XMLCurrNode,'TipoCambio',FormatDecimal(1 / "Currency Factor",6));
        end;

        AddAttribute(XMLDoc,XMLCurrNode,'Total',FormatAmount("Amount Including VAT"));
        if IsCredit then
          AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','E') // Egreso
        else
          AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','I'); // Ingreso

        IsCredit := false;

        AddAttribute(XMLDoc,XMLCurrNode,'MetodoPago',SATUtilities.GetSATPaymentMethod("Payment Method Code"));
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo."SAT Postal Code");

        // Emisor
        WriteCompanyInfo33(XMLDoc,XMLCurrNode);
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Receptor
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',Customer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Nombre',"Bill-to/Pay-To Name");
        if SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' then begin
          AddAttribute(XMLDoc,XMLCurrNode,'ResidenciaFiscal',SATUtilities.GetSATCountryCode(Customer."Country/Region Code"));
          AddAttribute(XMLDoc,XMLCurrNode,'NumRegIdTrib',Customer."VAT Registration No.");
        end;
        AddAttribute(XMLDoc,XMLCurrNode,'UsoCFDI',Customer."CFDI Purpose");

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        TotalDiscount := 0;
        LineTaxes := false;
        TempDocumentLine.RESET;
        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        if TempDocumentLine.FINDSET then
          repeat
            AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;
            AddAttribute(
              XMLDoc,XMLCurrNode,'ClaveProdServ',SATUtilities.GetSATItemClassification(TempDocumentLine.Type,TempDocumentLine."No."));
            AddAttribute(XMLDoc,XMLCurrNode,'NoIdentificacion',TempDocumentLine."No.");
            AddAttribute(XMLDoc,XMLCurrNode,'Cantidad',FORMAT(TempDocumentLine.Quantity,0,9));
            AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad',SATUtilities.GetSATUnitofMeasure(TempDocumentLine."Unit of Measure Code"));
            AddAttribute(XMLDoc,XMLCurrNode,'Unidad',TempDocumentLine."Unit of Measure Code");
            AddAttribute(XMLDoc,XMLCurrNode,'Descripcion',TempDocumentLine.Description);
            AddAttribute(XMLDoc,XMLCurrNode,'ValorUnitario',FormatAmount(TempDocumentLine."Unit Price/Direct Unit Cost"));
            AddAttribute(
              XMLDoc,XMLCurrNode,'Importe',FormatDecimal(TempDocumentLine.Quantity * TempDocumentLine."Unit Price/Direct Unit Cost",2));

            // might not need the following nodes, took out of original string....
            AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatAmount(TempDocumentLine."Line Discount Amount"));
            TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";

            if TempDocumentLine."VAT %" <> 0 then begin
              LineTaxes := true;
              // Impuestos per line
              AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
              XMLCurrNode := XMLNewChild;

              // Impuestos->Traslados/Retenciones
              if IsCredit then
                AddElementCFDI(XMLCurrNode,'Retenciones','',DocNameSpace,XMLNewChild)
              else
                AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
              XMLCurrNode := XMLNewChild;

              TaxCode := '002';
              if IsCredit then begin
                AddElementCFDI(XMLCurrNode,'Retencion','',DocNameSpace,XMLNewChild);
                if TempDocumentLine."VAT %" <> 0 then
                  TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Retencion);
              end else begin
                AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
                if TempDocumentLine."VAT %" <> 0 then
                  TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);
              end;
              XMLCurrNode := XMLNewChild;
              AddAttribute(XMLDoc,XMLCurrNode,'Base',FormatAmount(TempDocumentLine.Amount));

              AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',TaxCode); // Used to be IVA
              if TempDocumentLine."VAT %" <> 0 then begin // When Sales Tax code is % then Tasa, else Exento
                AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Tasa');
                AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuota',PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0'));
                AddAttribute(XMLDoc,XMLCurrNode,'Importe',
                  FormatAmount(TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount))
              end else
                AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Exento');
              XMLCurrNode := XMLCurrNode.ParentNode;
              XMLCurrNode := XMLCurrNode.ParentNode;

              XMLCurrNode := XMLCurrNode.ParentNode;
              // End of tax info per line
            end;
            XMLCurrNode := XMLCurrNode.ParentNode;
          until TempDocumentLine.NEXT = 0;

        if LineTaxes then begin
          // Impuestos
          XMLCurrNode := XMLCurrNode.ParentNode;
          // AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatAmount(TotalDiscount));// Descuento
          AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
          XMLCurrNode := XMLNewChild;

          TempDocumentLine.RESET;
          TempDocumentLine.SETRANGE("Document No.","No.");
          TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
          if TempDocumentLine.FINDSET then begin
            // Impuestos->Traslados/Retenciones
            TaxCode := '002';
            if IsCredit then begin
              AddElementCFDI(XMLCurrNode,'Retenciones','',DocNameSpace,XMLNewChild);
              if TempDocumentLine."VAT %" <> 0 then
                TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Retencion);
            end else begin
              AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
              if TempDocumentLine."VAT %" <> 0 then
                TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);
            end;
            XMLCurrNode := XMLNewChild;

            if IsCredit then
              AddElementCFDI(XMLCurrNode,'Retencion','',DocNameSpace,XMLNewChild)
            else
              AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',TaxCode); // Used to be IVA
            if TempDocumentLine."VAT %" <> 0 then begin // When Sales Tax code is % then Tasa, else Exento
              if not IsCredit then begin // Retencion does not use the following two nodes
                AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Tasa');
                AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuota',PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0'));
              end;
              AddAttribute(XMLDoc,XMLCurrNode,'Importe',FormatAmount(TotalTaxes));
            end else
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Exento');
            XMLCurrNode := XMLCurrNode.ParentNode;
            XMLCurrNode := XMLCurrNode.ParentNode;
            if IsCredit then
              AddAttribute(XMLDoc,XMLCurrNode,'TotalImpuestosRetenidos',FormatAmountNoABS(RetainAmt)) // TotalImpuestosRetenidos
            else
              AddAttribute(XMLDoc,XMLCurrNode,'TotalImpuestosTrasladados',FormatAmount(RetainAmt)); // TotalImpuestosTrasladados
          end;
        end; // Line taxes exist
      end;
    END;

    LOCAL PROCEDURE CreateXMLDocument33AdvanceSettle@1020088(VAR TempDocumentHeader@1020017 : TEMPORARY Record "Document Header";VAR TempDocumentLine@1020010 : TEMPORARY Record "Document Line";DateTimeFirstReqSent@1020009 : Text[50];SignedString@1020008 : Text;Certificate@1020007 : Text;CertificateSerialNo@1020005 : Text[250];SubTotal@1020004 : Decimal;RetainAmt@1020003 : Decimal;VAR XMLDoc@1020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";UUID@1020001 : Text[50]);
    VAR
      SATUtilities@1020012 : Codeunit "SAT Utilities";
      XMLCurrNode@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TotalDiscount@1020013 : Decimal;
      TotalTaxes@1020014 : Decimal;
      TaxCode@1020015 : Code[10];
      TaxType@1020016 : 'Translado,Retencion';
      LineTaxes@1020018 : Boolean;
    BEGIN
      InitXML33(XMLDoc,XMLCurrNode);
      with TempDocumentHeader do begin
        AddAttribute(XMLDoc,XMLCurrNode,'Version','3.3');
        AddAttribute(XMLDoc,XMLCurrNode,'Folio',"No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',DateTimeFirstReqSent);
        AddAttribute(XMLDoc,XMLCurrNode,'Sello',SignedString);
        AddAttribute(XMLDoc,XMLCurrNode,'FormaPago','30'); // Hardcoded for Advance Settle
        AddAttribute(XMLDoc,XMLCurrNode,'NoCertificado',CertificateSerialNo);
        AddAttribute(XMLDoc,XMLCurrNode,'Certificado',Certificate);

        // Need the sum of line discounts to add to total amount
        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        if TempDocumentLine.FINDSET then
          repeat
            TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";
          until TempDocumentLine.NEXT = 0;

        AddAttribute(XMLDoc,XMLCurrNode,'SubTotal',FormatAmount(SubTotal));
        AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatAmount(TotalDiscount));

        if "Currency Code" <> '' then begin
          AddAttribute(XMLDoc,XMLCurrNode,'Moneda',"Currency Code");
          if ("Currency Code" <> 'MXN') and ("Currency Code" <> 'XXX') then
            AddAttribute(XMLDoc,XMLCurrNode,'TipoCambio',FormatDecimal(1 / "Currency Factor",6));
        end;

        AddAttribute(XMLDoc,XMLCurrNode,'Total',FormatAmount(SubTotal - TotalDiscount + RetainAmt));
        // AddAttribute(XMLDoc,XMLCurrNode,'Total',FormatAmount(SubTotal - TotalDiscount + AdvanceAmount - RetainAmt));
        AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','I'); // Ingreso

        AddAttribute(XMLDoc,XMLCurrNode,'MetodoPago',SATUtilities.GetSATPaymentMethod("Payment Method Code"));
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo."SAT Postal Code");

        AddElementCFDI(XMLCurrNode,'CfdiRelacionados','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'TipoRelacion','07'); // Hardcoded for Advance Settle
        AddElementCFDI(XMLCurrNode,'CfdiRelacionado','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',UUID); // UUID for source invoice
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Emisor
        WriteCompanyInfo33(XMLDoc,XMLCurrNode);
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Receptor
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',Customer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Nombre',"Bill-to/Pay-To Name");
        if SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' then begin
          AddAttribute(XMLDoc,XMLCurrNode,'ResidenciaFiscal',SATUtilities.GetSATCountryCode(Customer."Country/Region Code"));
          AddAttribute(XMLDoc,XMLCurrNode,'NumRegIdTrib',Customer."VAT Registration No.");
        end;
        AddAttribute(XMLDoc,XMLCurrNode,'UsoCFDI',Customer."CFDI Purpose");

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        TotalDiscount := 0;
        TempDocumentLine.RESET;
        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        if TempDocumentLine.FINDSET then
          repeat
            AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;
            AddAttribute(
              XMLDoc,XMLCurrNode,'ClaveProdServ',SATUtilities.GetSATItemClassification(TempDocumentLine.Type,TempDocumentLine."No."));
            AddAttribute(XMLDoc,XMLCurrNode,'NoIdentificacion',TempDocumentLine."No.");
            AddAttribute(XMLDoc,XMLCurrNode,'Cantidad',FORMAT(TempDocumentLine.Quantity,0,9));
            AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad',SATUtilities.GetSATUnitofMeasure(TempDocumentLine."Unit of Measure Code"));
            AddAttribute(XMLDoc,XMLCurrNode,'Unidad',TempDocumentLine."Unit of Measure Code");
            AddAttribute(XMLDoc,XMLCurrNode,'Descripcion',TempDocumentLine.Description);
            AddAttribute(XMLDoc,XMLCurrNode,'ValorUnitario',FormatAmount(TempDocumentLine."Unit Price/Direct Unit Cost"));
            AddAttribute(
              XMLDoc,XMLCurrNode,'Importe',FormatDecimal(TempDocumentLine.Quantity * TempDocumentLine."Unit Price/Direct Unit Cost",2));

            // might not need the following nodes, took out of original string....
            AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatAmount(TempDocumentLine."Line Discount Amount"));
            TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";

            if TempDocumentLine."VAT %" <> 0 then begin
              LineTaxes := true;
              // Impuestos per line
              AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
              XMLCurrNode := XMLNewChild;

              // Impuestos->Traslados/Retenciones
              AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
              XMLCurrNode := XMLNewChild;

              TaxCode := '002';
              AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
              if TempDocumentLine."VAT %" <> 0 then
                TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);
              XMLCurrNode := XMLNewChild;
              AddAttribute(XMLDoc,XMLCurrNode,'Base',FormatAmount(TempDocumentLine.Amount));

              AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',TaxCode); // Used to be IVA
              if TempDocumentLine."VAT %" <> 0 then begin // When Sales Tax code is % then Tasa, else Exento
                AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Tasa');
                AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuota',PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0'));
                AddAttribute(XMLDoc,XMLCurrNode,'Importe',
                  FormatAmount(TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount));
              end else
                AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Exento');
              TotalTaxes := TotalTaxes + (TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount);
              XMLCurrNode := XMLCurrNode.ParentNode;
              XMLCurrNode := XMLCurrNode.ParentNode;

              XMLCurrNode := XMLCurrNode.ParentNode;
              // End of tax info per line
            end;
            XMLCurrNode := XMLCurrNode.ParentNode;
          until TempDocumentLine.NEXT = 0;

        if LineTaxes then begin
          // Impuestos
          XMLCurrNode := XMLCurrNode.ParentNode;

          AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
          XMLCurrNode := XMLNewChild;

          TempDocumentLine.RESET;
          TempDocumentLine.SETRANGE("Document No.","No.");
          TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
          if TempDocumentLine.FINDSET then begin
            // Impuestos->Traslados/Retenciones
            TaxCode := '002';
            AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
            if TempDocumentLine."VAT %" <> 0 then
              TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);
            XMLCurrNode := XMLNewChild;

            AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',TaxCode); // Used to be IVA
            if TempDocumentLine."VAT %" <> 0 then begin // When Sales Tax code is % then Tasa, else Exento
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Tasa');
              AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuota',PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0'));
              AddAttribute(XMLDoc,XMLCurrNode,'Importe',FormatAmount(TotalTaxes));
            end else
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Exento');
            XMLCurrNode := XMLCurrNode.ParentNode;
            XMLCurrNode := XMLCurrNode.ParentNode;
            AddAttribute(XMLDoc,XMLCurrNode,'TotalImpuestosTrasladados',FormatAmount(RetainAmt)); // TotalImpuestosTrasladados
          end;
        end; // Line taxes exist
      end;
    END;

    LOCAL PROCEDURE CreateXMLDocument33AdvancePayment@1020055(VAR TempDocumentHeader@1020000 : TEMPORARY Record "Document Header";VAR TempDocumentLine@1020003 : TEMPORARY Record "Document Line";DateTimeFirstReqSent@1020007 : Text[50];SignedString@1020001 : Text;Certificate@1020002 : Text;CertificateSerialNo@1020008 : Text[250];SubTotal@1020004 : Decimal;RetainAmt@1020009 : Decimal;VAR XMLDoc@1020005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      SATUtilities@1020012 : Codeunit "SAT Utilities";
      XMLCurrNode@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TaxCode@1020013 : Code[10];
      TaxType@1020014 : 'Translado,Retencion';
      TotalTaxes@1020015 : Decimal;
      TaxAmount@1310000 : Decimal;
      TaxPercentage@1310001 : Decimal;
    BEGIN
      InitXML33AdvancePayment(XMLDoc,XMLCurrNode);
      with TempDocumentHeader do begin
        AddAttribute(XMLDoc,XMLCurrNode,'Version','3.3');
        AddAttribute(XMLDoc,XMLCurrNode,'Folio',"No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',DateTimeFirstReqSent);
        AddAttribute(XMLDoc,XMLCurrNode,'Sello',SignedString);
        AddAttribute(XMLDoc,XMLCurrNode,'FormaPago',SATUtilities.GetSATPaymentTerm("Payment Terms Code"));
        AddAttribute(XMLDoc,XMLCurrNode,'NoCertificado',CertificateSerialNo);
        AddAttribute(XMLDoc,XMLCurrNode,'Certificado',Certificate);
        AddAttribute(XMLDoc,XMLCurrNode,'SubTotal',FormatDecimal(ROUND(SubTotal,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'Moneda','XXX');

        AddAttribute(XMLDoc,XMLCurrNode,'Total',FormatDecimal(ROUND(SubTotal + RetainAmt,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','I'); // Ingreso

        AddAttribute(XMLDoc,XMLCurrNode,'MetodoPago','PUE');
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo."SAT Postal Code");

        // Emisor
        WriteCompanyInfo33(XMLDoc,XMLCurrNode);
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Receptor
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',Customer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Nombre',"Bill-to/Pay-To Name");
        if SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' then begin
          AddAttribute(XMLDoc,XMLCurrNode,'ResidenciaFiscal',SATUtilities.GetSATCountryCode(Customer."Country/Region Code"));
          AddAttribute(XMLDoc,XMLCurrNode,'NumRegIdTrib',Customer."VAT Registration No.");
        end;
        AddAttribute(XMLDoc,XMLCurrNode,'UsoCFDI','P01');

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        // Just ONE concept
        AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveProdServ','84111506');
        AddAttribute(XMLDoc,XMLCurrNode,'Cantidad',FORMAT(1));
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad','ACT');
        AddAttribute(XMLDoc,XMLCurrNode,'Descripcion','Anticipo bien o servicio');

        AddAttribute(XMLDoc,XMLCurrNode,'ValorUnitario',FormatDecimal(ROUND(SubTotal,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'Importe',FormatDecimal(ROUND(SubTotal,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatDecimal(0,0));

        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        if TempDocumentLine.FINDSET then begin
          TaxAmount := TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount;
          if TaxAmount <> 0 then begin
            // Impuestos per line
            AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            // Impuestos->Traslados/Retenciones
            AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
            TaxPercentage := GetTaxPercentage(TempDocumentLine.Amount,TaxAmount);
            TaxCode := TaxCodeFromTaxRate(TaxPercentage / 100,TaxType::Translado);
            XMLCurrNode := XMLNewChild;
            AddAttribute(XMLDoc,XMLCurrNode,'Base',FormatAmount(TempDocumentLine.Amount));

            AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',TaxCode); // Used to be IVA
            if (TempDocumentLine."VAT %" <> 0) or (TaxAmount <> 0) then begin // When Sales Tax code is % then Tasa, else Exento
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Tasa');
              AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuota',PADSTR(FormatAmount(TaxPercentage / 100),8,'0'));
              AddAttribute(XMLDoc,XMLCurrNode,'Importe',
                FormatDecimal(TaxAmount,0))
            end else
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Exento');
            XMLCurrNode := XMLCurrNode.ParentNode;
            XMLCurrNode := XMLCurrNode.ParentNode;
            XMLCurrNode := XMLCurrNode.ParentNode;
            // End of tax info per line
          end;
        end;

        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;

        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        if TempDocumentLine.FINDSET then begin
          TaxAmount := TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount;
          if TaxAmount <> 0 then begin
            // Impuestos per line
            AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            // Impuestos->Traslados
            AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
            TaxPercentage := GetTaxPercentage(TempDocumentLine.Amount,TaxAmount);
            TaxCode := TaxCodeFromTaxRate(TaxPercentage / 100,TaxType::Translado);
            XMLCurrNode := XMLNewChild;
            // AddAttribute(XMLDoc,XMLCurrNode,'Base',FormatAmount(TempDocumentLine.Amount));

            AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',TaxCode); // Used to be IVA
            if (TempDocumentLine."VAT %" <> 0) or (TaxAmount <> 0) then begin // When Sales Tax code is % then Tasa, else Exento
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Tasa');
              AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuota',PADSTR(FormatAmount(TaxPercentage / 100),8,'0'));
              AddAttribute(XMLDoc,XMLCurrNode,'Importe',
                FormatDecimal(TaxAmount,0))
            end else
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Exento');
            TotalTaxes := TotalTaxes + TaxAmount;
            // End of tax info per line
          end;
        end;
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
        if TotalTaxes <> 0 then
          AddAttribute(XMLDoc,XMLCurrNode,'TotalImpuestosTrasladados',FormatDecimal(TotalTaxes,0)); // TotalImpuestosTrasladados
      end;
    END;

    LOCAL PROCEDURE CreateXMLDocument33AdvanceReverse@1020012(VAR TempDocumentHeader@1020003 : TEMPORARY Record "Document Header";DateTimeReqSent@1020007 : Text[50];SignedString@1020001 : Text;Certificate@1020002 : Text;CertificateSerialNo@1020008 : Text[250];VAR XMLDoc@1020005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";UUID@1020004 : Text[50];AdvanceAmount@1020000 : Decimal);
    VAR
      SATUtilities@1020012 : Codeunit "SAT Utilities";
      XMLCurrNode@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      InitXML33AdvancePayment(XMLDoc,XMLCurrNode);
      with TempDocumentHeader do begin
        AddAttribute(XMLDoc,XMLCurrNode,'Version','3.3');
        AddAttribute(XMLDoc,XMLCurrNode,'Folio',"No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',DateTimeReqSent);
        AddAttribute(XMLDoc,XMLCurrNode,'Sello',SignedString);
        AddAttribute(XMLDoc,XMLCurrNode,'FormaPago','30');
        AddAttribute(XMLDoc,XMLCurrNode,'NoCertificado',CertificateSerialNo);
        AddAttribute(XMLDoc,XMLCurrNode,'Certificado',Certificate);
        AddAttribute(XMLDoc,XMLCurrNode,'SubTotal',FormatDecimal(ROUND(AdvanceAmount,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'Moneda','XXX');

        AddAttribute(XMLDoc,XMLCurrNode,'Total',FormatDecimal(ROUND(AdvanceAmount,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','E'); // Egreso

        AddAttribute(XMLDoc,XMLCurrNode,'MetodoPago','PUE');
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo."SAT Postal Code");

        AddElementCFDI(XMLCurrNode,'CfdiRelacionados','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'TipoRelacion','07');
        // 01 = Credit memo, 06 = Invoice
        AddElementCFDI(XMLCurrNode,'CfdiRelacionado','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',UUID);
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Emisor
        WriteCompanyInfo33(XMLDoc,XMLCurrNode);
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Receptor
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',Customer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Nombre',Customer.Name);
        if SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' then begin
          AddAttribute(XMLDoc,XMLCurrNode,'ResidenciaFiscal',SATUtilities.GetSATCountryCode(Customer."Country/Region Code"));
          AddAttribute(XMLDoc,XMLCurrNode,'NumRegIdTrib',Customer."VAT Registration No.");
        end;
        AddAttribute(XMLDoc,XMLCurrNode,'UsoCFDI','P01');

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        // Just ONE concept
        AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveProdServ','84111506');
        AddAttribute(XMLDoc,XMLCurrNode,'Cantidad',FORMAT(1));
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad','ACT');
        AddAttribute(XMLDoc,XMLCurrNode,'Descripcion','Aplicacion de anticipo');

        AddAttribute(XMLDoc,XMLCurrNode,'ValorUnitario',FormatDecimal(ROUND(AdvanceAmount,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'Importe',FormatDecimal(ROUND(AdvanceAmount,1,'='),0));

        AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatDecimal(0,0));
      end;
    END;

    [External]
    PROCEDURE CreateOriginalStr33@1020004(VAR TempDocumentHeader@1020001 : TEMPORARY Record "Document Header";VAR TempDocumentLine@1020003 : TEMPORARY Record "Document Line";DateTimeFirstReqSent@1020005 : Text;SubTotal@1020004 : Decimal;RetainAmt@1020007 : Decimal;IsCredit@1020006 : Boolean;VAR TempBlob@1020002 : Record TempBlob);
    VAR
      BlobManagement@1020000 : Codeunit "Blob Management";
      SATUtilities@1020008 : Codeunit "SAT Utilities";
      TotalDiscount@1020011 : Decimal;
      TotalTaxes@1020009 : Decimal;
      TaxCode@1020013 : Code[10];
      TaxType@1020012 : 'Translado,Retencion';
      LineTaxes@1020014 : Boolean;
    BEGIN
      with TempDocumentHeader do begin
        BlobManagement.Init;
        BlobManagement.Write('||3.3|'); // Version
        BlobManagement.Write(RemoveInvalidChars("No.") + '|'); // Folio
        BlobManagement.Write(DateTimeFirstReqSent + '|'); // Fecha
        BlobManagement.Write(SATUtilities.GetSATPaymentTerm("Payment Terms Code") + '|'); // FormaPago
        BlobManagement.Write(GetCertificateSerialNo + '|'); // NoCertificado
        BlobManagement.Write(FormatAmount(SubTotal) + '|'); // SubTotal

        // Need the sum of line discount to add to total amount
        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        if TempDocumentLine.FINDSET then
          repeat
            TotalTaxes := TotalTaxes + (TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount);
            TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";
          until TempDocumentLine.NEXT = 0;

        BlobManagement.Write(FormatAmount(TotalDiscount) + '|'); // Descuento

        if "Currency Code" <> '' then begin
          BlobManagement.Write("Currency Code" + '|'); // Moneda
          if ("Currency Code" <> 'MXN') and ("Currency Code" <> 'XXX') then
            BlobManagement.Write(FormatDecimal(1 / "Currency Factor",6) + '|'); // TipoCambio
        end;

        BlobManagement.Write(FormatAmount("Amount Including VAT") + '|'); // Total
        if IsCredit then
          BlobManagement.Write(FORMAT('E') + '|') // Egreso
        else
          BlobManagement.Write(FORMAT('I') + '|'); // Ingreso

        IsCredit := false;

        if not Export then begin
          GetCompanyInfo;
          GetCustomer("Bill-to/Pay-To No.");
        end;
        BlobManagement.Write(SATUtilities.GetSATPaymentMethod("Payment Method Code") + '|'); // MetodoPago
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."SAT Postal Code") + '|'); // LugarExpedicion

        // Company Information (Emisor)
        BlobManagement.Write(CompanyInfo."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|'); // Nombre
        BlobManagement.Write(CompanyInfo."SAT Tax Regime Classification" + '|'); // RegimenFiscal

        // Customer information (Receptor)
        BlobManagement.Write(Customer."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars("Bill-to/Pay-To Name") + '|'); // Nombre
        if SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' then begin
          BlobManagement.Write(SATUtilities.GetSATCountryCode(Customer."Country/Region Code") + '|'); // ResidenciaFiscal
          BlobManagement.Write(RemoveInvalidChars(Customer."VAT Registration No.") + '|'); // NumRegIDTrib
        end;
        BlobManagement.Write(RemoveInvalidChars(Customer."CFDI Purpose") + '|'); // UsoCFDI

        LineTaxes := false;
        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        if TempDocumentLine.FINDSET then
          repeat
            BlobManagement.Write(SATUtilities.GetSATItemClassification(TempDocumentLine.Type,TempDocumentLine."No.") + '|'); // ClaveProdServ
            BlobManagement.Write(TempDocumentLine."No." + '|'); // NoIdentificacion
            BlobManagement.Write(FORMAT(TempDocumentLine.Quantity,0,9) + '|'); // Cantidad
            BlobManagement.Write(SATUtilities.GetSATUnitofMeasure(TempDocumentLine."Unit of Measure Code") + '|'); // ClaveUnidad
            BlobManagement.Write(TempDocumentLine."Unit of Measure Code" + '|'); // Unidad
            BlobManagement.Write(TempDocumentLine.Description + '|'); // Descripcion
            BlobManagement.Write(FormatAmount(TempDocumentLine."Unit Price/Direct Unit Cost") + '|'); // ValorUnitario
            BlobManagement.Write(FormatDecimal(TempDocumentLine.Quantity * TempDocumentLine."Unit Price/Direct Unit Cost",2) + '|'); // Importe
            BlobManagement.Write(FormatAmount(TempDocumentLine."Line Discount Amount") + '|'); // Descuento

            if TempDocumentLine."VAT %" <> 0 then begin
              LineTaxes := true;
              BlobManagement.Write(FormatAmount(TempDocumentLine.Amount) + '|'); // Base
              if IsCredit then begin
                if TempDocumentLine."VAT %" <> 0 then
                  TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Retencion);
              end else begin
                if TempDocumentLine."VAT %" <> 0 then
                  TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);
              end;

              BlobManagement.Write(TaxCode + '|'); // Impuesto
              if TempDocumentLine."VAT %" <> 0 then begin// When Sales Tax code is % then Tasa, else Exento
                BlobManagement.Write('Tasa' + '|'); // TipoFactor
                BlobManagement.Write(PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0') + '|'); // TasaOCuota
                BlobManagement.Write(
                  FormatAmount(TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount) + '|') // Importe
              end else
                BlobManagement.Write('Exento' + '|'); // TipoFactor
            end;
          until TempDocumentLine.NEXT = 0;

        if LineTaxes then begin
          TempDocumentLine.RESET;
          TempDocumentLine.SETRANGE("Document No.","No.");
          TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
          if TempDocumentLine.FINDSET then begin
            if IsCredit then
              if TempDocumentLine."VAT %" <> 0 then
                TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Retencion);
            if not IsCredit then
              if TempDocumentLine."VAT %" <> 0 then
                TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);

            BlobManagement.Write(TaxCode + '|'); // Impuesto
            if TempDocumentLine."VAT %" <> 0 then begin// When Sales Tax code is % then Tasa, else Exento
              if not IsCredit then begin // Retencion does not use the following 2 nodes...
                BlobManagement.Write('Tasa' + '|'); // TipoFactor
                BlobManagement.Write(PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0') + '|'); // TasaOCuota
              end;
              BlobManagement.Write(FormatAmount(TotalTaxes) + '|'); // Importe
            end else
              BlobManagement.Write('Exento' + '|'); // TipoFactor
          end;
          BlobManagement.Write(FormatAmount(RetainAmt) + '||'); // TotalImpuestosTrasladados or TotalImpuestosRetenidos
        end else
          BlobManagement.WriteAllowOneCharacter('|');
        BlobManagement.Get(TempBlob);
      end;

      // FileManagement.BLOBExport(TempBlob,'OriginalString33.xml',TRUE);
    END;

    [External]
    PROCEDURE CreateOriginalStr33AdvanceSettle@1020084(VAR TempDocumentHeader@1020001 : TEMPORARY Record "Document Header";VAR TempDocumentLine@1020003 : TEMPORARY Record "Document Line";DateTimeFirstReqSent@1020005 : Text;SubTotal@1020004 : Decimal;RetainAmt@1020007 : Decimal;VAR TempBlob@1020002 : Record TempBlob;UUID@1020006 : Text[50]);
    VAR
      BlobManagement@1020000 : Codeunit "Blob Management";
      SATUtilities@1020008 : Codeunit "SAT Utilities";
      TotalDiscount@1020011 : Decimal;
      TotalTaxes@1020009 : Decimal;
      TaxCode@1020013 : Code[10];
      TaxType@1020012 : 'Translado,Retencion';
      LineTaxes@1020010 : Boolean;
    BEGIN
      with TempDocumentHeader do begin
        BlobManagement.Init;
        BlobManagement.Write('||3.3|'); // Version
        BlobManagement.Write(RemoveInvalidChars("No.") + '|'); // Folio
        BlobManagement.Write(DateTimeFirstReqSent + '|'); // Fecha
        BlobManagement.Write('30|'); // FormaPago
        BlobManagement.Write(GetCertificateSerialNo + '|'); // NoCertificado

        // Need the sum of line discounts to add to total amount
        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        if TempDocumentLine.FINDSET then
          repeat
            TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";
          until TempDocumentLine.NEXT = 0;

        BlobManagement.Write(FormatAmount(SubTotal) + '|'); // SubTotal
        BlobManagement.Write(FormatAmount(TotalDiscount) + '|'); // Desuento
        // BlobManagement.Write(FormatAmount(AdvanceAmount + TotalDiscount) + '|'); // Desuento
        if "Currency Code" <> '' then begin
          BlobManagement.Write("Currency Code" + '|'); // Moneda
          if ("Currency Code" <> 'MXN') and ("Currency Code" <> 'XXX') then
            BlobManagement.Write(FormatDecimal(1 / "Currency Factor",6) + '|'); // TipoCambio
        end;

        BlobManagement.Write(FormatAmount(SubTotal - TotalDiscount + RetainAmt) + '|'); // Total
        // BlobManagement.Write(FormatAmount("Amount Including VAT" + TotalDiscount + AdvanceAmount) + '|'); // Total
        BlobManagement.Write(FORMAT('I') + '|'); // Ingreso -- TipoDeComprante

        if not Export then begin
          GetCompanyInfo;
          GetCustomer("Bill-to/Pay-To No.");
        end;
        BlobManagement.Write(SATUtilities.GetSATPaymentMethod("Payment Method Code") + '|'); // MetodoPago
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."SAT Postal Code") + '|'); // LugarExpedicion

        // Related documents
        BlobManagement.Write('07|'); // TipoRelacion
        BlobManagement.Write(UUID + '|'); // UUID

        // Company Information (Emisor)
        BlobManagement.Write(CompanyInfo."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|'); // Nombre
        BlobManagement.Write(CompanyInfo."SAT Tax Regime Classification" + '|'); // RegimenFiscal

        // Customer information (Receptor)
        BlobManagement.Write(Customer."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars("Bill-to/Pay-To Name") + '|'); // Nombre
        if SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' then begin
          BlobManagement.Write(SATUtilities.GetSATCountryCode(Customer."Country/Region Code") + '|'); // ResidenciaFiscal
          BlobManagement.Write(RemoveInvalidChars(Customer."VAT Registration No.") + '|'); // NumRegIDTrib
        end;
        BlobManagement.Write(RemoveInvalidChars(Customer."CFDI Purpose") + '|'); // UsoCFDI

        LineTaxes := false;
        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        if TempDocumentLine.FINDSET then
          repeat
            BlobManagement.Write(SATUtilities.GetSATItemClassification(TempDocumentLine.Type,TempDocumentLine."No.") + '|'); // ClaveProdServ
            BlobManagement.Write(TempDocumentLine."No." + '|'); // NoIdentificacion
            BlobManagement.Write(FORMAT(TempDocumentLine.Quantity,0,9) + '|'); // Cantidad
            BlobManagement.Write(SATUtilities.GetSATUnitofMeasure(TempDocumentLine."Unit of Measure Code") + '|'); // ClaveUnidad
            BlobManagement.Write(TempDocumentLine."Unit of Measure Code" + '|'); // Unidad
            BlobManagement.Write(TempDocumentLine.Description + '|'); // Descripcion
            BlobManagement.Write(FormatAmount(TempDocumentLine."Unit Price/Direct Unit Cost") + '|'); // ValorUnitario
            BlobManagement.Write(FormatDecimal(TempDocumentLine.Quantity * TempDocumentLine."Unit Price/Direct Unit Cost",2) + '|'); // Importe
            BlobManagement.Write(FormatAmount(TempDocumentLine."Line Discount Amount") + '|'); // Descuento
            TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";

            if TempDocumentLine."VAT %" <> 0 then begin
              LineTaxes := true;
              BlobManagement.Write(FormatAmount(TempDocumentLine.Amount) + '|'); // Base
              if TempDocumentLine."VAT %" <> 0 then
                TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);

              BlobManagement.Write(TaxCode + '|'); // Impuesto
              if TempDocumentLine."VAT %" <> 0 then begin// When Sales Tax code is % then Tasa, else Exento
                BlobManagement.Write('Tasa' + '|'); // TipoFactor
                BlobManagement.Write(PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0') + '|'); // TasaOCuota
                BlobManagement.Write(FormatAmount(TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount) + '|'); // Importe
              end else
                BlobManagement.Write('Exento' + '|'); // TipoFactor
              TotalTaxes := TotalTaxes + (TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount);
            end;
          until TempDocumentLine.NEXT = 0;

        if LineTaxes then begin
          TempDocumentLine.RESET;
          TempDocumentLine.SETRANGE("Document No.","No.");
          TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
          if TempDocumentLine.FINDSET then begin
            if TempDocumentLine."VAT %" <> 0 then
              TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);

            BlobManagement.Write(TaxCode + '|'); // Impuesto
            if TempDocumentLine."VAT %" <> 0 then begin// When Sales Tax code is % then Tasa, else Exento
              BlobManagement.Write('Tasa' + '|'); // TipoFactor
              BlobManagement.Write(PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0') + '|'); // TasaOCuota
              BlobManagement.Write(FormatAmount(TotalTaxes) + '|'); // Importe
            end else
              BlobManagement.Write('Exento' + '|'); // TipoFactor
          end;
          BlobManagement.Write(FormatAmount(RetainAmt) + '||'); // TotalImpuestosTrasladados
        end else
          BlobManagement.WriteAllowOneCharacter('|');
        BlobManagement.Get(TempBlob);
      end;

      // FileManagement.BLOBExport(TempBlob,'OriginalStringAdvanceSettle.xml',TRUE);
    END;

    [External]
    PROCEDURE CreateOriginalStr33AdvancePayment@1020056(VAR TempDocumentHeader@1020004 : TEMPORARY Record "Document Header";VAR TempDocumentLine@1020001 : TEMPORARY Record "Document Line";DateTimeFirstReqSent@1020005 : Text;SubTotal@1020006 : Decimal;RetainAmt@1020003 : Decimal;VAR TempBlob@1020002 : Record TempBlob);
    VAR
      BlobManagement@1020000 : Codeunit "Blob Management";
      SATUtilities@1020008 : Codeunit "SAT Utilities";
      TaxCode@1020010 : Code[10];
      TaxType@1020009 : 'Translado,Retencion';
      TotalTaxes@1020011 : Decimal;
      TaxAmount@1310001 : Decimal;
      TaxPercentage@1310002 : Decimal;
    BEGIN
      with TempDocumentHeader do begin
        BlobManagement.Init;
        BlobManagement.Write('||3.3|'); // Version
        BlobManagement.Write("No." + '|'); // Folio
        BlobManagement.Write(DateTimeFirstReqSent + '|'); // Fecha
        BlobManagement.Write(SATUtilities.GetSATPaymentTerm("Payment Terms Code") + '|'); // FormaPago
        BlobManagement.Write(GetCertificateSerialNo + '|'); // NoCertificado
        BlobManagement.Write(FormatDecimal(ROUND(SubTotal,1,'='),0) + '|'); // SubTotal
        BlobManagement.Write('XXX|'); // Moneda

        BlobManagement.Write(FormatDecimal(ROUND(SubTotal + RetainAmt,1,'='),0) + '|'); // Total
        BlobManagement.Write(FORMAT('I') + '|'); // TipoDeComprobante

        if not Export then begin
          GetCompanyInfo;
          GetCustomer("Bill-to/Pay-To No.");
        end;

        BlobManagement.Write('PUE|'); // MetodoPago
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."SAT Postal Code") + '|'); // LugarExpedicion

        // Company Information (Emisor)
        BlobManagement.Write(CompanyInfo."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|'); // Nombre
        BlobManagement.Write(CompanyInfo."SAT Tax Regime Classification" + '|'); // RegimenFiscal

        // Customer information (Receptor)
        BlobManagement.Write(Customer."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars("Bill-to/Pay-To Name") + '|'); // Nombre
        if SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' then begin
          BlobManagement.Write(SATUtilities.GetSATCountryCode(Customer."Country/Region Code") + '|'); // ResidenciaFiscal
          BlobManagement.Write(RemoveInvalidChars(Customer."VAT Registration No.") + '|'); // NumRegIDTrib
        end;
        BlobManagement.Write('P01|'); // UsoCFDI

        // Write the one line
        BlobManagement.Write('84111506|'); // ClaveProdServ
        // BlobManagement.Write(TempDocumentLine."No." + '|'); // NoIdentificacion
        BlobManagement.Write(FORMAT(1) + '|'); // Cantidad
        BlobManagement.Write('ACT|'); // ClaveUnidad
        BlobManagement.Write('Anticipo bien o servicio|'); // Descripcion
        BlobManagement.Write(FormatDecimal(ROUND(SubTotal,1,'='),0) + '|'); // ValorUnitario
        BlobManagement.Write(FormatDecimal(ROUND(SubTotal,1,'='),0) + '|'); // Importe
        BlobManagement.Write(FormatDecimal(0,0) + '|'); // Descuento

        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        if TempDocumentLine.FINDSET then begin
          TaxAmount := TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount;
          if TaxAmount <> 0 then begin
            BlobManagement.Write(FormatAmount(TempDocumentLine.Amount) + '|'); // Base
            TaxPercentage := GetTaxPercentage(TempDocumentLine.Amount,TaxAmount);
            // TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);
            TaxCode := TaxCodeFromTaxRate(TaxPercentage / 100,TaxType::Translado);

            BlobManagement.Write(TaxCode + '|'); // Impuesto
            if (TempDocumentLine."VAT %" <> 0) or (TaxAmount <> 0) then begin// When Sales Tax code is % then Tasa, else Exento
              BlobManagement.Write('Tasa' + '|'); // TipoFactor
              // BlobManagement.Write(PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0') + '|'); // TasaOCuota
              BlobManagement.Write(PADSTR(FormatAmount(TaxPercentage / 100),8,'0') + '|'); // TasaOCuota
              BlobManagement.Write(
                FormatDecimal(TaxAmount,0) + '|') // Importe
            end else
              BlobManagement.Write('Exento' + '|'); // TipoFactor
          end;
        end;

        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        if TempDocumentLine.FINDSET then
          repeat
            TaxAmount := TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount;
            if TaxAmount <> 0 then begin
              // BlobManagement.Write(FormatAmount(TempDocumentLine.Amount) + '|'); // Base
              TaxPercentage := GetTaxPercentage(TempDocumentLine.Amount,TaxAmount);
              TaxCode := TaxCodeFromTaxRate(TaxPercentage / 100,TaxType::Translado);

              BlobManagement.Write(TaxCode + '|'); // Impuesto
              if (TempDocumentLine."VAT %" <> 0) or (TaxAmount <> 0) then begin// When Sales Tax code is % then Tasa, else Exento
                BlobManagement.Write('Tasa' + '|'); // TipoFactor
                BlobManagement.Write(PADSTR(FormatAmount(TaxPercentage / 100),8,'0') + '|'); // TasaOCuota
                BlobManagement.Write(
                  FormatDecimal(TaxAmount,0) + '|') // Importe
              end else
                BlobManagement.Write('Exento' + '|'); // TipoFactor
              TotalTaxes := TotalTaxes + TaxAmount;
            end;
          until TempDocumentLine.NEXT = 0;
        if TotalTaxes <> 0 then
          BlobManagement.Write(FormatDecimal(TotalTaxes,0) + '|'); // TotalImpuestosTrasladados
        BlobManagement.WriteAllowOneCharacter('|');
        BlobManagement.Get(TempBlob);
      end;

      // FileManagement.BLOBExport(TempBlob,'OriginalString33.xml',TRUE);
    END;

    [External]
    PROCEDURE CreateOriginalStr33AdvanceReverse@1020014(VAR TempDocumentHeader@1020001 : TEMPORARY Record "Document Header";DateTimeReqSent@1020005 : Text;VAR TempBlob@1020002 : Record TempBlob;UUID@1020006 : Text[50];AdvanceAmount@1020007 : Decimal);
    VAR
      BlobManagement@1020000 : Codeunit "Blob Management";
      SATUtilities@1020008 : Codeunit "SAT Utilities";
    BEGIN
      with TempDocumentHeader do begin
        BlobManagement.Init;
        BlobManagement.Write('||3.3|'); // Version
        BlobManagement.Write("No." + '|'); // Folio
        BlobManagement.Write(DateTimeReqSent + '|'); // Fecha
        BlobManagement.Write('30|'); // FormaPago
        BlobManagement.Write(GetCertificateSerialNo + '|'); // NoCertificado
        BlobManagement.Write(FormatDecimal(ROUND(AdvanceAmount,1,'='),0) + '|'); // SubTotal
        BlobManagement.Write('XXX|'); // Moneda

        BlobManagement.Write(FormatDecimal(ROUND(AdvanceAmount,1,'='),0) + '|'); // Total
        BlobManagement.Write(FORMAT('E') + '|'); // TipoDeComprobante

        if not Export then
          GetCompanyInfo;

        BlobManagement.Write('PUE|'); // MetodoPago
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."SAT Postal Code") + '|'); // LugarExpedicion

        // Related documents
        BlobManagement.Write('07|'); // TipoRelacion
        BlobManagement.Write(UUID + '|'); // UUID

        // Company Information (Emisor)
        BlobManagement.Write(CompanyInfo."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|'); // Nombre
        BlobManagement.Write(CompanyInfo."SAT Tax Regime Classification" + '|'); // RegimenFiscal

        // Customer information (Receptor)
        BlobManagement.Write(Customer."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars(Customer.Name) + '|'); // Nombre
        if SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' then begin
          BlobManagement.Write(SATUtilities.GetSATCountryCode(Customer."Country/Region Code") + '|'); // ResidenciaFiscal
          BlobManagement.Write(RemoveInvalidChars(Customer."VAT Registration No.") + '|'); // NumRegIDTrib
        end;
        BlobManagement.Write('P01|'); // UsoCFDI

        BlobManagement.Write('84111506|'); // ClaveProdServ
        BlobManagement.Write(FORMAT(1) + '|'); // Cantidad
        BlobManagement.Write('ACT|'); // ClaveUnidad
        BlobManagement.Write('Aplicacion de anticipo|'); // Descripcion
        BlobManagement.Write(FormatDecimal(ROUND(AdvanceAmount,1,'='),0) + '|'); // ValorUnitario
        BlobManagement.Write(FormatDecimal(ROUND(AdvanceAmount,1,'='),0) + '|'); // Importe
        BlobManagement.Write(FormatDecimal(0,0) + '||'); // Descuento

        BlobManagement.Get(TempBlob);
      end;

      // FileManagement.BLOBExport(TempBlob,'OriginalStringAdvanceReverse.xml',TRUE);
    END;

    LOCAL PROCEDURE CreateDigitalSignature@1020021(OriginalString@1020000 : Text;VAR SignedString@1020002 : Text;VAR SerialNoOfCertificateUsed@1020005 : Text[250];VAR Certificate@1020003 : Text);
    VAR
      EInvoiceObjectFactory@1020004 : Codeunit "E-Invoice Object Factory";
      ISignatureProvider@1020001 : DotNet "'Microsoft.Dynamics.Nav.MX, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.MX.SignatureProviders.ISignatureProvider";
    BEGIN
      GetGLSetup;
      if not GLSetup."Sim. Signature" then begin
        EInvoiceObjectFactory.GetSignatureProvider(ISignatureProvider);
        SignedString := ISignatureProvider.SignData(OriginalString,GLSetup."SAT Certificate Thumbprint");
        Certificate := ISignatureProvider.LastUsedCertificate;
        SerialNoOfCertificateUsed := ISignatureProvider.LastUsedCertificateSerialNo;
      end else begin
        SignedString := OriginalString;
        Certificate := '';
        SerialNoOfCertificateUsed := '';
      end;
    END;

    LOCAL PROCEDURE SaveAsPDFOnServer@1020017(DocumentHeaderRef@1020000 : RecordRef;ReportNo@1020001 : Integer) : Text;
    VAR
      SalesInvoiceHeader@1020002 : Record "Sales Invoice Header";
      SalesCrMemoHeader@1020003 : Record "Sales Cr.Memo Header";
      ServiceInvoiceHeader@1020004 : Record "Service Invoice Header";
      ServiceCrMemoHeader@1020005 : Record "Service Cr.Memo Header";
      FileManagement@1020007 : Codeunit "File Management";
      DestinationFilePath@1020006 : Text;
    BEGIN
      DestinationFilePath := FileManagement.GetDirectoryName(FileManagement.ServerTempFileName(''));
      DestinationFilePath := DELCHR(DestinationFilePath,'>','\');
      DestinationFilePath += '\';
      case DocumentHeaderRef.NUMBER of
        DATABASE::"Sales Invoice Header":
          begin
            DocumentHeaderRef.SETTABLE(SalesInvoiceHeader);
            SalesInvoiceHeader.SETRECFILTER;
            DestinationFilePath += SalesInvoiceHeader."No." + '.pdf';
            REPORT.SAVEASPDF(ReportNo,DestinationFilePath,SalesInvoiceHeader);
          end;
        DATABASE::"Sales Cr.Memo Header":
          begin
            DocumentHeaderRef.SETTABLE(SalesCrMemoHeader);
            SalesCrMemoHeader.SETRECFILTER;
            DestinationFilePath += SalesCrMemoHeader."No." + '.pdf';
            REPORT.SAVEASPDF(ReportNo,DestinationFilePath,SalesCrMemoHeader);
          end;
        DATABASE::"Service Invoice Header":
          begin
            DocumentHeaderRef.SETTABLE(ServiceInvoiceHeader);
            ServiceInvoiceHeader.SETRECFILTER;
            DestinationFilePath += ServiceInvoiceHeader."No." + '.pdf';
            REPORT.SAVEASPDF(ReportNo,DestinationFilePath,ServiceInvoiceHeader);
          end;
        DATABASE::"Service Cr.Memo Header":
          begin
            DocumentHeaderRef.SETTABLE(ServiceCrMemoHeader);
            ServiceCrMemoHeader.SETRECFILTER;
            DestinationFilePath += ServiceCrMemoHeader."No." + '.pdf';
            REPORT.SAVEASPDF(ReportNo,DestinationFilePath,ServiceCrMemoHeader);
          end;
      end;
      exit(DestinationFilePath);
    END;

    LOCAL PROCEDURE SendEmail@1020008(SendToAddress@1020001 : Text;Subject@1020007 : Text;MessageBody@1020008 : Text;FilePathEDoc@1020000 : Text;PDFFilePath@1020002 : Text;SendPDF@1020003 : Boolean;XMLInstream@1170000000 : InStream);
    VAR
      SMTPMail@1020005 : Codeunit "SMTP Mail";
      SendOK@1020004 : Boolean;
    BEGIN
      GetGLSetup;
      if GLSetup."Sim. Send" then
        exit;

      SMTPMail.CreateMessage(CompanyInfo.Name,CompanyInfo."E-Mail",SendToAddress,Subject,MessageBody,true);

      SMTPMail.AddAttachmentStream(XMLInstream,FilePathEDoc);
      if SendPDF then
        SMTPMail.AddAttachment(PDFFilePath,'');

      SendOK := SMTPMail.TrySend;

      if SendPDF then
        DeleteServerFile(PDFFilePath);

      if not SendOK then
        ERROR(STRSUBSTNO(Text016,SMTPMail.GetLastSendMailErrorText));
    END;

    [External]
    PROCEDURE ImportElectronicInvoice@1020027(VAR PurchaseHeader@1020000 : Record "Purchase Header");
    VAR
      FileManagement@1020006 : Codeunit "File Management";
      XMLDOMManagement@1020008 : Codeunit "XML DOM Management";
      XMLDoc@1020007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Node@1020003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodeList@1020005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      ServerFileName@1020001 : Text;
      ClientFileName@1020004 : Text;
    BEGIN
      if FileManagement.IsWebClient then
        ERROR(WebClientErr);

      ClientFileName := FileManagement.OpenFileDialog(FileDialogTxt,'',FileManagement.GetToFilterText('','.xml'));
      if ClientFileName = '' then
        exit;

      ServerFileName := FileManagement.UploadFileToServer(ClientFileName);

      XMLDOMManagement.LoadXMLDocumentFromFile(ServerFileName,XMLDoc);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/3');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');

      // Import UUID
      NodeList := XMLDoc.DocumentElement.SelectNodes('//cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      if NodeList.Count <> 0 then begin
        Node := NodeList.Item(0);
        PurchaseHeader.VALIDATE("Fiscal Invoice Number PAC",Node.Attributes.GetNamedItem('UUID').Value);
        PurchaseHeader.MODIFY(true);
      end else
        ERROR(ImportFailedErr);
    END;

    LOCAL PROCEDURE WriteCompanyInfo33@1020002(VAR XMLDoc@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLNewChild@1020004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      with CompanyInfo do begin
        // Emisor
        AddElementCFDI(XMLCurrNode,'Emisor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',"RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Nombre',Name);
        AddAttribute(XMLDoc,XMLCurrNode,'RegimenFiscal',"SAT Tax Regime Classification");
      end;
    END;

    LOCAL PROCEDURE InitXML33@1020053(VAR XMLDoc@1020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLDOMManagement@1020001 : Codeunit "XML DOM Management";
    BEGIN
      // Create instance
      if ISNULL(XMLDoc) then
        XMLDoc := XMLDoc.XmlDocument;

      // Root element
      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> ' +
        '<cfdi:Comprobante xmlns:cfdi="http://www.sat.gob.mx/cfd/3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
        'xsi:schemaLocation="http://www.sat.gob.mx/cfd/3 http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv33.xsd"></cfdi:Comprobante>',
        XMLDoc);

      XMLCurrNode := XMLDoc.DocumentElement;
    END;

    LOCAL PROCEDURE InitXML33AdvancePayment@1020041(VAR XMLDoc@1020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLDOMManagement@1020001 : Codeunit "XML DOM Management";
    BEGIN
      // Create instance
      if ISNULL(XMLDoc) then
        XMLDoc := XMLDoc.XmlDocument;

      // Root element
      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> ' +
        '<cfdi:Comprobante xmlns:cfdi="http://www.sat.gob.mx/cfd/3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
        'xsi:schemaLocation="http://www.sat.gob.mx/cfd/3 http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv33.xsd ' +
        'http://www.sat.gob.mx/Pagos http://www.sat.gob.mx/sitio_internet/cfd/Pagos/Pagos10.xsd"></cfdi:Comprobante>',
        XMLDoc);

      XMLCurrNode := XMLDoc.DocumentElement;
    END;

    LOCAL PROCEDURE AddElementCFDI@1000010(VAR XMLNode@1000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1000003 : Text;NodeText@1000002 : Text;NameSpace@1000001 : Text;VAR CreatedXMLNode@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      NewChildNode@1000005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NodeName := 'cfdi:' + NodeName;
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element',NodeName,NameSpace);
      if ISNULL(NewChildNode) then
        exit(false);

      if NodeText <> '' then
        NewChildNode.Value := RemoveInvalidChars(NodeText);
      XMLNode.AppendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;
      exit(true);
    END;

    LOCAL PROCEDURE AddElement@1020039(VAR XMLNode@1000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1000003 : Text;NodeText@1000002 : Text;NameSpace@1000001 : Text;VAR CreatedXMLNode@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      NewChildNode@1000005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element',NodeName,NameSpace);
      if ISNULL(NewChildNode) then
        exit(false);

      if NodeText <> '' then
        NewChildNode.Value := RemoveInvalidChars(NodeText);
      XMLNode.AppendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;
      exit(true);
    END;

    LOCAL PROCEDURE AddAttribute@1000009(VAR XMLDomDocParam@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLDomNode@1000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";AttribName@1000002 : Text;AttribValue@1000003 : Text) : Boolean;
    VAR
      XMLDomAttribute@1000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
    BEGIN
      XMLDomAttribute := XMLDomDocParam.CreateAttribute(AttribName);
      if ISNULL(XMLDomAttribute) then
        exit(false);

      if AttribValue <> '' then begin
        XMLDomAttribute.Value := RemoveInvalidChars(AttribValue);
        XMLDomNode.Attributes.SetNamedItem(XMLDomAttribute);
      end;
      CLEAR(XMLDomAttribute);
      exit(true);
    END;

    LOCAL PROCEDURE FormatAmount@1000017(InAmount@1000000 : Decimal) : Text;
    BEGIN
      exit(FORMAT(ABS(InAmount),0,'<Precision,' + FORMAT(CurrencyDecimalPlaces) + ':' +
          FORMAT(CurrencyDecimalPlaces) + '><Standard Format,1>'));
    END;

    LOCAL PROCEDURE FormatAmountNoABS@1020035(InAmount@1000000 : Decimal) : Text;
    BEGIN
      exit(FORMAT(InAmount,0,'<Precision,' + FORMAT(CurrencyDecimalPlaces) + ':' +
          FORMAT(CurrencyDecimalPlaces) + '><Standard Format,1>'));
    END;

    LOCAL PROCEDURE FormatDecimal@1020074(InAmount@1000000 : Decimal;DecimalPlaces@1020000 : Integer) : Text;
    BEGIN
      exit(FORMAT(ABS(InAmount),0,'<Precision,' + FORMAT(DecimalPlaces) + ':' + FORMAT(DecimalPlaces) + '><Standard Format,1>'));
    END;

    LOCAL PROCEDURE RemoveInvalidChars@1020005(PassedStr@1020000 : Text) : Text;
    BEGIN
      PassedStr := DELCHR(PassedStr,'=','|');
      PassedStr := RemoveExtraWhiteSpaces(PassedStr);
      exit(PassedStr);
    END;

    LOCAL PROCEDURE GetReportNo@1020016(VAR ReportSelection@1020000 : Record "Report Selections") : Integer;
    BEGIN
      ReportSelection.SETFILTER("Report ID",'<>0');
      if ReportSelection.FINDFIRST then
        exit(ReportSelection."Report ID");
      exit(0);
    END;

    LOCAL PROCEDURE FormatDateTime@1020040(DateTime@1020000 : DateTime) : Text[50];
    BEGIN
      exit(FORMAT(DateTime,0,'<Year4>-<Month,2>-<Day,2>T<Hours24,2>:<Minutes,2>:<Seconds,2>'));
    END;

    LOCAL PROCEDURE FormatAsDateTime@1020007(DocDate@1020000 : Date;DocTime@1020001 : Time) : Text[50];
    BEGIN
      exit(FormatDateTime(CREATEDATETIME(DocDate,DocTime)));
    END;

    LOCAL PROCEDURE GetGLSetup@1020009();
    BEGIN
      GLSetup.GET;
      GLSetup.TESTFIELD("SAT Certificate Thumbprint");
    END;

    LOCAL PROCEDURE GetCompanyInfo@1020015();
    BEGIN
      CompanyInfo.GET;
      CompanyInfo.TESTFIELD(Name);
      CompanyInfo.TESTFIELD("RFC No.");
      CompanyInfo.TESTFIELD(Address);
      CompanyInfo.TESTFIELD(City);
      CompanyInfo.TESTFIELD("Country/Region Code");
      CompanyInfo.TESTFIELD("Post Code");
      CompanyInfo.TESTFIELD("E-Mail");
      CompanyInfo.TESTFIELD("Tax Scheme");
    END;

    LOCAL PROCEDURE GetCustomer@1020020(CustomerNo@1020000 : Code[20]);
    BEGIN
      Customer.GET(CustomerNo);
      Customer.TESTFIELD("RFC No.");
      Customer.TESTFIELD("Country/Region Code");
    END;

    LOCAL PROCEDURE CalcSalesInvLineTotal@1020019(VAR SubTotal@1020002 : Decimal;VAR RetainAmt@1020001 : Decimal;DocumentNo@1020003 : Code[20];AdvanceSettle@1020004 : Boolean);
    VAR
      SalesInvoiceLine@1020000 : Record "Sales Invoice Line";
    BEGIN
      SalesInvoiceLine.RESET;
      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.SETFILTER(Type,'<>%1',SalesInvoiceLine.Type::" ");
      if AdvanceSettle then
        SalesInvoiceLine.SETFILTER("Prepayment Line",'=0');
      if SalesInvoiceLine.FINDSET then
        repeat
          SalesInvoiceLine.TESTFIELD(Description);
          SubTotal := SubTotal + (SalesInvoiceLine.Quantity * SalesInvoiceLine."Unit Price");
          RetainAmt := RetainAmt + (SalesInvoiceLine."Amount Including VAT" - SalesInvoiceLine.Amount);
        until SalesInvoiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcSalesCrMemoLineTotal@1020022(VAR SubTotal@1020001 : Decimal;VAR RetainAmt@1020000 : Decimal;DocumentNo@1020003 : Code[20]);
    VAR
      SalesCrMemoLine@1020002 : Record "Sales Cr.Memo Line";
    BEGIN
      SalesCrMemoLine.RESET;
      SalesCrMemoLine.SETRANGE("Document No.",DocumentNo);
      SalesCrMemoLine.SETFILTER(Type,'<>%1',SalesCrMemoLine.Type::" ");
      if SalesCrMemoLine.FINDSET then
        repeat
          SalesCrMemoLine.TESTFIELD(Description);
          SubTotal := SubTotal + (SalesCrMemoLine.Quantity * SalesCrMemoLine."Unit Price");
          RetainAmt := RetainAmt + (SalesCrMemoLine."Amount Including VAT" - SalesCrMemoLine.Amount);
        until SalesCrMemoLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcServiceInvLineTotal@1020026(VAR SubTotal@1020001 : Decimal;VAR RetainAmt@1020000 : Decimal;VAR AmontInclVAT@1020004 : Decimal;DocumentNo@1020003 : Code[20]);
    VAR
      ServiceInvoiceLine@1020002 : Record "Service Invoice Line";
    BEGIN
      ServiceInvoiceLine.RESET;
      ServiceInvoiceLine.SETRANGE("Document No.",DocumentNo);
      ServiceInvoiceLine.SETFILTER(Type,'<>%1',ServiceInvoiceLine.Type::" ");
      if ServiceInvoiceLine.FINDSET then
        repeat
          ServiceInvoiceLine.TESTFIELD(Description);
          SubTotal := SubTotal + (ServiceInvoiceLine.Quantity * ServiceInvoiceLine."Unit Price");
          RetainAmt := RetainAmt + (ServiceInvoiceLine."Amount Including VAT" - ServiceInvoiceLine.Amount);
          AmontInclVAT := AmontInclVAT + ServiceInvoiceLine."Amount Including VAT";
        until ServiceInvoiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcServiceCrMemoLineTotal@1020023(VAR SubTotal@1020001 : Decimal;VAR RetainAmt@1020000 : Decimal;VAR AmontInclVAT@1020004 : Decimal;DocumentNo@1020003 : Code[20]);
    VAR
      ServiceCrMemoLine@1020002 : Record "Service Cr.Memo Line";
    BEGIN
      ServiceCrMemoLine.RESET;
      ServiceCrMemoLine.SETRANGE("Document No.",DocumentNo);
      ServiceCrMemoLine.SETFILTER(Type,'<>%1',ServiceCrMemoLine.Type::" ");
      if ServiceCrMemoLine.FINDSET then
        repeat
          ServiceCrMemoLine.TESTFIELD(Description);
          SubTotal := SubTotal + (ServiceCrMemoLine.Quantity * ServiceCrMemoLine."Unit Price");
          RetainAmt := RetainAmt + (ServiceCrMemoLine."Amount Including VAT" - ServiceCrMemoLine.Amount);
          AmontInclVAT := AmontInclVAT + ServiceCrMemoLine."Amount Including VAT";
        until ServiceCrMemoLine.NEXT = 0;
    END;

    LOCAL PROCEDURE RemoveExtraWhiteSpaces@1020018(StrParam@1020000 : Text) StrReturn : Text;
    VAR
      Cntr1@1020001 : Integer;
      Cntr2@1020002 : Integer;
      WhiteSpaceFound@1020003 : Boolean;
    BEGIN
      StrParam := DELCHR(StrParam,'<>',' ');
      WhiteSpaceFound := false;
      Cntr2 := 1;
      for Cntr1 := 1 to STRLEN(StrParam) do
        if StrParam[Cntr1] <> ' ' then begin
          WhiteSpaceFound := false;
          StrReturn[Cntr2] := StrParam[Cntr1];
          Cntr2 += 1;
        end else
          if not WhiteSpaceFound then begin
            WhiteSpaceFound := true;
            StrReturn[Cntr2] := StrParam[Cntr1];
            Cntr2 += 1;
          end;
    END;

    LOCAL PROCEDURE InvokeMethod@1020036(VAR XMLDoc@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";MethodType@1020004 : '"Request Stamp",Cancel') : Text;
    VAR
      PACWebService@1020002 : Record "PAC Web Service";
      PACWebServiceDetail@1020000 : Record "PAC Web Service Detail";
      EInvoiceObjectFactory@1020005 : Codeunit "E-Invoice Object Factory";
      IWebServiceInvoker@1020003 : DotNet "'Microsoft.Dynamics.Nav.MX, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.MX.WebServiceInvokers.IWebServiceInvoker";
    BEGIN
      GetGLSetup;
      if GLSetup."Sim. Request Stamp" then
        exit;
      if GLSetup."PAC Environment" = GLSetup."PAC Environment"::Disabled then
        ERROR(Text014,GLSetup.FIELDCAPTION("PAC Environment"),GLSetup.TABLECAPTION,GLSetup."PAC Environment");

      EInvoiceObjectFactory.GetWebServiceInvoker(IWebServiceInvoker);

      // Depending on the chosen service provider, this section needs to be modified.
      // The parameters for the invoked method need to be added in the correct order.
      case MethodType of
        MethodType::"Request Stamp":
          begin
            if not PACWebServiceDetail.GET(GLSetup."PAC Code",GLSetup."PAC Environment",PACWebServiceDetail.Type::"Request Stamp") then begin
              PACWebServiceDetail.Type := PACWebServiceDetail.Type::"Request Stamp";
              ERROR(Text009,PACWebServiceDetail.Type,GLSetup.FIELDCAPTION("PAC Code"),
                GLSetup.FIELDCAPTION("PAC Environment"),GLSetup.TABLECAPTION);
            end;
            IWebServiceInvoker.AddParameter(XMLDoc.InnerXml);
            IWebServiceInvoker.AddParameter(false);
          end;
        MethodType::Cancel:
          begin
            if not PACWebServiceDetail.GET(GLSetup."PAC Code",GLSetup."PAC Environment",PACWebServiceDetail.Type::Cancel) then
              begin
              PACWebServiceDetail.Type := PACWebServiceDetail.Type::Cancel;
              ERROR(Text009,PACWebServiceDetail.Type,GLSetup.FIELDCAPTION("PAC Code"),
                GLSetup.FIELDCAPTION("PAC Environment"),GLSetup.TABLECAPTION);
            end;
            IWebServiceInvoker.AddParameter(XMLDoc.InnerXml);
          end;
      end;

      PACWebService.GET(GLSetup."PAC Code");
      if PACWebService."Certificate Thumbprint" = '' then
        ERROR(Text012,PACWebService.FIELDCAPTION("Certificate Thumbprint"),PACWebService.TABLECAPTION,GLSetup.TABLECAPTION);

      exit(IWebServiceInvoker.InvokeMethod(PACWebServiceDetail.Address,
          PACWebServiceDetail."Method Name",PACWebService."Certificate Thumbprint"));
    END;

    LOCAL PROCEDURE GetQRCode@1020038(QRCodeInput@1020001 : Text[95]) QRCodeFileName : Text;
    VAR
      EInvoiceObjectFactory@1020002 : Codeunit "E-Invoice Object Factory";
      IBarCodeProvider@1020000 : DotNet "'Microsoft.Dynamics.Nav.MX, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.MX.BarcodeProviders.IBarcodeProvider";
    BEGIN
      EInvoiceObjectFactory.GetBarCodeProvider(IBarCodeProvider);
      QRCodeFileName := IBarCodeProvider.GetBarcode(QRCodeInput);
    END;

    LOCAL PROCEDURE CreateQRCodeInput@1020046(IssuerRFC@1020000 : Text;CustomerRFC@1020001 : Text;Amount@1020002 : Decimal;UUID@1020003 : Text) QRCodeInput : Text[95];
    BEGIN
      QRCodeInput :=
        '?re=' +
        COPYSTR(IssuerRFC,1,13) +
        '&rr=' +
        COPYSTR(CustomerRFC,1,13) +
        '&tt=' +
        CONVERTSTR(FORMAT(Amount,0,'<Integer,10><Filler Character,0><Decimals,7>'),',','.') +
        '&id=' +
        COPYSTR(FORMAT(UUID),1,36);
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqSalesInv@1020049(VAR SalesInvoiceHeader@1020000 : Record "Sales Invoice Header") : Text[50];
    BEGIN
      if SalesInvoiceHeader."Date/Time First Req. Sent" <> '' then
        exit(SalesInvoiceHeader."Date/Time First Req. Sent");

      SalesInvoiceHeader."Date/Time First Req. Sent" := FormatAsDateTime(SalesInvoiceHeader."Document Date",TIME);
      exit(SalesInvoiceHeader."Date/Time First Req. Sent");
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqSalesCr@1020050(VAR SalesCrMemoHeader@1020000 : Record "Sales Cr.Memo Header") : Text[50];
    BEGIN
      if SalesCrMemoHeader."Date/Time First Req. Sent" <> '' then
        exit(SalesCrMemoHeader."Date/Time First Req. Sent");

      SalesCrMemoHeader."Date/Time First Req. Sent" := FormatAsDateTime(SalesCrMemoHeader."Document Date",TIME);
      exit(SalesCrMemoHeader."Date/Time First Req. Sent");
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqServInv@1020051(VAR ServiceInvoiceHeader@1020000 : Record "Service Invoice Header") : Text[50];
    BEGIN
      if ServiceInvoiceHeader."Date/Time First Req. Sent" <> '' then
        exit(ServiceInvoiceHeader."Date/Time First Req. Sent");

      ServiceInvoiceHeader."Date/Time First Req. Sent" := FormatAsDateTime(ServiceInvoiceHeader."Document Date",TIME);
      exit(ServiceInvoiceHeader."Date/Time First Req. Sent");
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqServCr@1020052(VAR ServiceCrMemoHeader@1020000 : Record "Service Cr.Memo Header") : Text[50];
    BEGIN
      if ServiceCrMemoHeader."Date/Time First Req. Sent" <> '' then
        exit(ServiceCrMemoHeader."Date/Time First Req. Sent");

      ServiceCrMemoHeader."Date/Time First Req. Sent" := FormatAsDateTime(ServiceCrMemoHeader."Document Date",TIME);
      exit(ServiceCrMemoHeader."Date/Time First Req. Sent");
    END;

    LOCAL PROCEDURE DeleteServerFile@1020047(ServerFileName@1020000 : Text);
    BEGIN
      if ERASE(ServerFileName) then;
    END;

    LOCAL PROCEDURE CreateQRCode@1020089(QRCodeInput@1020047 : Text[95];VAR TempBLOB@1020048 : Record TempBlob);
    VAR
      FileManagement@1020000 : Codeunit "File Management";
      QRCodeFileName@1020049 : Text;
    BEGIN
      CLEAR(TempBLOB);
      QRCodeFileName := GetQRCode(QRCodeInput);
      FileManagement.BLOBImportFromServerFile(TempBLOB,QRCodeFileName);
      DeleteServerFile(QRCodeFileName);
    END;

    LOCAL PROCEDURE TextToBlob@1020048(VAR TempBlob@1020000 : Record TempBlob;Content@1020001 : Text);
    VAR
      OutStream@1020002 : OutStream;
      BigString@1020003 : BigText;
    BEGIN
      CLEAR(TempBlob);
      BigString.ADDTEXT(Content);
      TempBlob.Blob.CREATEOUTSTREAM(OutStream);
      BigString.WRITE(OutStream);
    END;

    [External]
    PROCEDURE CreateAbstractDocument@1020090(DocumentHeaderVariant@1020000 : Variant;VAR TempDocumentHeader@1020001 : TEMPORARY Record "Document Header";VAR TempDocumentLine@1020002 : TEMPORARY Record "Document Line";AdvanceSettle@1020007 : Boolean);
    VAR
      SalesInvoiceHeader@1020005 : Record "Sales Invoice Header";
      SalesInvoiceLine@1020006 : Record "Sales Invoice Line";
      SalesCrMemoHeader@1310002 : Record "Sales Cr.Memo Header";
      SalesCrMemoLine@1310003 : Record "Sales Cr.Memo Line";
      ServiceInvoiceHeader@1310001 : Record "Service Invoice Header";
      ServiceInvoiceLine@1310004 : Record "Service Invoice Line";
      ServiceCrMemoHeader@1310000 : Record "Service Cr.Memo Header";
      ServiceCrMemoLine@1310005 : Record "Service Cr.Memo Line";
      DataTypeManagement@1020003 : Codeunit "Data Type Management";
      RecRef@1020004 : RecordRef;
      LineVatPercent@1020009 : Decimal;
    BEGIN
      DataTypeManagement.GetRecordRef(DocumentHeaderVariant,RecRef);
      case RecRef.NUMBER of
        DATABASE::"Sales Invoice Header":
          begin
            RecRef.SETTABLE(SalesInvoiceHeader);
            TempDocumentHeader.TRANSFERFIELDS(SalesInvoiceHeader);
            if TempDocumentHeader."Currency Code" = '' then begin
              TempDocumentHeader."Currency Code" := GLSetup."LCY Code";
              TempDocumentHeader."Currency Factor" := 1.0;
            end;
            TempDocumentHeader.INSERT;

            SalesInvoiceLine.RESET;
            SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
            SalesInvoiceLine.SETFILTER(Type,'<>%1',SalesInvoiceLine.Type::" ");
            if AdvanceSettle then
              SalesInvoiceLine.SETFILTER("Prepayment Line",'=0');

            if SalesInvoiceLine.FINDSET then
              repeat
                TempDocumentLine.TRANSFERFIELDS(SalesInvoiceLine);
                TempDocumentLine."Line Discount Amount" :=
                  TempDocumentLine."Line Discount Amount" + SalesInvoiceLine."Inv. Discount Amount";
                TempDocumentLine.INSERT;
              until SalesInvoiceLine.NEXT = 0;
          end;
        DATABASE::"Sales Cr.Memo Header":
          begin
            RecRef.SETTABLE(SalesCrMemoHeader);
            TempDocumentHeader.TRANSFERFIELDS(SalesCrMemoHeader);
            if TempDocumentHeader."Currency Code" = '' then begin
              TempDocumentHeader."Currency Code" := GLSetup."LCY Code";
              TempDocumentHeader."Currency Factor" := 1.0;
            end;
            TempDocumentHeader.INSERT;

            SalesCrMemoLine.RESET;
            SalesCrMemoLine.SETRANGE("Document No.",SalesCrMemoHeader."No.");
            SalesCrMemoLine.SETFILTER(Type,'<>%1',SalesCrMemoLine.Type::" ");
            if SalesCrMemoLine.FINDSET then
              repeat
                TempDocumentLine.TRANSFERFIELDS(SalesCrMemoLine);
                TempDocumentLine."Line Discount Amount" :=
                  TempDocumentLine."Line Discount Amount" + SalesCrMemoLine."Inv. Discount Amount";
                TempDocumentLine.INSERT;
              until SalesCrMemoLine.NEXT = 0;
          end;
        DATABASE::"Service Invoice Header":
          begin
            RecRef.SETTABLE(ServiceInvoiceHeader);
            TempDocumentHeader.TRANSFERFIELDS(ServiceInvoiceHeader);
            if TempDocumentHeader."Currency Code" = '' then begin
              TempDocumentHeader."Currency Code" := GLSetup."LCY Code";
              TempDocumentHeader."Currency Factor" := 1.0;
            end;
            TempDocumentHeader.INSERT;

            ServiceInvoiceLine.RESET;
            ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
            ServiceInvoiceLine.SETFILTER(Type,'<>%1',ServiceInvoiceLine.Type::" ");
            if ServiceInvoiceLine.FINDSET then
              repeat
                TempDocumentLine.TRANSFERFIELDS(ServiceInvoiceLine);
                TempDocumentLine.Type := MapServiceTypeToTempDocType(ServiceInvoiceLine.Type);
                LineVatPercent :=
                  ((ServiceInvoiceLine."Amount Including VAT" - ServiceInvoiceLine.Amount) / ServiceInvoiceLine.Amount);
                TempDocumentLine."VAT %" := (LineVatPercent * 100);
                TempDocumentLine."Line Discount Amount" :=
                  TempDocumentLine."Line Discount Amount" + ServiceInvoiceLine."Inv. Discount Amount";
                TempDocumentLine.INSERT;
              until ServiceInvoiceLine.NEXT = 0;
          end;
        DATABASE::"Service Cr.Memo Header":
          begin
            RecRef.SETTABLE(ServiceCrMemoHeader);
            TempDocumentHeader.TRANSFERFIELDS(ServiceCrMemoHeader);
            if TempDocumentHeader."Currency Code" = '' then begin
              TempDocumentHeader."Currency Code" := GLSetup."LCY Code";
              TempDocumentHeader."Currency Factor" := 1.0;
            end;
            TempDocumentHeader.INSERT;

            ServiceCrMemoLine.RESET;
            ServiceCrMemoLine.SETRANGE("Document No.",ServiceCrMemoHeader."No.");
            ServiceCrMemoLine.SETFILTER(Type,'<>%1',ServiceCrMemoLine.Type::" ");
            if ServiceCrMemoLine.FINDSET then
              repeat
                TempDocumentLine.TRANSFERFIELDS(ServiceCrMemoLine);
                TempDocumentLine.Type := MapServiceTypeToTempDocType(ServiceCrMemoLine.Type);
                LineVatPercent :=
                  ((ServiceCrMemoLine."Amount Including VAT" - ServiceCrMemoLine.Amount) / ServiceCrMemoLine.Amount);
                TempDocumentLine."VAT %" := (LineVatPercent * 100);
                TempDocumentLine."Line Discount Amount" :=
                  TempDocumentLine."Line Discount Amount" + ServiceCrMemoLine."Inv. Discount Amount";
                TempDocumentLine.INSERT;
              until ServiceCrMemoLine.NEXT = 0;
          end;
      end;
    END;

    PROCEDURE ValidateSalesInvoiceValues@1020001(SalesInvoiceNumber@1020000 : Code[20]) : Boolean;
    VAR
      SalesInvoiceHeader@1020004 : Record "Sales Invoice Header";
      SalesInvoiceLine@1020005 : Record "Sales Invoice Line";
      SATUtilities@1020001 : Codeunit "SAT Utilities";
      SubTotal@1020003 : Decimal;
      RetainAmt@1020002 : Decimal;
      Passed@1020006 : Boolean;
    BEGIN
      Passed := false;
      SalesInvoiceHeader.GET(SalesInvoiceNumber);
      // Comprobante
      CalcSalesInvLineTotal(SubTotal,RetainAmt,SalesInvoiceNumber,false);
      if SubTotal = 0 then
        exit(Passed);

      if SalesInvoiceHeader."Currency Code" = '' then
        exit(Passed);

      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
      if SalesInvoiceHeader."Amount Including VAT" = 0 then
        exit(Passed);

      if SalesInvoiceHeader."Amount Including VAT" = 0 then
        exit(Passed);

      GetCompanyInfo;
      if CompanyInfo."SAT Postal Code" = '' then
        exit(Passed);

      // CFDIRelacionados
      GetCustomer(SalesInvoiceHeader."Bill-to Customer No.");
      if Customer."CFDI Relation" = '' then
        exit(Passed);

      // Emisor
      if (CompanyInfo."RFC No." = '') or (CompanyInfo."SAT Tax Regime Classification" = '') then
        exit(Passed);

      // Receptor
      if (Customer."RFC No." = '') or (Customer."CFDI Purpose" = '') then
        exit(Passed);

      SalesInvoiceLine.RESET;
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      SalesInvoiceLine.SETFILTER(Type,'<>%1',SalesInvoiceLine.Type::" ");
      if SalesInvoiceLine.FINDSET then
        repeat
          if SalesInvoiceLine.Type = SalesInvoiceLine.Type::Item then
            if SATUtilities.GetSATItemClassification(SalesInvoiceLine.Type,SalesInvoiceLine."No.") = '' then // ClaveProdServ
              exit(Passed);
          if SalesInvoiceLine.Quantity = 0 then // Cantidad
            exit(Passed);
          if SATUtilities.GetSATUnitofMeasure(SalesInvoiceLine."Unit of Measure Code") = '' then // Unidad
            exit(Passed);
          if SalesInvoiceLine.Description = '' then // Descripcion
            exit(Passed);
          if SalesInvoiceLine."Unit Price" = 0 then // ValorUnitario
            exit(Passed);
          if (SalesInvoiceLine.Quantity * SalesInvoiceLine."Unit Price") = 0 then  // Importe
            exit(Passed);

          // Impuestos
          if SalesInvoiceLine.Amount = 0 then
            exit(Passed);

          // NumeroPedimento for InformacionAduanera element?
          // Numero for CuentaPredial element?

          // All of the required fields in the Parte section have been valided in other sections already
        until SalesInvoiceLine.NEXT = 0;
      exit(true);
    END;

    LOCAL PROCEDURE GetCertificateSerialNo@1020061() : Text;
    VAR
      TempBlob@1020005 : Record TempBlob;
      BlobManagement@1020004 : Codeunit "Blob Management";
      EInvoiceObjectFactory@1020001 : Codeunit "E-Invoice Object Factory";
      ISignatureProvider@1020000 : DotNet "'Microsoft.Dynamics.Nav.MX, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.MX.SignatureProviders.ISignatureProvider";
      SerialNo@1020002 : Text;
    BEGIN
      GetGLSetup;
      if not GLSetup."Sim. Signature" then begin
        EInvoiceObjectFactory.GetSignatureProvider(ISignatureProvider);

        BlobManagement.Get(TempBlob);

        ISignatureProvider.SignData('DummyString',GLSetup."SAT Certificate Thumbprint");
        SerialNo := ISignatureProvider.LastUsedCertificateSerialNo;
        exit(SerialNo);
      end;
      exit('');
    END;

    LOCAL PROCEDURE TaxCodeFromTaxRate@1020006(TaxRate@1020000 : Decimal;TaxType@1020001 : 'Translado,Retencion') : Code[10];
    BEGIN
      if (TaxType = TaxType::Translado) and (TaxRate = 0.16) then
        exit('002'); // IVA

      if (TaxType = TaxType::Retencion) and ((TaxRate >= 0.0) and (TaxRate <= 0.16)) then
        exit('002'); // IVA

      if (TaxType = TaxType::Retencion) and ((TaxRate >= 0.0) and (TaxRate <= 0.35)) then
        exit('001'); // ISR

      case TaxRate of
        0.265,0.3,0.53,0.5,1.6,0.304,0.25,0.09,0.08,0.07,0.06,0.03:
          if (TaxRate = 0.03) and (TaxType <> TaxType::Retencion) then
            exit('003'); // IEPS
      end;

      if (TaxRate >= 0.0) and (TaxRate <= 43.77) then
        exit('003'); // IEPS
    END;

    [External]
    PROCEDURE RequestPaymentStampDocument@1020058(VAR CustLedgerEntry@1020000 : Record "Cust. Ledger Entry");
    VAR
      SourceCodeSetup@1020004 : Record "Source Code Setup";
      Selection@1020003 : Integer;
      ElectronicDocumentStatus@1020006 : Option;
    BEGIN
      if CustLedgerEntry."Document Type" <> CustLedgerEntry."Document Type"::Payment then
        ERROR(StampErr,CustLedgerEntry."Document Type");

      // Called from Send Action
      Export := false;
      GetCompanyInfo;
      GetGLSetup;
      SourceCodeSetup.GET;
      Selection := STRMENU(Text008,3);

      ElectronicDocumentStatus := CustLedgerEntry."Electronic Document Status";
      case Selection of
        1:// Request Stamp
          begin
            EDocActionValidation(EDocAction::"Request Stamp",ElectronicDocumentStatus);
            RequestPaymentStamp(CustLedgerEntry);
          end;
        2:// Send
          begin
            EDocActionValidation(EDocAction::Send,ElectronicDocumentStatus);
            SendPayment(CustLedgerEntry);
          end;
        3:// Request Stamp and Send
          begin
            EDocActionValidation(EDocAction::"Request Stamp",ElectronicDocumentStatus);
            RequestPaymentStamp(CustLedgerEntry);
            COMMIT;
            EDocActionValidation(EDocAction::Send,ElectronicDocumentStatus);
            SendPayment(CustLedgerEntry);
          end;
      end;
    END;

    PROCEDURE RequestPaymentStamp@1020024(CustLedgerEntry@1020000 : Record "Cust. Ledger Entry");
    VAR
      Customer@1020004 : Record Customer;
      DetailedCustLedgEntry@1020015 : Record "Detailed Cust. Ledg. Entry";
      TempDetailedCustLedgEntry@1020017 : TEMPORARY Record "Detailed Cust. Ledg. Entry";
      TempBlobOriginalString@1020008 : Record TempBlob;
      TempBlobDigitalStamp@1020019 : Record TempBlob;
      XMLDOMManagement@1020010 : Codeunit "XML DOM Management";
      OutStrOriginalDoc@1020012 : OutStream;
      OutStrSignedDoc@1020020 : OutStream;
      XMLDoc@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocResult@1170000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Environment@1020022 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Environment";
      OriginalString@1020006 : Text;
      SignedString@1020007 : Text;
      Certificate@1020005 : Text;
      Response@1020002 : Text;
      DateTimeFirstReqSent@1020003 : Text[50];
      CertificateSerialNo@1020014 : Text[250];
    BEGIN
      Export := true;
      Customer.GET(CustLedgerEntry."Customer No.");
      if not CheckPaymentStamp(CustLedgerEntry) then
        ERROR(UnableToStampErr);

      DetailedCustLedgEntry.SETRANGE("Applied Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
      DetailedCustLedgEntry.SETFILTER("Initial Document Type",'=%1|=%2',
        DetailedCustLedgEntry."Initial Document Type"::Invoice,
        DetailedCustLedgEntry."Initial Document Type"::"Credit Memo");
      if DetailedCustLedgEntry.FINDSET then begin
        repeat
          CLEAR(TempDetailedCustLedgEntry);
          TempDetailedCustLedgEntry.TRANSFERFIELDS(DetailedCustLedgEntry,true);
          TempDetailedCustLedgEntry.INSERT;
        until DetailedCustLedgEntry.NEXT = 0;
      end;
      DateTimeFirstReqSent := GetDateTimeOfFirstReqPayment(CustLedgerEntry);
      CurrencyDecimalPlaces := GetCurrencyDecimalPlaces(CustLedgerEntry."Currency Code");

      // Create Payment Digital Stamp
      // UUID := GetPaymentInvoiceUUID(CustLedgerEntry."Entry No.");
      CreateOriginalPaymentStr33(Customer,CustLedgerEntry,TempDetailedCustLedgEntry,DateTimeFirstReqSent,
        TempBlobOriginalString);

      OriginalString := TempBlobOriginalString.ReadAsText(Environment.NewLine,TEXTENCODING::MSDos);
      CreateDigitalSignature(OriginalString,SignedString,CertificateSerialNo,Certificate);
      TextToBlob(TempBlobDigitalStamp,SignedString);

      // Create Payment Original XML
      CreateXMLPayment33(
        Customer,CustLedgerEntry,TempDetailedCustLedgEntry,DateTimeFirstReqSent,SignedString,
        Certificate,CertificateSerialNo,XMLDoc);

      with CustLedgerEntry do begin
        "Original String" := TempBlobOriginalString.Blob;
        "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
        "Certificate Serial No." := CertificateSerialNo;
        "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
        "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
        XMLDoc.Save(OutStrOriginalDoc);
        MODIFY;
        // CALCFIELDS("Original Document XML");
        // TempBlob.Blob := "Original Document XML";
        // FileManagement.BLOBExport(TempBlob,'PaymentXML.xml',TRUE);
      end;

      COMMIT;

      Response := InvokeMethod(XMLDoc,MethodType::"Request Stamp");

      // For Test Mocking
      if not GLSetup."Sim. Request Stamp" then begin
        XMLDOMManagement.LoadXMLDocumentFromText(Response,XMLDocResult);
        XMLDocResult.Save(OutStrSignedDoc);
      end;

      // WITH CustLedgerEntry DO BEGIN
      // CALCFIELDS("Signed Document XML");
      // TempBlob.Blob := "Signed Document XML";
      // FileManagement.BLOBExport(TempBlob,'SignedPaymentDocument.xml',TRUE);
      // END;

      ProcessResponseEPayment(CustLedgerEntry,EDocAction::"Request Stamp");
      CustLedgerEntry.MODIFY;
    END;

    LOCAL PROCEDURE CheckPaymentStamp@1020063(CustLedgerEntry@1020000 : Record "Cust. Ledger Entry") : Boolean;
    VAR
      CustLedgerEntryLoc@1020001 : Record "Cust. Ledger Entry";
      CustLedgerEntryLoc2@1020003 : Record "Cust. Ledger Entry";
      DetailedCustLedgEntry@1020002 : Record "Detailed Cust. Ledg. Entry";
      ServiceCrMemoHeader@1020004 : Record "Service Cr.Memo Header";
      SalesCrMemoHeader@1020005 : Record "Sales Cr.Memo Header";
      ServiceSourceCode@1020006 : Code[10];
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Applied Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
      DetailedCustLedgEntry.SETRANGE("Initial Document Type",DetailedCustLedgEntry."Initial Document Type"::Invoice);
      if DetailedCustLedgEntry.FINDFIRST then begin
        CustLedgerEntryLoc.SETRANGE("Entry No.",DetailedCustLedgEntry."Cust. Ledger Entry No.");
        if CustLedgerEntryLoc.FINDFIRST then begin
          CustLedgerEntryLoc2.SETRANGE("Closed by Entry No.",CustLedgerEntryLoc."Entry No.");
          CustLedgerEntryLoc2.SETRANGE("Date/Time Stamped",'');
          CustLedgerEntryLoc2.SETCURRENTKEY("Entry No.");
          if CustLedgerEntryLoc2.FINDSET then
            repeat
              if CustLedgerEntryLoc2."Entry No." < CustLedgerEntry."Entry No." then
                // Before we throw warning, check to see if this is a credit memo
                if CustLedgerEntryLoc2."Document Type" = CustLedgerEntryLoc2."Document Type"::"Credit Memo" then begin
                  // Find the corresponding record
                  SourceCodeSetup.GET;
                  if SourceCodeSetup."Service Management" <> '' then
                    ServiceSourceCode := SourceCodeSetup."Service Management";
                  if CustLedgerEntryLoc2."Source Code" = ServiceSourceCode then
                    if ServiceCrMemoHeader.GET(CustLedgerEntryLoc2."Document No.") then
                      if ServiceCrMemoHeader."Fiscal Invoice Number PAC" <> '' then
                        exit(true);
                  if SalesCrMemoHeader.GET(CustLedgerEntryLoc2."Document No.") then
                    if SalesCrMemoHeader."Fiscal Invoice Number PAC" <> '' then
                      exit(true);
                  exit(false);
                end;
              if CustLedgerEntryLoc2."Entry No." = CustLedgerEntry."Entry No." then
                exit(true);
            until CustLedgerEntryLoc2.NEXT = 0
          else
            exit(true);
        end;
      end;
    END;

    LOCAL PROCEDURE SumStampedPayments@1020085(CustLedgerEntry@1020000 : Record "Cust. Ledger Entry") : Decimal;
    VAR
      DetailedCustLedgEntry@1020002 : Record "Detailed Cust. Ledg. Entry";
      CustLedgerEntryLoc@1020001 : Record "Cust. Ledger Entry";
      CustLedgerEntryLoc2@1020003 : Record "Cust. Ledger Entry";
      StampedAmount@1020004 : Decimal;
    BEGIN
      DetailedCustLedgEntry.RESET;
      DetailedCustLedgEntry.SETRANGE("Applied Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
      DetailedCustLedgEntry.SETRANGE("Initial Document Type",DetailedCustLedgEntry."Initial Document Type"::Invoice);
      if DetailedCustLedgEntry.FINDFIRST then begin
        CustLedgerEntryLoc.SETRANGE("Entry No.",DetailedCustLedgEntry."Cust. Ledger Entry No.");
        if CustLedgerEntryLoc.FINDFIRST then begin
          CustLedgerEntryLoc2.SETRANGE("Closed by Entry No.",CustLedgerEntryLoc."Entry No.");
          CustLedgerEntryLoc2.SETFILTER("Date/Time Stamped",'<>%1','');
          CustLedgerEntryLoc2.SETCURRENTKEY("Entry No.");
          if CustLedgerEntryLoc2.FINDSET then
            repeat
              StampedAmount += CustLedgerEntryLoc2."Closed by Amount";
            until CustLedgerEntryLoc2.NEXT = 0;
          exit(StampedAmount);
        end;
      end;
    END;

    LOCAL PROCEDURE SendPayment@1020059(VAR CustLedgerEntry@1020004 : Record "Cust. Ledger Entry");
    BEGIN
      SendEPayment(CustLedgerEntry);
    END;

    LOCAL PROCEDURE SendEPayment@1020060(VAR CustLedgerEntry@1020000 : Record "Cust. Ledger Entry");
    VAR
      CustLedgerEntryLoc@1020002 : Record "Cust. Ledger Entry";
      CustLedgerEntryLoc2@1020004 : Record "Cust. Ledger Entry";
      TempBlob@1020001 : Record TempBlob;
      XMLInstream@1020003 : InStream;
      FileNameEdoc@1020006 : Text;
    BEGIN
      GetCustomer(CustLedgerEntry."Customer No.");
      Customer.TESTFIELD("E-Mail");
      if CustLedgerEntry."No. of E-Documents Sent" <> 0 then
        if not CONFIRM(PaymentsAlreadySentQst) then
          ERROR('');

      // Export XML
      CustLedgerEntry.CALCFIELDS("Signed Document XML");
      TempBlob.Blob := CustLedgerEntry."Signed Document XML";
      TempBlob.Blob.CREATEINSTREAM(XMLInstream);
      FileNameEdoc := CustLedgerEntry."Document No." + '.xml';
      CustLedgerEntryLoc2."Signed Document XML" := TempBlob.Blob;
      CustLedgerEntryLoc2."Signed Document XML" := CustLedgerEntryLoc2."Signed Document XML";

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(PaymentNoMsg,CustLedgerEntry."Document No."),
        STRSUBSTNO(PaymentAttachmentMsg,CustLedgerEntry."Document No."),FileNameEdoc,'',false,XMLInstream);

      CustLedgerEntryLoc.GET(CustLedgerEntry."Entry No.");
      CustLedgerEntryLoc."No. of E-Documents Sent" := CustLedgerEntryLoc."No. of E-Documents Sent" + 1;
      if not CustLedgerEntryLoc."Electronic Document Sent" then
        CustLedgerEntryLoc."Electronic Document Sent" := true;
      CustLedgerEntryLoc."Electronic Document Status" := CustLedgerEntryLoc."Electronic Document Status"::Sent;
      CustLedgerEntryLoc."Date/Time Sent" := FormatDateTime(CURRENTDATETIME);
      CustLedgerEntryLoc.MODIFY;

      MESSAGE(Text001,CustLedgerEntry."Document No.");
    END;

    LOCAL PROCEDURE ProcessResponseEPayment@1020073(VAR CustLedgerEntry@1020000 : Record "Cust. Ledger Entry";Action@1020007 : Option);
    VAR
      TempBlob@1020002 : Record TempBlob;
      PACWebService@1020003 : Record "PAC Web Service";
      XMLDOMManagement@1020015 : Codeunit "XML DOM Management";
      XMLDoc@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocResult@1310000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020008 : Text[95];
      ErrorDescription@1020009 : Text[250];
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      // Switch from sales hdr Bill-toCustomerNo. to just Customer no.
      GetCustomer(CustLedgerEntry."Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      if ISNULL(XMLDocResult) then
        XMLDocResult := XMLDocResult.XmlDocument;

      CustLedgerEntry.CALCFIELDS("Signed Document XML");
      CustLedgerEntry."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDocResult);
      CLEAR(CustLedgerEntry."Signed Document XML");
      XMLCurrNode := XMLDocResult.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      CustLedgerEntry."PAC Web Service Name" := PACWebService.Name;

      if XMLCurrNode.Value <> '1' then begin
        CustLedgerEntry."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        ErrorDescription := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
        if not ISNULL(XMLCurrNode) then
          ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
        if STRLEN(ErrorDescription) > 250 then
          ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
        CustLedgerEntry."Error Description" := ErrorDescription;
        case Action of
          EDocAction::"Request Stamp":
            CustLedgerEntry."Electronic Document Status" := CustLedgerEntry."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            begin
              CustLedgerEntry."Electronic Document Status" := CustLedgerEntry."Electronic Document Status"::"Cancel Error";
              CustLedgerEntry."Date/Time Canceled" := '';
            end;
        end;
        exit;
      end;

      CustLedgerEntry."Error Code" := '';
      CustLedgerEntry."Error Description" := '';
      if Action = EDocAction::Cancel then begin
        CustLedgerEntry."Electronic Document Status" := CustLedgerEntry."Electronic Document Status"::Canceled;
        exit;
      end;

      XMLCurrNode := XMLDocResult.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;

      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;
      for Counter := 0 to (NodeCount - 1) do begin
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,true));
      end;

      CustLedgerEntry."Signed Document XML".CREATEOUTSTREAM(OutStr);

      XMLDoc.Save(OutStr);
      // *****Does any of this need to change for Payments?
      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/3');
      NamespaceManager.AddNamespace('pago10','http://www.sat.gob.mx/Pagos');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      CustLedgerEntry."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      CustLedgerEntry."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
      CustLedgerEntry."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');

      CLEAR(OutStr);
      CustLedgerEntry."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);
      // Certificate Serial
      CustLedgerEntry."Electronic Document Status" := CustLedgerEntry."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      CustLedgerEntry.CALCFIELDS(Amount);
      QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",CustLedgerEntry.Amount,
          FORMAT(CustLedgerEntry."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      CustLedgerEntry."QR Code" := TempBlob.Blob;

      // FileManagement.BLOBExport(TempBlob,'PaymentResponse.xml',TRUE);
    END;

    LOCAL PROCEDURE CreateXMLPayment33@1020062(VAR TempCustomer@1020000 : TEMPORARY Record Customer;VAR TempCustLedgerEntry@1020009 : TEMPORARY Record "Cust. Ledger Entry";VAR TempDetailedCustLedgEntry@1020013 : TEMPORARY Record "Detailed Cust. Ledg. Entry";DateTimeFirstReqSent@1020007 : Text[50];SignedString@1020001 : Text;Certificate@1020002 : Text;CertificateSerialNo@1020008 : Text[250];VAR XMLDoc@1020005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      SalesInvoiceHeader@1020010 : Record "Sales Invoice Header";
      CustLedgerEntry2@1020016 : Record "Cust. Ledger Entry";
      CustomerBankAccount@1020017 : Record "Customer Bank Account";
      ServiceInvoiceHeader@1020021 : Record "Service Invoice Header";
      SalesCrMemoHeader@1020020 : Record "Sales Cr.Memo Header";
      ServiceCrMemoHeader@1020019 : Record "Service Cr.Memo Header";
      SATUtilities@1020012 : Codeunit "SAT Utilities";
      XMLCurrNode@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      SumOfStamped@1020003 : Decimal;
      ServiceSourceCode@1020018 : Code[10];
      ServiceDoc@1020015 : Boolean;
      InvoiceDoc@1020004 : Boolean;
      PaymentAmount@1020023 : Decimal;
      UUID@1020014 : Text[50];
    BEGIN
      InitPaymentXML33(XMLDoc,XMLCurrNode);
      with TempCustLedgerEntry do begin
        if TempCustomer."Currency Code" = '' then begin
          TempCustomer."Currency Code" := GLSetup."LCY Code";
          "Original Currency Factor" := 1.0;
        end;
        AddAttribute(XMLDoc,XMLCurrNode,'Version','3.3');
        AddAttribute(XMLDoc,XMLCurrNode,'Folio',"Document No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',DateTimeFirstReqSent);
        AddAttribute(XMLDoc,XMLCurrNode,'Sello',SignedString);
        AddAttribute(XMLDoc,XMLCurrNode,'NoCertificado',CertificateSerialNo);
        AddAttribute(XMLDoc,XMLCurrNode,'Certificado',Certificate);
        AddAttribute(XMLDoc,XMLCurrNode,'SubTotal','0');
        AddAttribute(XMLDoc,XMLCurrNode,'Moneda','XXX');
        AddAttribute(XMLDoc,XMLCurrNode,'Total','0');
        AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','P');// Pago
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo."SAT Postal Code");

        // Emisor
        WriteCompanyInfo33(XMLDoc,XMLCurrNode);

        // Receptor
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',TempCustomer."RFC No.");
        if SATUtilities.GetSATCountryCode(TempCustomer."Country/Region Code") <> 'MEX' then begin
          AddAttribute(XMLDoc,XMLCurrNode,'ResidenciaFiscal',SATUtilities.GetSATCountryCode(TempCustomer."Country/Region Code"));
          AddAttribute(XMLDoc,XMLCurrNode,'NumRegIdTrib',TempCustomer."VAT Registration No.");
        end;
        AddAttribute(XMLDoc,XMLCurrNode,'UsoCFDI','P01');

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveProdServ','84111506');
        AddAttribute(XMLDoc,XMLCurrNode,'NoIdentificacion','');
        AddAttribute(XMLDoc,XMLCurrNode,'Cantidad','1');
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad','ACT');
        AddAttribute(XMLDoc,XMLCurrNode,'Unidad','');
        AddAttribute(XMLDoc,XMLCurrNode,'Descripcion','Pago');
        AddAttribute(XMLDoc,XMLCurrNode,'ValorUnitario','0.00');
        AddAttribute(XMLDoc,XMLCurrNode,'Importe','0.00');
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Complemento
        AddElementCFDI(XMLCurrNode,'Complemento','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Pagos
        DocNameSpace := 'http://www.sat.gob.mx/Pagos';
        AddElementPago(XMLCurrNode,'Pagos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'xmlns:pago10','http://www.sat.gob.mx/Pagos');
        AddAttribute(XMLDoc,XMLCurrNode,'Version','1.0');

        // Pagos->Pago
        AddElementPago(XMLCurrNode,'Pago','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaPago',FormatAsDateTime("Posting Date",0T));
        AddAttribute(XMLDoc,XMLCurrNode,'FormaDePagoP',SATUtilities.GetSATPaymentTerm(TempCustomer."Payment Terms Code"));
        if TempCustomer."Currency Code" <> '' then begin
          AddAttribute(XMLDoc,XMLCurrNode,'MonedaP',TempCustomer."Currency Code");// *********NEW/CHANGED
          if (TempCustomer."Currency Code" <> 'MXN') and (TempCustomer."Currency Code" <> 'XXX') then
            AddAttribute(XMLDoc,XMLCurrNode,'TipoCambioP',FormatDecimal(1 / "Original Currency Factor",6));
        end;

        PaymentAmount := 0;
        if TempDetailedCustLedgEntry.FINDSET then
          repeat
            PaymentAmount := PaymentAmount + ABS(TempDetailedCustLedgEntry.Amount);
          until TempDetailedCustLedgEntry.NEXT = 0;
        AddAttribute(XMLDoc,XMLCurrNode,'Monto',FormatAmount(PaymentAmount));
        // AddAttribute(XMLDoc,XMLCurrNode,'Monto',FormatAmount(Amount));

        if (TempCustomer."Currency Code" <> 'MXN') and (TempCustomer."Currency Code" <> 'XXX') then
          if TempCustomer."Preferred Bank Account Code" <> '' then
            AddAttribute(XMLDoc,XMLCurrNode,'NomBancoOrdExt',TempCustomer."Preferred Bank Account Code")
          else begin
            CustomerBankAccount.RESET;
            CustomerBankAccount.SETRANGE("Customer No.",TempCustomer."No.");
            if CustomerBankAccount.FINDFIRST then // Find the first one...
              AddAttribute(XMLDoc,XMLCurrNode,'NomBancoOrdExt',CustomerBankAccount."Bank Account No.")
            else // Put in a blank number
              AddAttribute(XMLDoc,XMLCurrNode,'NomBancoOrdExt','');
          end;

        if TempDetailedCustLedgEntry.FINDSET then
          repeat
            // DoctoRelacionado
            ServiceDoc := false;
            InvoiceDoc := false;
            AddElementPago(XMLCurrNode,'DoctoRelacionado','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            CustLedgerEntry2.GET(TempDetailedCustLedgEntry."Cust. Ledger Entry No.");
            SourceCodeSetup.GET;
            if SourceCodeSetup."Service Management" <> '' then
              ServiceSourceCode := SourceCodeSetup."Service Management";
            if CustLedgerEntry2."Source Code" = ServiceSourceCode then
              ServiceDoc := true;
            if TempDetailedCustLedgEntry."Initial Document Type" = TempDetailedCustLedgEntry."Initial Document Type"::Invoice then
              InvoiceDoc := true;

            if ServiceDoc then
              if InvoiceDoc then
                ServiceInvoiceHeader.GET(CustLedgerEntry2."Document No.")
              else
                ServiceCrMemoHeader.GET(CustLedgerEntry2."Document No.")
            else
              if InvoiceDoc then
                SalesInvoiceHeader.GET(CustLedgerEntry2."Document No.")
              else
                SalesCrMemoHeader.GET(CustLedgerEntry2."Document No.");

            UUID := GetPaymentInvoiceUUID("Entry No.",InvoiceDoc);
            AddAttribute(XMLDoc,XMLCurrNode,'IdDocumento',UUID);// this needs to be changed

            AddAttribute(XMLDoc,XMLCurrNode,'Folio',CustLedgerEntry2."Document No.");
            if CustLedgerEntry2."Currency Code" <> '' then
              AddAttribute(XMLDoc,XMLCurrNode,'MonedaDR',CustLedgerEntry2."Currency Code")
            else
              AddAttribute(XMLDoc,XMLCurrNode,'MonedaDR',GLSetup."LCY Code");

            AddAttribute(XMLDoc,XMLCurrNode,'MetodoDePagoDR','PUE');
            AddAttribute(XMLDoc,XMLCurrNode,'NumParcialidad','1');
            if ServiceDoc then
              if InvoiceDoc then begin
                ServiceInvoiceHeader.CALCFIELDS("Amount Including VAT");
                SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
                AddAttribute(
                  XMLDoc,XMLCurrNode,'ImpSaldoAnt',FormatAmount(ServiceInvoiceHeader."Amount Including VAT" + SumOfStamped));
                AddAttribute(XMLDoc,XMLCurrNode,'ImpPagado',FormatAmount(TempDetailedCustLedgEntry.Amount));
                AddAttribute(XMLDoc,XMLCurrNode,'ImpSaldoInsoluto',
                  FormatAmount(ServiceInvoiceHeader."Amount Including VAT" + (TempDetailedCustLedgEntry.Amount + SumOfStamped)));
              end else begin
                ServiceCrMemoHeader.CALCFIELDS("Amount Including VAT");
                SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
                AddAttribute(
                  XMLDoc,XMLCurrNode,'ImpSaldoAnt',FormatAmountNoABS(ServiceCrMemoHeader."Amount Including VAT" + SumOfStamped));
                AddAttribute(XMLDoc,XMLCurrNode,'ImpPagado',FormatAmountNoABS(TempDetailedCustLedgEntry.Amount));
                AddAttribute(XMLDoc,XMLCurrNode,'ImpSaldoInsoluto',
                  FormatAmount(-1 * ServiceCrMemoHeader."Amount Including VAT" + (TempDetailedCustLedgEntry.Amount + SumOfStamped)));
              end;
            if not ServiceDoc then
              if InvoiceDoc then begin
                SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
                SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
                AddAttribute(
                  XMLDoc,XMLCurrNode,'ImpSaldoAnt',FormatAmount(SalesInvoiceHeader."Amount Including VAT" + SumOfStamped));
                AddAttribute(XMLDoc,XMLCurrNode,'ImpPagado',FormatAmount(TempDetailedCustLedgEntry.Amount));
                AddAttribute(XMLDoc,XMLCurrNode,'ImpSaldoInsoluto',
                  FormatAmount(SalesInvoiceHeader."Amount Including VAT" + (TempDetailedCustLedgEntry.Amount + SumOfStamped)));
              end else begin
                SalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
                SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
                AddAttribute(
                  XMLDoc,XMLCurrNode,'ImpSaldoAnt',FormatAmountNoABS(SalesCrMemoHeader."Amount Including VAT" + SumOfStamped));
                AddAttribute(XMLDoc,XMLCurrNode,'ImpPagado',FormatAmountNoABS(TempDetailedCustLedgEntry.Amount));
                AddAttribute(XMLDoc,XMLCurrNode,'ImpSaldoInsoluto',
                  FormatAmount(-1 * SalesCrMemoHeader."Amount Including VAT" + (TempDetailedCustLedgEntry.Amount + SumOfStamped)));
              end;
            XMLCurrNode := XMLCurrNode.ParentNode;
          until TempDetailedCustLedgEntry.NEXT = 0;

        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
      end;
    END;

    [External]
    PROCEDURE CreateOriginalPaymentStr33@1020064(VAR TempCustomer@1020001 : TEMPORARY Record Customer;VAR TempCustLedgerEntry@1020003 : TEMPORARY Record "Cust. Ledger Entry";VAR TempDetailedCustLedgEntry@1020010 : TEMPORARY Record "Detailed Cust. Ledg. Entry";DateTimeFirstReqSent@1020005 : Text;VAR TempBlob@1020002 : Record TempBlob);
    VAR
      SalesInvoiceHeader@1020012 : Record "Sales Invoice Header";
      CustLedgerEntry2@1020006 : Record "Cust. Ledger Entry";
      CustomerBankAccount@1020004 : Record "Customer Bank Account";
      ServiceInvoiceHeader@1020011 : Record "Service Invoice Header";
      SalesCrMemoHeader@1020017 : Record "Sales Cr.Memo Header";
      ServiceCrMemoHeader@1020016 : Record "Service Cr.Memo Header";
      BlobManagement@1020000 : Codeunit "Blob Management";
      SATUtilities@1020008 : Codeunit "SAT Utilities";
      SumOfStamped@1020007 : Decimal;
      ServiceSourceCode@1020013 : Code[10];
      ServiceDoc@1020014 : Boolean;
      InvoiceDoc@1020018 : Boolean;
      PaymentAmount@1020020 : Decimal;
      UUID@1020009 : Text[50];
    BEGIN
      with TempCustLedgerEntry do begin
        if TempCustomer."Currency Code" = '' then begin
          TempCustomer."Currency Code" := GLSetup."LCY Code";
          "Original Currency Factor" := 1.0;
        end;
        BlobManagement.Init;
        BlobManagement.Write('||3.3|'); // Version
        BlobManagement.Write("Document No." + '|');// Folio...PaymentNo.
        BlobManagement.Write(DateTimeFirstReqSent + '|'); // Fecha
        BlobManagement.Write(GetCertificateSerialNo + '|'); // NoCertificado
        BlobManagement.Write('0|');// Subtotal
        BlobManagement.Write('XXX|');// Monenda***notWritingOptional
        BlobManagement.Write('0|');// Total
        BlobManagement.Write('P|');// TipoDeComprobante
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."SAT Postal Code") + '|');// LugarExpedicion

        // Emisor
        GetCompanyInfo;
        BlobManagement.Write(CompanyInfo."RFC No." + '|');// RfcNoFromCompany
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|');// Nombre
        BlobManagement.Write(CompanyInfo."SAT Tax Regime Classification" + '|');// RegimenFiscal

        // Receptor
        BlobManagement.Write(TempCustomer."RFC No." + '|');// ReceptorCustomerRfcNo.
        if SATUtilities.GetSATCountryCode(TempCustomer."Country/Region Code") <> 'MEX' then begin
          BlobManagement.Write(SATUtilities.GetSATCountryCode(TempCustomer."Country/Region Code") + '|');// ResidenciaFiscal
          BlobManagement.Write(TempCustomer."VAT Registration No." + '|');// NumRegIdTrib
        end;
        BlobManagement.Write('P01|');// UsoCFDIHCtoP01fixedValueForPayment

        // Conceptos->Concepto
        BlobManagement.Write('84111506' + '|');// ClaveProdServ
        BlobManagement.Write('1' + '|');// Cantidad
        BlobManagement.Write('ACT' + '|');// ClaveUnidad
        BlobManagement.Write('Pago' + '|');// Descripcion
        BlobManagement.Write('0.00' + '|');// ValorUnitario
        BlobManagement.Write('0.00' + '|');// Importe

        // Pagos
        BlobManagement.Write('1.0' + '|');// VersionForPagoHCto1.0
        // Pagos->Pago
        BlobManagement.Write(FormatAsDateTime("Posting Date",0T) + '|');// FechaPagoSetToPD
        BlobManagement.Write(SATUtilities.GetSATPaymentTerm(TempCustomer."Payment Terms Code") + '|');// FormaDePagoP
        if TempCustomer."Currency Code" <> '' then
          BlobManagement.Write(TempCustomer."Currency Code" + '|');// MonedaP
        if (TempCustomer."Currency Code" <> 'MXN') and (TempCustomer."Currency Code" <> 'XXX') then
          BlobManagement.Write(FormatDecimal(1 / "Original Currency Factor",6) + '|'); // TipoCambioP

        PaymentAmount := 0;
        if TempDetailedCustLedgEntry.FINDSET then
          repeat
            PaymentAmount := PaymentAmount + ABS(TempDetailedCustLedgEntry.Amount);
          until TempDetailedCustLedgEntry.NEXT = 0;
        BlobManagement.Write(FormatAmount(PaymentAmount) + '|'); // Monto
        // BlobManagement.Write(FormatAmount(Amount) + '|'); // Monto

        if (TempCustomer."Currency Code" <> 'MXN') and (TempCustomer."Currency Code" <> 'XXX') then
          if TempCustomer."Preferred Bank Account Code" <> '' then
            BlobManagement.Write(TempCustomer."Preferred Bank Account Code" + '|')
          else begin
            CustomerBankAccount.RESET;
            CustomerBankAccount.SETRANGE("Customer No.",TempCustomer."No.");
            if CustomerBankAccount.FINDFIRST then // Find the first one...
              BlobManagement.Write(CustomerBankAccount."Bank Account No." + '|')
            else
              BlobManagement.Write('' + '|');
          end;

        if TempDetailedCustLedgEntry.FINDSET then
          repeat
            // DoctoRelacionado
            ServiceDoc := false;
            InvoiceDoc := false;
            CustLedgerEntry2.GET(TempDetailedCustLedgEntry."Cust. Ledger Entry No.");
            SourceCodeSetup.GET;
            if SourceCodeSetup."Service Management" <> '' then
              ServiceSourceCode := SourceCodeSetup."Service Management";
            if CustLedgerEntry2."Source Code" = ServiceSourceCode then
              ServiceDoc := true;
            if TempDetailedCustLedgEntry."Initial Document Type" = TempDetailedCustLedgEntry."Initial Document Type"::Invoice then
              InvoiceDoc := true;

            if ServiceDoc then
              if InvoiceDoc then
                ServiceInvoiceHeader.GET(CustLedgerEntry2."Document No.")
              else // Has to be a credit memo
                ServiceCrMemoHeader.GET(CustLedgerEntry2."Document No.")
            else
              if InvoiceDoc then
                SalesInvoiceHeader.GET(CustLedgerEntry2."Document No.")
              else
                SalesCrMemoHeader.GET(CustLedgerEntry2."Document No.");
            UUID := GetPaymentInvoiceUUID("Entry No.",InvoiceDoc);

            BlobManagement.Write(UUID + '|');// IdDocumento
            BlobManagement.Write(CustLedgerEntry2."Document No." + '|');// Folio
            if CustLedgerEntry2."Currency Code" <> '' then
              BlobManagement.Write(CustLedgerEntry2."Currency Code" + '|') // MonedaDR
            else
              BlobManagement.Write(GLSetup."LCY Code" + '|'); // MonedaDR
            BlobManagement.Write('PUE|');// MotodoDePagoDr
            BlobManagement.Write('1|');// NumParcialidad

            if ServiceDoc then
              if InvoiceDoc then begin
                ServiceInvoiceHeader.CALCFIELDS("Amount Including VAT");
                SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
                BlobManagement.Write(FormatAmount(ServiceInvoiceHeader."Amount Including VAT" + SumOfStamped) + '|');// ImpSaldoAnt
                BlobManagement.Write(FormatAmount(TempDetailedCustLedgEntry.Amount) + '|'); // ImpPagado
                BlobManagement.Write(
                  FormatAmount(ServiceInvoiceHeader."Amount Including VAT" + (TempDetailedCustLedgEntry.Amount + SumOfStamped)) + '|');// ImpSaldoInsoluto
              end else begin
                ServiceCrMemoHeader.CALCFIELDS("Amount Including VAT");
                SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
                BlobManagement.Write(FormatAmountNoABS(ServiceCrMemoHeader."Amount Including VAT" + SumOfStamped) + '|');// ImpSaldoAnt
                BlobManagement.Write(FormatAmountNoABS(TempDetailedCustLedgEntry.Amount) + '|'); // ImpPagado
                BlobManagement.Write(
                  FormatAmount(
                    -1 * ServiceCrMemoHeader."Amount Including VAT" + (TempDetailedCustLedgEntry.Amount + SumOfStamped)) + '|');// ImpSaldoInsoluto
              end;
            if not ServiceDoc then
              if InvoiceDoc then begin
                SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
                SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
                BlobManagement.Write(FormatAmount(SalesInvoiceHeader."Amount Including VAT" + SumOfStamped) + '|');// ImpSaldoAnt
                BlobManagement.Write(FormatAmount(TempDetailedCustLedgEntry.Amount) + '|'); // ImpPagado
                BlobManagement.Write(
                  FormatAmount(SalesInvoiceHeader."Amount Including VAT" + (TempDetailedCustLedgEntry.Amount + SumOfStamped)) + '|');// ImpSaldoInsoluto
              end else begin
                SalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
                SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
                BlobManagement.Write(FormatAmountNoABS(SalesCrMemoHeader."Amount Including VAT" + SumOfStamped) + '|');// ImpSaldoAnt
                BlobManagement.Write(FormatAmountNoABS(TempDetailedCustLedgEntry.Amount) + '|'); // ImpPagado
                BlobManagement.Write(
                  FormatAmount(
                    -1 * SalesCrMemoHeader."Amount Including VAT" + (TempDetailedCustLedgEntry.Amount + SumOfStamped)) + '|');// ImpSaldoInsoluto
              end;
          until TempDetailedCustLedgEntry.NEXT = 0;
        // Need one more pipe character at end of built string...
        BlobManagement.WriteAllowOneCharacter('|');
        BlobManagement.Get(TempBlob);
        // FileManagement.BLOBExport(TempBlob,'OriginalStringPayment.xml',TRUE);
      end;
    END;

    LOCAL PROCEDURE InitPaymentXML33@1020065(VAR XMLDoc@1020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLDOMManagement@1020001 : Codeunit "XML DOM Management";
    BEGIN
      // Create instance
      if ISNULL(XMLDoc) then
        XMLDoc := XMLDoc.XmlDocument;

      // Root element
      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> ' +
        '<cfdi:Comprobante xmlns:cfdi="http://www.sat.gob.mx/cfd/3" xmlns="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
        'xsi:schemaLocation="http://www.sat.gob.mx/cfd/3 http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv33.xsd' +
        ' http://www.sat.gob.mx/Pagos http://www.sat.gob.mx/sitio_internet/cfd/Pagos/Pagos10.xsd" ' +
        'xmlns:pago10="http://www.sat.gob.mx/Pagos"></cfdi:Comprobante>',
        XMLDoc);

      XMLCurrNode := XMLDoc.DocumentElement;
    END;

    LOCAL PROCEDURE GetPaymentInvoiceUUID@1020067(EntryNumber@1020000 : Integer;InvoiceDoc@1020004 : Boolean) : Text[50];
    VAR
      CustLedgerEntry2@1020002 : Record "Cust. Ledger Entry";
      DetailedCustLedgEntry@1020003 : Record "Detailed Cust. Ledg. Entry";
      SalesInvoiceHeader@1020001 : Record "Sales Invoice Header";
      ServiceInvoiceHeader@1020006 : Record "Service Invoice Header";
      SalesCrMemoHeader@1020009 : Record "Sales Cr.Memo Header";
      ServiceCrMemoHeader@1020008 : Record "Service Cr.Memo Header";
      ServiceSourceCode@1020005 : Code[10];
    BEGIN
      DetailedCustLedgEntry.SETRANGE("Applied Cust. Ledger Entry No.",EntryNumber);
      if InvoiceDoc then
        DetailedCustLedgEntry.SETFILTER("Initial Document Type",'=%1',DetailedCustLedgEntry."Initial Document Type"::Invoice)
      else
        DetailedCustLedgEntry.SETFILTER("Initial Document Type",'=%1',DetailedCustLedgEntry."Initial Document Type"::"Credit Memo");

      if DetailedCustLedgEntry.FINDFIRST then begin
        CustLedgerEntry2.GET(DetailedCustLedgEntry."Cust. Ledger Entry No.");
        SourceCodeSetup.GET;
        if SourceCodeSetup."Service Management" <> '' then
          ServiceSourceCode := SourceCodeSetup."Service Management";

        if CustLedgerEntry2."Source Code" = ServiceSourceCode then begin
          if InvoiceDoc then begin
            ServiceInvoiceHeader.GET(CustLedgerEntry2."Document No.");
            exit(ServiceInvoiceHeader."Fiscal Invoice Number PAC");
          end;
          if not InvoiceDoc then begin
            ServiceCrMemoHeader.GET(CustLedgerEntry2."Document No.");
            exit(ServiceCrMemoHeader."Fiscal Invoice Number PAC");
          end;
        end;

        if InvoiceDoc then begin
          SalesInvoiceHeader.GET(CustLedgerEntry2."Document No.");
          exit(SalesInvoiceHeader."Fiscal Invoice Number PAC");
        end;
        if not InvoiceDoc then begin
          SalesCrMemoHeader.GET(CustLedgerEntry2."Document No.");
          exit(SalesCrMemoHeader."Fiscal Invoice Number PAC");
        end;
      end;
      exit('');
    END;

    PROCEDURE GetUUIDFromOriginalPrepayment@1020011(SalesInvoiceHeader@1020000 : Record "Sales Invoice Header";VAR SalesInvoiceNumber@1020002 : Code[20]) : Text[50];
    VAR
      SalesInvoiceHeader2@1020001 : Record "Sales Invoice Header";
    BEGIN
      // First, get the common sales order number
      SalesInvoiceHeader2.RESET;
      SalesInvoiceHeader2.SETFILTER("Prepayment Order No.",'=%1',SalesInvoiceHeader."Order No.");
      if SalesInvoiceHeader2.FINDFIRST then begin // We have the prepayment invoice
        SalesInvoiceNumber := SalesInvoiceHeader2."No.";
        exit(SalesInvoiceHeader2."Fiscal Invoice Number PAC");
      end;
      exit('');
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqPayment@1020068(VAR CustLedgerEntry@1020000 : Record "Cust. Ledger Entry") : Text[50];
    BEGIN
      if CustLedgerEntry."Date/Time First Req. Sent" <> '' then
        exit(CustLedgerEntry."Date/Time First Req. Sent");

      CustLedgerEntry."Date/Time First Req. Sent" := FormatAsDateTime(CustLedgerEntry."Document Date",TIME);
      exit(CustLedgerEntry."Date/Time First Req. Sent");
    END;

    LOCAL PROCEDURE AddElementPago@1020114(VAR XMLNode@1000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1000003 : Text;NodeText@1000002 : Text;NameSpace@1000001 : Text;VAR CreatedXMLNode@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      NewChildNode@1000005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NodeName := 'pago10:' + NodeName;
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element',NodeName,NameSpace);
      if ISNULL(NewChildNode) then
        exit(false);

      if NodeText <> '' then
        NewChildNode.Value := RemoveInvalidChars(NodeText);
      XMLNode.AppendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;
      exit(true);
    END;

    LOCAL PROCEDURE IsInvoicePrepaymentSettle@1020070(InvoiceNumber@1020000 : Code[20];VAR AdvanceAmount@1020002 : Decimal) : Boolean;
    VAR
      SalesInvoiceLine@1020001 : Record "Sales Invoice Line";
    BEGIN
      SalesInvoiceLine.RESET;
      SalesInvoiceLine.SETFILTER("Document No.",'=%1',InvoiceNumber);
      if SalesInvoiceLine.FINDSET then
        repeat
          if SalesInvoiceLine."Prepayment Line" then begin
            AdvanceAmount := SalesInvoiceLine."Amount Including VAT";
            exit(true);
          end;
        until SalesInvoiceLine.NEXT = 0;
      exit(false);
    END;

    LOCAL PROCEDURE MapServiceTypeToTempDocType@1020025(Type@1020000 : '" ",Item,Resource,Cost,"G/L Account"') : Integer;
    VAR
      TrueType@1020001 : '" ","G/L Account",Item,Resource,"Fixed Asset","Charge (Item)"';
    BEGIN
      case Type of
        Type::Item:
          exit(TrueType::Item);
        Type::Resource:
          exit(TrueType::Resource);
        Type::"G/L Account":
          exit(TrueType::"G/L Account");
        else
          exit(TrueType::" ");
      end;
    END;

    LOCAL PROCEDURE GetAdvanceAmountFromSettledInvoice@1020093(SalesInvoiceHeader@1020000 : Record "Sales Invoice Header") : Decimal;
    VAR
      SalesInvoiceLine@1020001 : Record "Sales Invoice Line";
    BEGIN
      SalesInvoiceLine.RESET;
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      SalesInvoiceLine.SETFILTER("Prepayment Line",'=1');
      if SalesInvoiceLine.FINDFIRST then
        exit(ABS(SalesInvoiceLine."Amount Including VAT"));
    END;

    LOCAL PROCEDURE GetCurrencyDecimalPlaces@1020057(CurrencyCode@1020000 : Code[10]) : Integer;
    BEGIN
      case CurrencyCode of
        'CLF':
          exit(4);
        'BHD','IQD','JOD','KWD','LYD','OMR','TND','CLF':
          exit(3);
        'BIF','BYR','CLP','DJF','GNF','ISK','JPY','KMF','KRW','PYG','RWF',
        'UGX','UYI','VND','VUV','XAF','XAG','XAU','XBA','XBB','XBC','XBD',
        'XDR','XOF','XPD','XPF','XPT','XSU','XTS','XUA','XXX':
          exit(0);
        else
          exit(2);
      end;
    END;

    LOCAL PROCEDURE GetTaxPercentage@1310002(Amount@1310000 : Decimal;Tax@1310001 : Decimal) : Decimal;
    BEGIN
      exit(ROUND(Tax / Amount,0.01,'=') * 100);
    END;

    BEGIN
    END.
  }
}

