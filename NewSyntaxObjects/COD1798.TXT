OBJECT Codeunit 1798 Data Migration Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160711.53T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    TableNo="Job Queue Entry";
    OnRun=VAR
            DataMigrationError@1002 : Record "Data Migration Error";
            DataMigrationStatus@1000 : Record "Data Migration Status";
            Retry@1001 : Boolean;
          BEGIN
            EnableDataMigrationNotificationForAllUsers;
            DataMigrationStatus.GET("Record ID to Process");
            DataMigrationStatus.SETRANGE("Migration Type",DataMigrationStatus."Migration Type");
            Retry := "Parameter String" = RetryTxt;

            OnBeforeMigrationStarted(DataMigrationStatus,Retry);

            if not Retry then begin
              DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::Pending);
              DataMigrationFacade.OnFillStagingTables;
              // Close the transaction here otherwise the CODEUNIT.RUN cannot be invoked
              COMMIT;
            end else
              DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::"Completed with Errors");

            // migrate GL accounts (delete the existing ones on a first migration and if GL accounts are migrated)
            DataMigrationStatus.SETRANGE("Destination Table ID",DATABASE::"G/L Account");
            if DataMigrationStatus.FINDFIRST and not Retry then
              if not CODEUNIT.RUN(CODEUNIT::"Data Migration Del G/L Account") then
                DataMigrationError.CreateEntryNoStagingTable(DataMigrationStatus."Migration Type",DATABASE::"G/L Account");

            if CheckAbortRequestedAndMigrateEntity(
                 DataMigrationStatus,DATABASE::"G/L Account",CODEUNIT::"GL Acc. Data Migration Facade",Retry)
            then
              exit;

            // migrate customers
            if CheckAbortRequestedAndMigrateEntity(DataMigrationStatus,DATABASE::Customer,CODEUNIT::"Customer Data Migration Facade",Retry) then
              exit;

            // migrate vendor
            if CheckAbortRequestedAndMigrateEntity(DataMigrationStatus,DATABASE::Vendor,CODEUNIT::"Vendor Data Migration Facade",Retry) then
              exit;

            // migrate items
            if CheckAbortRequestedAndMigrateEntity(DataMigrationStatus,DATABASE::Item,CODEUNIT::"Item Data Migration Facade",Retry) then
              exit;

            // migrate any other tables if any
            CheckAbortAndMigrateRemainingEntities(DataMigrationStatus,Retry);

            OnAfterMigrationFinished(DataMigrationStatus,false,StartTime,Retry);
          END;

  }
  CODE
  {
    VAR
      DataMigrationStatusFacade@1000 : Codeunit "Data Migration Status Facade";
      DataMigrationFacade@1019 : Codeunit "Data Migration Facade";
      AbortRequested@1001 : Boolean;
      StartTime@1002 : DateTime;
      RetryTxt@1003 : TextConst '@@@={Locked};ENU=Retry';
      DataMigrationNotCompletedQst@1005 : TextConst '@@@=%1 is the caption for Data Migration Overview;ENU=A data migration is already in progress. To see the status of the migration, go to the %1 page. Do you want to do that now?';
      CustomerTableNotEmptyErr@1004 : TextConst '@@@="%1 product name ";ENU=The migration has stopped because we found some customers in %1. You must delete them and then restart the migration.';
      ItemTableNotEmptyErr@1006 : TextConst '@@@="%1 product name ";ENU=The migration has stopped because we found some items in %1. You must delete them and then restart the migration.';
      VendorTableNotEmptyErr@1007 : TextConst '@@@="%1 product name ";ENU=The migration has stopped because we found some vendors in %1. You must delete them and then restart the migration.';
      DataMigrationInProgressMsg@1008 : TextConst '@@@="%1 product name ";ENU=We''re migrating data to %1.';
      DataMigrationCompletedWithErrosMsg@1015 : TextConst '@@@=%1 Data Migration Overview page;ENU=Data migration has stopped due to errors. Go to the %1 page to fix them.';
      DataMigrationEntriesToPostMsg@1018 : TextConst 'ENU=Data migration is complete, however, there are still a few things to do. Go to the Data Migration Overview page for more information.';
      DataMigrationFinishedMsg@1010 : TextConst 'ENU=Yes! The data you chose was successfully migrated.';
      DataMigrationNotificationNameTxt@1011 : TextConst 'ENU=Data migration notification';
      DataMigrationNotificationDescTxt@1012 : TextConst 'ENU=Show a warning when data migration is either in progress or has completed.';
      DontShowTxt@1013 : TextConst 'ENU=Don''t show again';
      MigrationStatus@1014 : 'Pending,"In Progress","Completed with errors",Completed,Stopped,Failed,"Not Started"';
      GoThereNowTxt@1016 : TextConst 'ENU=Go there now';
      MoreInfoTxt@1017 : TextConst 'ENU=Learn more';
      DataMigrationHelpTopicURLTxt@1009 : TextConst '@@@=Locked;ENU="https://go.microsoft.com/fwlink/?linkid=859445"';
      CustomerContactNotificationNameTxt@1020 : TextConst 'ENU=Show a suggestion to create contacts for newly created customers.';
      VendorContactNotificationNameTxt@1021 : TextConst 'ENU=Show a suggestion to create contacts for newly created vendors.';
      CustContactNotificationDescTxt@1022 : TextConst 'ENU=Show a suggestion to create contacts for customers.';
      VendContactNotificationDescTxt@1023 : TextConst 'ENU=Show a suggestion to create contacts for vendors.';

    LOCAL PROCEDURE HandleEntityMigration@25(VAR DataMigrationStatus@1003 : Record "Data Migration Status";BaseAppMigrationCodeunitToRun@1000 : Integer;Retry@1004 : Boolean);
    VAR
      DataMigrationError@1001 : Record "Data Migration Error";
    BEGIN
      if DataMigrationStatus.FINDFIRST then
        if DataMigrationStatus."Source Staging Table ID" > 0 then
          StagingTableEntityMigration(DataMigrationStatus,BaseAppMigrationCodeunitToRun,Retry)
        else begin
          DataMigrationStatusFacade.UpdateLineStatus(DataMigrationStatus."Migration Type",
            DataMigrationStatus."Destination Table ID",DataMigrationStatus.Status::"In Progress");
          DataMigrationError.ClearEntryNoStagingTable(DataMigrationStatus."Migration Type",
            DataMigrationStatus."Destination Table ID");
          COMMIT; // save the dashboard before calling the extension codeunit
          if CODEUNIT.RUN(DataMigrationStatus."Migration Codeunit To Run") then begin
            DataMigrationStatus.GET(DataMigrationStatus."Migration Type",DataMigrationStatus."Destination Table ID");
            if DataMigrationStatus."Migrated Number" = 0 then
              DataMigrationStatusFacade.IncrementMigratedRecordCount(
                DataMigrationStatus."Migration Type",DataMigrationStatus."Destination Table ID",DataMigrationStatus."Total Number");
            DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::"In Progress");
            if DataMigrationStatus.FINDSET then
              DataMigrationStatusFacade.UpdateLineStatus(
                DataMigrationStatus."Migration Type",DataMigrationStatus."Destination Table ID",DataMigrationStatus.Status::Completed);
          end else begin
            DataMigrationError.CreateEntryNoStagingTable(DataMigrationStatus."Migration Type",
              DataMigrationStatus."Destination Table ID");
            DataMigrationStatusFacade.UpdateLineStatus(
              DataMigrationStatus."Migration Type",
              DataMigrationStatus."Destination Table ID",
              DataMigrationStatus.Status::Failed);
          end;
        end;
    END;

    LOCAL PROCEDURE StagingTableEntityMigration@39(DataMigrationStatus@1003 : Record "Data Migration Status";BaseAppCodeunitToRun@1000 : Integer;Retry@1008 : Boolean);
    VAR
      TempDataMigrationParametersBatch@1004 : TEMPORARY Record "Data Migration Parameters";
      DummyDataMigrationStatus@1005 : Record "Data Migration Status";
      DataMigrationError@1006 : Record "Data Migration Error";
      StagingTableRecRef@1002 : RecordRef;
      Count@1001 : Integer;
    BEGIN
      StagingTableRecRef.OPEN(DataMigrationStatus."Source Staging Table ID");
      if StagingTableRecRef.FINDSET then begin
        DataMigrationStatusFacade.UpdateLineStatus(DataMigrationStatus."Migration Type",
          DataMigrationStatus."Destination Table ID",DummyDataMigrationStatus.Status::"In Progress");
        repeat
          if AbortRequested then
            exit;

          DataMigrationError.RESET;
          if not Retry or
             (Retry and
              DataMigrationError.FindEntry(DataMigrationStatus."Migration Type",
                DataMigrationStatus."Destination Table ID",StagingTableRecRef.RECORDID) and
              DataMigrationError."Scheduled For Retry" = true)
          then begin
            Count += 1;

            TempDataMigrationParametersBatch.INIT;
            TempDataMigrationParametersBatch.Key := Count;
            TempDataMigrationParametersBatch."Migration Type" := DataMigrationStatus."Migration Type";
            TempDataMigrationParametersBatch."Staging Table Migr. Codeunit" := DataMigrationStatus."Migration Codeunit To Run";
            TempDataMigrationParametersBatch."Staging Table RecId To Process" := StagingTableRecRef.RECORDID;
            TempDataMigrationParametersBatch.INSERT;

            DataMigrationError.ClearEntry(DataMigrationStatus."Migration Type",
              DataMigrationStatus."Destination Table ID",
              StagingTableRecRef.RECORDID);
          end;
          if Count = 100 then begin
            // try to process batch
            COMMIT; // to save the transaction that has deleted the errors
            ProcessBatch(DataMigrationStatus,BaseAppCodeunitToRun,TempDataMigrationParametersBatch,Count);
            Count := 0;
            TempDataMigrationParametersBatch.DELETEALL;
          end;
        until StagingTableRecRef.NEXT = 0;

        if AbortRequested then
          exit;

        if Count > 0 then begin
          COMMIT; // to save the transaction that has deleted the errors
          ProcessBatch(DataMigrationStatus,BaseAppCodeunitToRun,TempDataMigrationParametersBatch,Count);
        end;
      end;

      DataMigrationStatus.CALCFIELDS("Error Count");
      if DataMigrationStatus."Error Count" = 0 then
        DataMigrationStatusFacade.UpdateLineStatus(
          DataMigrationStatus."Migration Type",DataMigrationStatus."Destination Table ID",
          DummyDataMigrationStatus.Status::Completed)
      else
        DataMigrationStatusFacade.UpdateLineStatus(
          DataMigrationStatus."Migration Type",DataMigrationStatus."Destination Table ID",
          DummyDataMigrationStatus.Status::"Completed with Errors");
    END;

    LOCAL PROCEDURE ProcessBatch@9(DataMigrationStatus@1007 : Record "Data Migration Status";BaseAppCodeunitToRun@1000 : Integer;VAR TempDataMigrationParametersBatch@1005 : TEMPORARY Record "Data Migration Parameters";Count@1002 : Integer);
    VAR
      TempDataMigrationParametersSingle@1006 : TEMPORARY Record "Data Migration Parameters";
      DataMigrationError@1003 : Record "Data Migration Error";
    BEGIN
      // try to process batch
      if CODEUNIT.RUN(BaseAppCodeunitToRun,TempDataMigrationParametersBatch) then begin
        // the batch was processed fine, update the dashboard
        DataMigrationStatusFacade.IncrementMigratedRecordCount(DataMigrationStatus."Migration Type",
          DataMigrationStatus."Destination Table ID",Count);
        COMMIT; // save the dashboard status before calling the next Codeunit.RUN
      end else begin
        // the batch processing failed
        TempDataMigrationParametersBatch.FINDSET;
        repeat
          // process one by one
          TempDataMigrationParametersSingle.DELETEALL;
          TempDataMigrationParametersSingle.INIT;
          TempDataMigrationParametersSingle.TRANSFERFIELDS(TempDataMigrationParametersBatch);
          TempDataMigrationParametersSingle.INSERT;

          if CODEUNIT.RUN(BaseAppCodeunitToRun,TempDataMigrationParametersSingle) then begin
            // single record processing succeeded, update dashboard
            DataMigrationStatusFacade.IncrementMigratedRecordCount(DataMigrationStatus."Migration Type",
              DataMigrationStatus."Destination Table ID",1);
            COMMIT; // save the dashboard status before calling the next Codeunit.RUN
          end else begin
            DataMigrationError.CreateEntry(DataMigrationStatus."Migration Type",
              DataMigrationStatus."Destination Table ID",TempDataMigrationParametersSingle."Staging Table RecId To Process");
            COMMIT; // save the new errors discovered
          end;
        until TempDataMigrationParametersBatch.NEXT = 0;
      end;
    END;

    PROCEDURE RunStagingTableMigrationCodeunit@15(CodeunitToRun@1000 : Integer;StagingTableEntityVariant@1001 : Variant) : Boolean;
    BEGIN
      exit(CODEUNIT.RUN(CodeunitToRun,StagingTableEntityVariant));
    END;

    [EventSubscriber(Page,1799,OnRequestAbort)]
    LOCAL PROCEDURE OnRequestAbortSubscriber@1();
    BEGIN
      AbortRequested := true;
    END;

    LOCAL PROCEDURE CheckAbortRequestedAndMigrateEntity@5(VAR DataMigrationStatus@1000 : Record "Data Migration Status";DestinationTableId@1001 : Integer;BaseAppCodeunitToRun@1002 : Integer;ReRun@1003 : Boolean) : Boolean;
    BEGIN
      if AbortRequested then begin
        DataMigrationStatus.RESET;
        DataMigrationStatus.SETRANGE("Migration Type",DataMigrationStatus."Migration Type");
        SetAbortStatus(DataMigrationStatus);
        OnAfterMigrationFinished(DataMigrationStatus,true,StartTime,ReRun);
        exit(true);
      end;

      DataMigrationStatus.SETRANGE("Destination Table ID",DestinationTableId);
      HandleEntityMigration(DataMigrationStatus,BaseAppCodeunitToRun,ReRun);
    END;

    LOCAL PROCEDURE CheckAbortAndMigrateRemainingEntities@22(DataMigrationStatus@1000 : Record "Data Migration Status";Retry@1001 : Boolean);
    BEGIN
      if AbortRequested then begin
        DataMigrationStatus.RESET;
        DataMigrationStatus.SETRANGE("Migration Type",DataMigrationStatus."Migration Type");
        SetAbortStatus(DataMigrationStatus);
        OnAfterMigrationFinished(DataMigrationStatus,true,StartTime,Retry);
        exit;
      end;

      DataMigrationStatus.SETFILTER("Destination Table ID",STRSUBSTNO('<>%1&<>%2&<>%3&<>%4',
          DATABASE::Item,
          DATABASE::Customer,
          DATABASE::"G/L Account",
          DATABASE::Vendor));
      DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::Pending);
      if DataMigrationStatus.FINDSET then
        repeat
          HandleEntityMigration(DataMigrationStatus,DataMigrationStatus."Migration Codeunit To Run",Retry);
        until DataMigrationStatus.NEXT = 0;
    END;

    PROCEDURE SetStartTime@11(Value@1000 : DateTime);
    BEGIN
      StartTime := Value;
    END;

    PROCEDURE SetAbortStatus@3(VAR DataMigrationStatus@1000 : Record "Data Migration Status");
    BEGIN
      DataMigrationStatus.SETFILTER(
        Status,STRSUBSTNO('%1|%2',DataMigrationStatus.Status::"In Progress",DataMigrationStatus.Status::Pending));
      if DataMigrationStatus.FINDSET then
        repeat
          DataMigrationStatus.Status := DataMigrationStatus.Status::Stopped;
          DataMigrationStatus.MODIFY(true);
        until DataMigrationStatus.NEXT = 0;
    END;

    [Integration(TRUE)]
    PROCEDURE OnBeforeMigrationStarted@2(VAR DataMigrationStatus@1000 : Record "Data Migration Status";Retry@1001 : Boolean);
    BEGIN
    END;

    [Integration]
    PROCEDURE OnAfterMigrationFinished@12(VAR DataMigrationStatus@1000 : Record "Data Migration Status";WasAborted@1001 : Boolean;StartTime@1002 : DateTime;Retry@1003 : Boolean);
    BEGIN
    END;

    [EventSubscriber(Codeunit,1798,OnBeforeMigrationStarted,"",Skip,Skip)]
    LOCAL PROCEDURE OnBeforeMigrationStartedSubscriber@8(VAR Sender@1000 : Codeunit "Data Migration Mgt.";VAR DataMigrationStatus@1001 : Record "Data Migration Status";Retry@1002 : Boolean);
    VAR
      Message@1003 : Text;
    BEGIN
      Sender.SetStartTime(CURRENTDATETIME);
      if Retry then
        Message := 'Migration started.'
      else
        Message := 'Migration restarted.';
      SENDTRACETAG(
        '00001I7',
        STRSUBSTNO('Data Migration (%1)',DataMigrationStatus."Migration Type"),
        VERBOSITY::Normal,
        Message,
        DATACLASSIFICATION::SystemMetadata);
    END;

    [EventSubscriber(Codeunit,1798,OnAfterMigrationFinished,"",Skip,Skip)]
    LOCAL PROCEDURE OnAfterMigrationFinishedSubscriber@10(VAR DataMigrationStatus@1000 : Record "Data Migration Status";WasAborted@1001 : Boolean;StartTime@1003 : DateTime;Retry@1006 : Boolean);
    VAR
      TotalNumberOfRecords@1002 : Integer;
      Message@1004 : Text;
      MigrationDurationAsInt@1005 : BigInteger;
    BEGIN
      DataMigrationStatus.SETRANGE("Destination Table ID",DATABASE::"G/L Account");
      if DataMigrationStatus.FINDFIRST then
        TotalNumberOfRecords += DataMigrationStatus."Total Number";

      DataMigrationStatus.SETRANGE("Destination Table ID",DATABASE::Item);
      if DataMigrationStatus.FINDFIRST then
        TotalNumberOfRecords += DataMigrationStatus."Total Number";

      DataMigrationStatus.SETRANGE("Destination Table ID",DATABASE::Vendor);
      if DataMigrationStatus.FINDFIRST then
        TotalNumberOfRecords += DataMigrationStatus."Total Number";

      DataMigrationStatus.SETRANGE("Destination Table ID",DATABASE::Customer);
      if DataMigrationStatus.FINDFIRST then
        TotalNumberOfRecords += DataMigrationStatus."Total Number";

      MigrationDurationAsInt := CURRENTDATETIME - StartTime;
      if WasAborted then
        Message := STRSUBSTNO('Migration aborted after %1',MigrationDurationAsInt)
      else
        Message := STRSUBSTNO('The migration of %1 records in total took: %2.',TotalNumberOfRecords,MigrationDurationAsInt);

      if Retry then
        Message += '(Migration was restarted)';

      SENDTRACETAG(
        '00001DA',
        STRSUBSTNO('Data Migration (%1)',DataMigrationStatus."Migration Type"),
        VERBOSITY::Normal,
        Message,
        DATACLASSIFICATION::SystemMetadata);
    END;

    [External]
    PROCEDURE StartMigration@4(MigrationType@1000 : Text[250];Retry@1001 : Boolean);
    VAR
      DataMigrationError@1006 : Record "Data Migration Error";
      DataMigrationStatus@1004 : Record "Data Migration Status";
      JobQueueEntry@1003 : Record "Job Queue Entry";
      JobParameters@1005 : Text[250];
      StartNewSession@1002 : Boolean;
      CheckExistingData@1007 : Boolean;
    BEGIN
      CheckMigrationInProgress(Retry);

      StartNewSession := true;
      CheckExistingData := true;
      OnBeforeStartMigration(StartNewSession,CheckExistingData);

      if CheckExistingData then
        CheckDataAlreadyExist(MigrationType,Retry);

      DataMigrationStatus.RESET;
      DataMigrationStatus.SETRANGE("Migration Type",MigrationType);
      if not Retry then begin
        DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::Pending);
        if DataMigrationStatus.FINDSET then
          repeat
            DataMigrationError.SETRANGE("Migration Type",MigrationType);
            DataMigrationError.SETRANGE("Destination Table ID",DataMigrationStatus."Destination Table ID");
            DataMigrationError.DELETEALL;
          until DataMigrationStatus.NEXT = 0;
      end else
        DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::"Completed with Errors");

      COMMIT; // commit the dashboard changes so the OnRun call on the migration codeunit will not fail because of this uncommited transaction

      if Retry then
        JobParameters := RetryTxt;
      DataMigrationStatus.FINDFIRST;
      if StartNewSession then
        // run the migration in a background session
        JobQueueEntry.ScheduleJobQueueEntryWithParameters(CODEUNIT::"Data Migration Mgt.",
          DataMigrationStatus.RECORDID,JobParameters)
      else begin
        JobQueueEntry."Record ID to Process" := DataMigrationStatus.RECORDID;
        JobQueueEntry."Parameter String" := JobParameters;
        CODEUNIT.RUN(CODEUNIT::"Data Migration Mgt.",JobQueueEntry);
      end;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeStartMigration@6(VAR StartNewSession@1000 : Boolean;VAR CheckExistingData@1001 : Boolean);
    BEGIN
    END;

    [External]
    PROCEDURE CheckMigrationInProgress@13(Retry@1000 : Boolean);
    VAR
      JobQueueEntry@1002 : Record "Job Queue Entry";
      DataMigrationOverview@1003 : Page "Data Migration Overview";
      Status@1001 : Option;
    BEGIN
      Status := GetMigrationStatus;

      JobQueueEntry.SETRANGE("Object ID to Run",CODEUNIT::"Data Migration Mgt.");
      JobQueueEntry.SETFILTER(Status,'%1|%2|%3',
        JobQueueEntry.Status::"In Process",
        JobQueueEntry.Status::"On Hold",
        JobQueueEntry.Status::Ready);
      if (Status = MigrationStatus::Pending) and not JobQueueEntry.FINDFIRST then
        exit;

      if (Status in [MigrationStatus::"Completed with errors",
                     MigrationStatus::"In Progress",
                     MigrationStatus::Pending]) and not Retry
      then begin
        if CONFIRM(STRSUBSTNO(DataMigrationNotCompletedQst,DataMigrationOverview.CAPTION)) then
          DataMigrationOverview.RUN;
        ERROR('');
      end;
    END;

    [External]
    PROCEDURE GetMigrationStatus@20() : Integer;
    VAR
      DataMigrationStatus@1001 : Record "Data Migration Status";
    BEGIN
      if DataMigrationStatus.ISEMPTY then
        exit(MigrationStatus::"Not Started");

      DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::"In Progress");
      if DataMigrationStatus.FINDFIRST then
        exit(MigrationStatus::"In Progress");

      DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::Stopped);
      if DataMigrationStatus.FINDFIRST then
        exit(MigrationStatus::Stopped);

      DataMigrationStatus.SETFILTER(Status,'=%1',DataMigrationStatus.Status::Failed);
      if DataMigrationStatus.FINDFIRST then
        exit(MigrationStatus::Failed);

      DataMigrationStatus.SETRANGE(Status,DataMigrationStatus.Status::"Completed with Errors");
      if DataMigrationStatus.FINDFIRST then
        exit(MigrationStatus::"Completed with errors");

      DataMigrationStatus.SETFILTER(Status,'<>%1',DataMigrationStatus.Status::Completed);
      if not DataMigrationStatus.FINDFIRST then
        exit(MigrationStatus::Completed);

      exit(MigrationStatus::Pending);
    END;

    LOCAL PROCEDURE CheckDataAlreadyExist@7(MigrationType@1001 : Text[250];Retry@1000 : Boolean);
    BEGIN
      if Retry then
        exit;

      // check tables are clear. For GL accounts, we delete them automatically
      ThrowErrorIfTableNotEmpty(MigrationType,DATABASE::Customer,STRSUBSTNO(CustomerTableNotEmptyErr,PRODUCTNAME.SHORT));
      ThrowErrorIfTableNotEmpty(MigrationType,DATABASE::Vendor,STRSUBSTNO(VendorTableNotEmptyErr,PRODUCTNAME.SHORT));
      ThrowErrorIfTableNotEmpty(MigrationType,DATABASE::Item,STRSUBSTNO(ItemTableNotEmptyErr,PRODUCTNAME.SHORT));
    END;

    LOCAL PROCEDURE ThrowErrorIfTableNotEmpty@17(MigrationType@1004 : Text[250];TableId@1000 : Integer;ErrorMessageErr@1001 : Text);
    VAR
      DataMigrationStatus@1002 : Record "Data Migration Status";
      RecRef@1003 : RecordRef;
    BEGIN
      if DataMigrationStatus.GET(MigrationType,TableId) then begin
        if DataMigrationStatus.Status <> DataMigrationStatus.Status::Pending then
          exit;
        RecRef.OPEN(TableId);
        if not RecRef.ISEMPTY then
          ERROR(ErrorMessageErr);
      end;
    END;

    [External]
    PROCEDURE StartDataMigrationWizardFromNotification@14(Notification@1000 : Notification);
    BEGIN
      PAGE.RUN(PAGE::"Data Migration Wizard");
    END;

    [External]
    PROCEDURE ShowDataMigrationRelatedGlobalNotifications@16();
    VAR
      DataMigrationStatus@1002 : Record "Data Migration Status";
      DataMigrationOverview@1000 : Page "Data Migration Overview";
      Notification@1001 : Notification;
    BEGIN
      if not IsGlobalNotificationEnabled then
        exit;

      if DataMigrationStatus.ISEMPTY then
        exit;

      Notification.ID(GetGlobalNotificationId);
      case GetMigrationStatus of
        MigrationStatus::Pending,
        MigrationStatus::"In Progress":
          begin
            Notification.MESSAGE(STRSUBSTNO(DataMigrationInProgressMsg,PRODUCTNAME.SHORT));
            Notification.ADDACTION(MoreInfoTxt,CODEUNIT::"Data Migration Mgt.",'ShowMoreInfoPage');
          end;
        MigrationStatus::"Completed with errors",
        MigrationStatus::Failed:
          begin
            Notification.MESSAGE(STRSUBSTNO(DataMigrationCompletedWithErrosMsg,DataMigrationOverview.CAPTION));
            Notification.ADDACTION(GoThereNowTxt,CODEUNIT::"Data Migration Mgt.",'ShowDataMigrationOverviewFromNotification');
          end;
        MigrationStatus::Completed:
          if CheckForEntitiesToBePosted then begin
            Notification.MESSAGE(DataMigrationEntriesToPostMsg);
            Notification.ADDACTION(GoThereNowTxt,CODEUNIT::"Data Migration Mgt.",'ShowDataMigrationOverviewFromNotification');
          end else begin
            Notification.MESSAGE(DataMigrationFinishedMsg);
            Notification.ADDACTION(DontShowTxt,CODEUNIT::"Data Migration Mgt.",'DisableDataMigrationRelatedGlobalNotifications');
          end;
        else
          exit;
      end;

      Notification.SEND;
    END;

    PROCEDURE GetGlobalNotificationId@19() : GUID;
    BEGIN
      exit('47707336-D917-4238-942F-39715F52BE4E');
    END;

    PROCEDURE GetCustomerContactNotificationId@31() : GUID;
    BEGIN
      exit('351199D7-6C9B-40F1-8E78-ff9E67C546C9');
    END;

    PROCEDURE GetVendorContactNotificationId@32() : GUID;
    BEGIN
      exit('08DB77DB-1F41-4379-8615-1B581A0225FA');
    END;

    LOCAL PROCEDURE IsGlobalNotificationEnabled@24() : Boolean;
    VAR
      MyNotifications@1001 : Record "My Notifications";
    BEGIN
      exit(MyNotifications.IsEnabled(GetGlobalNotificationId));
    END;

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState)]
    LOCAL PROCEDURE OnInitializingNotificationWithDefaultState@29();
    VAR
      MyNotifications@1000 : Record "My Notifications";
    BEGIN
      MyNotifications.InsertDefault(GetGlobalNotificationId,DataMigrationNotificationNameTxt,DataMigrationNotificationDescTxt,true);
      InsertDefaultCustomerContactNotification(true);
      InsertDefaultVendorContactNotification(true);
    END;

    [External]
    PROCEDURE ShowDataMigrationOverviewFromNotification@18(Notification@1000 : Notification);
    BEGIN
      PAGE.RUN(PAGE::"Data Migration Overview");
    END;

    [External]
    PROCEDURE IsMigrationInProgress@48() : Boolean;
    BEGIN
      exit(GetMigrationStatus in [MigrationStatus::"In Progress",MigrationStatus::Pending]);
    END;

    [External]
    PROCEDURE ShowMoreInfoPage@55(Notification@1000 : Notification);
    BEGIN
      if PAGE.RUNMODAL(PAGE::"Data Migration About") = ACTION::LookupOK then
        ShowDataMigrationOverviewFromNotification(Notification);
    END;

    PROCEDURE CheckForEntitiesToBePosted@28() : Boolean;
    VAR
      DataMigrationStatus@1000 : Record "Data Migration Status";
      DummyCode@1001 : Code[10];
    BEGIN
      DataMigrationStatus.SETFILTER(
        Status,'%1|%2',DataMigrationStatus.Status::Completed,DataMigrationStatus.Status::"Completed with Errors");

      if not DataMigrationStatus.FINDSET then
        exit(false);
      repeat
        if DestTableHasAnyTransactions(DataMigrationStatus,DummyCode) then
          exit(true);
      until DataMigrationStatus.NEXT = 0;
    END;

    [Internal]
    PROCEDURE DestTableHasAnyTransactions@40(VAR DataMigrationStatus@1000 : Record "Data Migration Status";VAR JournalBatchName@1004 : Code[10]) : Boolean;
    VAR
      GenJournalLine@1002 : Record "Gen. Journal Line";
      ItemJournalLine@1003 : Record "Item Journal Line";
    BEGIN
      case DataMigrationStatus."Destination Table ID" of
        DATABASE::Vendor:
          begin
            DataMigrationFacade.OnFindBatchForVendorTransactions(DataMigrationStatus."Migration Type",JournalBatchName);
            if JournalBatchName = '' then
              exit(false);
            GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
            GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Vendor);
            GenJournalLine.SETFILTER("Account No.",'<>%1','');
            exit(GenJournalLine.FINDFIRST);
          end;
        DATABASE::Customer:
          begin
            DataMigrationFacade.OnFindBatchForCustomerTransactions(DataMigrationStatus."Migration Type",JournalBatchName);
            if JournalBatchName = '' then
              exit(false);
            GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
            GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::Customer);
            GenJournalLine.SETFILTER("Account No.",'<>%1','');
            exit(GenJournalLine.FINDFIRST);
          end;
        DATABASE::Item:
          begin
            DataMigrationFacade.OnFindBatchForItemTransactions(DataMigrationStatus."Migration Type",JournalBatchName);
            if JournalBatchName = '' then
              exit(false);
            ItemJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
            ItemJournalLine.SETFILTER("Item No.",'<>%1','');
            exit(ItemJournalLine.FINDFIRST);
          end;
        else begin
          DataMigrationFacade.OnFindBatchForAccountTransactions(DataMigrationStatus,JournalBatchName);
          if JournalBatchName = '' then
            exit(false);
          GenJournalLine.SETRANGE("Journal Batch Name",JournalBatchName);
          GenJournalLine.SETRANGE("Account Type",GenJournalLine."Account Type"::"G/L Account");
          GenJournalLine.SETFILTER("Account No.",'<>%1','');
          exit(GenJournalLine.FINDFIRST);
        end
      end;
    END;

    PROCEDURE ShowHelpTopicPage@56(Notification@1000 : Notification);
    BEGIN
      HYPERLINK(DataMigrationHelpTopicURLTxt);
    END;

    PROCEDURE GetDataMigrationHelpTopicURL@60() : Text;
    BEGIN
      exit(DataMigrationHelpTopicURLTxt)
    END;

    PROCEDURE DisableDataMigrationRelatedGlobalNotifications@27(Notification@1000 : Notification);
    VAR
      MyNotifications@1001 : Record "My Notifications";
    BEGIN
      if not MyNotifications.Disable(GetGlobalNotificationId) then
        MyNotifications.InsertDefault(GetGlobalNotificationId,DataMigrationNotificationNameTxt,DataMigrationNotificationDescTxt,false);
    END;

    LOCAL PROCEDURE EnableDataMigrationNotificationForAllUsers@26();
    VAR
      MyNotifications@1000 : Record "My Notifications";
    BEGIN
      MyNotifications.SETRANGE("Notification Id",GetGlobalNotificationId);
      if MyNotifications.FINDSET then
        repeat
          MyNotifications.Enabled := true;
          MyNotifications.MODIFY(true);
        until MyNotifications.NEXT = 0;
    END;

    [EventSubscriber(Table,1797,OnAfterErrorInserted)]
    LOCAL PROCEDURE OnAfterErrorInsertedSubscriber@30(MigrationType@1000 : Text;ErrorMessage@1001 : Text);
    BEGIN
      SENDTRACETAG(
        '00001HY',
        STRSUBSTNO('Data Migration (%1)',MigrationType),
        VERBOSITY::Error,
        ErrorMessage,
        DATACLASSIFICATION::CustomerContent);
    END;

    PROCEDURE InsertDefaultCustomerContactNotification@33(Enabled@1001 : Boolean);
    VAR
      MyNotifications@1000 : Record "My Notifications";
    BEGIN
      MyNotifications.InsertDefault(
        GetCustomerContactNotificationId,CustomerContactNotificationNameTxt,CustContactNotificationDescTxt,Enabled);
    END;

    PROCEDURE InsertDefaultVendorContactNotification@34(Enabled@1001 : Boolean);
    VAR
      MyNotifications@1000 : Record "My Notifications";
    BEGIN
      MyNotifications.InsertDefault(
        GetVendorContactNotificationId,VendorContactNotificationNameTxt,VendContactNotificationDescTxt,Enabled);
    END;

    BEGIN
    END.
  }
}

