OBJECT Codeunit 5472 Graph Mgt - Vendor
{
  OBJECT-PROPERTIES
  {
    Date=0D;
    Time=0T;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE ProcessComplexTypes@8(VAR Vendor@1000 : Record Vendor;PaymentTermsJSON@1003 : Text;PaymentMethodJSON@1001 : Text);
    BEGIN
      UpdatePaymentTerms(PaymentTermsJSON,Vendor);
      UpdatePaymentMethod(PaymentMethodJSON,Vendor);
    END;

    PROCEDURE PaymentTermsToJSON@1(PaymentTermsCode@1000 : Code[10]) JSON : Text;
    VAR
      PaymentTerms@1001 : Record "Payment Terms";
      GraphMgtComplexTypes@1002 : Codeunit "Graph Mgt - Complex Types";
    BEGIN
      if PaymentTerms.GET(PaymentTermsCode) then
        GraphMgtComplexTypes.GetCodeAndDescriptionJSON(PaymentTerms.Code,PaymentTerms.Description,JSON);
    END;

    PROCEDURE PaymentMethodToJSON@9(PaymentMethodCode@1000 : Code[10]) JSON : Text;
    VAR
      PaymentMethod@1001 : Record "Payment Method";
      GraphMgtComplexTypes@1002 : Codeunit "Graph Mgt - Complex Types";
    BEGIN
      if PaymentMethod.GET(PaymentMethodCode) then
        GraphMgtComplexTypes.GetCodeAndDescriptionJSON(PaymentMethod.Code,PaymentMethod.Description,JSON);
    END;

    PROCEDURE PostalAddressToJSON@5(Vendor@1000 : Record Vendor) JSON : Text;
    VAR
      GraphMgtComplexTypes@1001 : Codeunit "Graph Mgt - Complex Types";
    BEGIN
      with Vendor do
        GraphMgtComplexTypes.GetPostalAddressJSON(Address,"Address 2",City,County,"Country/Region Code","Post Code",JSON);
    END;

    PROCEDURE UpdateIntegrationRecords@11(OnlyVendorsWithoutId@1000 : Boolean);
    VAR
      DummyVendor@1002 : Record Vendor;
      GraphMgtGeneralTools@1001 : Codeunit "Graph Mgt - General Tools";
      VendorRecordRef@1019 : RecordRef;
    BEGIN
      VendorRecordRef.OPEN(DATABASE::Vendor);
      GraphMgtGeneralTools.UpdateIntegrationRecords(VendorRecordRef,DummyVendor.FIELDNO(Id),OnlyVendorsWithoutId);
    END;

    PROCEDURE UpdatePaymentTerms@13(PaymentTermsJSON@1000 : Text;VAR Vendor@1001 : Record Vendor);
    VAR
      GraphMgtComplexTypes@1002 : Codeunit "Graph Mgt - Complex Types";
      PreviousCode@1004 : Code[10];
      PreviousJSONString@1005 : Text;
      NewCode@1007 : Code[10];
      NewDescription@1008 : Text[50];
    BEGIN
      if PaymentTermsJSON = '' then
        exit;

      PreviousCode := Vendor."Payment Terms Code";
      PreviousJSONString := PaymentTermsToJSON(PreviousCode);

      if PaymentTermsJSON <> PreviousJSONString then begin
        GraphMgtComplexTypes.GetCodeAndDescriptionFromJSON(PaymentTermsJSON,NewCode,NewDescription);
        Vendor.VALIDATE("Payment Terms Code",NewCode);
      end;
    END;

    PROCEDURE UpdatePaymentMethod@15(PaymentMethodJSON@1000 : Text;VAR Vendor@1001 : Record Vendor);
    VAR
      GraphMgtComplexTypes@1006 : Codeunit "Graph Mgt - Complex Types";
      PreviousCode@1005 : Code[10];
      PreviousJSONString@1004 : Text;
      NewCode@1003 : Code[10];
      NewDescription@1002 : Text[50];
    BEGIN
      if PaymentMethodJSON = '' then
        exit;

      PreviousCode := Vendor."Payment Method Code";
      PreviousJSONString := PaymentMethodToJSON(PreviousCode);

      if PaymentMethodJSON <> PreviousJSONString then begin
        GraphMgtComplexTypes.GetCodeAndDescriptionFromJSON(PaymentMethodJSON,NewCode,NewDescription);
        Vendor.VALIDATE("Payment Method Code",NewCode);
      end;
    END;

    PROCEDURE UpdatePostalAddress@4(PostalAddressJSON@1000 : Text;VAR Vendor@1001 : Record Vendor);
    VAR
      GraphMgtComplexTypes@1002 : Codeunit "Graph Mgt - Complex Types";
      RecRef@1004 : RecordRef;
    BEGIN
      if PostalAddressJSON = '' then
        exit;

      with Vendor do begin
        RecRef.GETTABLE(Vendor);
        GraphMgtComplexTypes.ApplyPostalAddressFromJSON(PostalAddressJSON,RecRef,
          FIELDNO(Address),FIELDNO("Address 2"),FIELDNO(City),FIELDNO(County),FIELDNO("Country/Region Code"),FIELDNO("Post Code"));
        RecRef.SETTABLE(Vendor);
      end;
    END;

    [EventSubscriber(Codeunit,5150,OnUpdateReferencedIdField)]
    LOCAL PROCEDURE HandleUpdateReferencedIdFieldOnItem@19(VAR RecRef@1000 : RecordRef;NewId@1001 : GUID;VAR Handled@1002 : Boolean);
    VAR
      DummyVendor@1004 : Record Vendor;
      GraphMgtGeneralTools@1006 : Codeunit "Graph Mgt - General Tools";
    BEGIN
      GraphMgtGeneralTools.HandleUpdateReferencedIdFieldOnItem(RecRef,NewId,Handled,DATABASE::Vendor,DummyVendor.FIELDNO(Id));
    END;

    [EventSubscriber(Codeunit,5150,OnGetPredefinedIdValue)]
    LOCAL PROCEDURE HandleGetPredefinedIdValue@21(VAR Id@1000 : GUID;VAR RecRef@1001 : RecordRef;VAR Handled@1002 : Boolean);
    VAR
      DummyVendor@1004 : Record Vendor;
      GraphMgtGeneralTools@1007 : Codeunit "Graph Mgt - General Tools";
    BEGIN
      GraphMgtGeneralTools.HandleGetPredefinedIdValue(Id,RecRef,Handled,DATABASE::Vendor,DummyVendor.FIELDNO(Id));
    END;

    [EventSubscriber(Codeunit,5465,ApiSetup)]
    LOCAL PROCEDURE HandleApiSetup@16();
    BEGIN
      UpdateIntegrationRecords(false);
      UpdateIds;
    END;

    [EventSubscriber(Codeunit,5150,OnUpdateRelatedRecordIdFields)]
    LOCAL PROCEDURE HandleUpdateRelatedRecordIdFields@3(VAR RecRef@1000 : RecordRef);
    VAR
      Vendor@1001 : Record Vendor;
      TempField@1003 : TEMPORARY Record Field;
      GraphMgtGeneralTools@1004 : Codeunit "Graph Mgt - General Tools";
      UpdatedRecRef@1002 : RecordRef;
    BEGIN
      if not (RecRef.NUMBER = DATABASE::Vendor) then
        exit;

      if RecRef.ISTEMPORARY then
        exit;

      RecRef.SETTABLE(Vendor);
      Vendor.UpdateReferencedIds;

      UpdatedRecRef.GETTABLE(Vendor);
      Vendor.GetReferencedIds(TempField);
      GraphMgtGeneralTools.TransferRelatedRecordIntegrationIDs(RecRef,UpdatedRecRef,TempField);
    END;

    PROCEDURE UpdateIds@6();
    VAR
      Vendor@1000 : Record Vendor;
    BEGIN
      if not Vendor.FINDSET(true,false) then
        exit;

      repeat
        Vendor.UpdateReferencedIds;
        Vendor.MODIFY(false);
      until Vendor.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

