OBJECT Codeunit 10140 Deposit-Post
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160932.207T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    TableNo="Deposit Header";
    Permissions=TableData "Cust. Ledger Entry"=r,
                TableData "Vendor Ledger Entry"=r,
                TableData "Bank Account Ledger Entry"=r,
                TableData "Posted Deposit Header"=rim,
                TableData "Posted Deposit Line"=rim;
    OnRun=VAR
            GLEntry@1020001 : Record "G/L Entry";
            GenJnlLine@1020011 : Record "Gen. Journal Line";
            GenJnlTemplate@1020013 : Record "Gen. Journal Template";
            GenJnlBatch@1020012 : Record "Gen. Journal Batch";
            CustLedgEntry@1020004 : Record "Cust. Ledger Entry";
            VendLedgEntry@1020003 : Record "Vendor Ledger Entry";
            BankAccount@1020009 : Record "Bank Account";
            BankAccountLedgerEntry@1020002 : Record "Bank Account Ledger Entry";
            GenJnlCheckLine@1020006 : Codeunit "Gen. Jnl.-Check Line";
            UpdateAnalysisView@1020005 : Codeunit "Update Analysis View";
            TotalAmountLCY@1020010 : Decimal;
            NextLineNo@1020007 : Integer;
            CurrLineNo@1020008 : Integer;
          BEGIN
            OnBeforeDepositPost(Rec);

            // Check deposit
            TESTFIELD("Posting Date");
            TESTFIELD("Total Deposit Amount");
            TESTFIELD("Document Date");
            TESTFIELD("Bank Account No.");
            BankAccount.GET("Bank Account No.");
            BankAccount.TESTFIELD(Blocked,false);
            CALCFIELDS("Total Deposit Lines");
            if "Total Deposit Lines" <> "Total Deposit Amount" then
              ERROR(Text000,FIELDCAPTION("Total Deposit Amount"),FIELDCAPTION("Total Deposit Lines"));

            OnAfterCheckDeposit(Rec);

            if "Currency Code" = '' then
              Currency.InitRoundingPrecision
            else begin
              Currency.GET("Currency Code");
              Currency.TESTFIELD("Amount Rounding Precision");
            end;

            SourceCodeSetup.GET;
            GenJnlTemplate.GET("Journal Template Name");

            NextLineNo := 0;
            TotalAmountLCY := 0;
            CurrLineNo := 0;
            Window.OPEN(
              STRSUBSTNO(Text001,"No.") +
              Text004 +
              Text002 +
              Text003);

            Window.UPDATE(4,Text005);

            PostedDepositHeader.LOCKTABLE;
            PostedDepositLine.LOCKTABLE;
            LOCKTABLE;
            GenJnlLine.LOCKTABLE;

            InsertPostedDepositHeader(Rec);

            GenJnlLine.RESET;
            GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
            GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
            if GenJnlLine.FIND('-') then
              repeat
                NextLineNo := NextLineNo + 1;
                Window.UPDATE(2,NextLineNo);

                InsertPostedDepositLine(Rec,GenJnlLine,NextLineNo);

                if GenJnlTemplate."Force Doc. Balance" then
                  AddBalancingAccount(GenJnlLine,Rec)
                else
                  GenJnlLine."Bal. Account No." := '';
                GenJnlCheckLine.RunCheck(GenJnlLine);
              until GenJnlLine.NEXT = 0;

            CopyBankComments(Rec);

            // Post to General, and other, Ledgers
            Window.UPDATE(4,Text006);
            GenJnlLine.RESET;
            GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
            GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
            if GenJnlLine.FIND('-') then
              repeat
                CurrLineNo := CurrLineNo + 1;
                Window.UPDATE(2,CurrLineNo);
                Window.UPDATE(3,ROUND(CurrLineNo / NextLineNo * 10000,1));
                if GenJnlTemplate."Force Doc. Balance" then
                  AddBalancingAccount(GenJnlLine,Rec)
                else begin
                  TotalAmountLCY += GenJnlLine."Amount (LCY)";
                  GenJnlLine."Bal. Account No." := '';
                end;
                GenJnlLine."Source Code" := SourceCodeSetup.Deposits;
                GenJnlLine."Source Type" := GenJnlLine."Source Type"::"Bank Account";
                GenJnlLine."Source No." := "Bank Account No.";
                GenJnlLine."Source Currency Code" := "Currency Code";
                GenJnlLine."Source Currency Amount" := GenJnlLine.Amount;
                OnBeforePostGenJnlLine(GenJnlLine,Rec);
                GenJnlPostLine.RunWithoutCheck(GenJnlLine);

                PostedDepositLine.GET("No.",CurrLineNo);
                case GenJnlLine."Account Type" of
                  GenJnlLine."Account Type"::"G/L Account",
                  GenJnlLine."Account Type"::"Bank Account":
                    begin
                      GLEntry.FINDLAST;
                      PostedDepositLine."Entry No." := GLEntry."Entry No.";
                      if GenJnlTemplate."Force Doc. Balance" and (GenJnlLine.Amount * GLEntry.Amount < 0) then
                        PostedDepositLine."Entry No." := PostedDepositLine."Entry No." - 1;
                    end;
                  GenJnlLine."Account Type"::Customer:
                    begin
                      CustLedgEntry.FINDLAST;
                      PostedDepositLine."Entry No." := CustLedgEntry."Entry No.";
                    end;
                  GenJnlLine."Account Type"::Vendor:
                    begin
                      VendLedgEntry.FINDLAST;
                      PostedDepositLine."Entry No." := VendLedgEntry."Entry No.";
                    end;
                end;
                if GenJnlTemplate."Force Doc. Balance" then begin
                  BankAccountLedgerEntry.FINDLAST;
                  PostedDepositLine."Bank Account Ledger Entry No." := BankAccountLedgerEntry."Entry No.";
                  if (GenJnlLine."Account Type" = GenJnlLine."Account Type"::"Bank Account") and
                     (GenJnlLine.Amount * BankAccountLedgerEntry.Amount > 0)
                  then
                    PostedDepositLine."Entry No." := PostedDepositLine."Entry No." - 1;
                end;
                OnBeforePostedDepositLineModify(PostedDepositLine,GenJnlLine);
                PostedDepositLine.MODIFY;
              until GenJnlLine.NEXT = 0;

            Window.UPDATE(4,Text007);
            if not GenJnlTemplate."Force Doc. Balance" then begin
              PostBalancingEntry(Rec,TotalAmountLCY);

              BankAccountLedgerEntry.FINDLAST;
              PostedDepositLine.RESET;
              PostedDepositLine.SETRANGE("Deposit No.","No.");
              if PostedDepositLine.FINDSET(true) then
                repeat
                  PostedDepositLine."Bank Account Ledger Entry No." := BankAccountLedgerEntry."Entry No.";
                  PostedDepositLine.MODIFY;
                until PostedDepositLine.NEXT = 0;
            end;

            Window.UPDATE(4,Text008);
            DeleteBankComments(Rec);

            GenJnlLine.RESET;
            GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
            GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
            GenJnlLine.DELETEALL;
            GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
            if INCSTR("Journal Batch Name") <> '' then begin
              GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
              GenJnlBatch.DELETE;
              GenJnlBatch.Name := INCSTR("Journal Batch Name");
              if GenJnlBatch.INSERT then;
            end;

            DELETE;
            COMMIT;

            UpdateAnalysisView.UpdateAll(0,true);

            OnAfterDepositPost(Rec,PostedDepositHeader);
          END;

  }
  CODE
  {
    VAR
      PostedDepositHeader@1020000 : Record "Posted Deposit Header";
      PostedDepositLine@1020002 : Record "Posted Deposit Line";
      SourceCodeSetup@1020016 : Record "Source Code Setup";
      Currency@1020036 : Record Currency;
      Window@1020006 : Dialog;
      GenJnlPostLine@1020007 : Codeunit "Gen. Jnl.-Post Line";
      Text000@1020013 : TextConst 'ENU=The %1 must match the %2.';
      Text001@1020020 : TextConst 'ENU=Posting Deposit No. %1...\\';
      Text002@1020021 : TextConst 'ENU=Deposit Line  #2########\';
      Text003@1020024 : TextConst 'ENU=@3@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text004@1020025 : TextConst 'ENU=Status        #4###################\';
      Text005@1020026 : TextConst 'ENU=Moving Deposit to History';
      Text006@1020027 : TextConst 'ENU=Posting Lines to Ledgers';
      Text007@1020028 : TextConst 'ENU=Posting Bank Entry';
      Text008@1020029 : TextConst 'ENU=Removing Deposit Entry';

    LOCAL PROCEDURE AddBalancingAccount@1020001(VAR GenJnlLine@1020000 : Record "Gen. Journal Line";DepositHeader@1020001 : Record "Deposit Header");
    BEGIN
      with GenJnlLine do begin
        "Bal. Account Type" := "Bal. Account Type"::"Bank Account";
        "Bal. Account No." := DepositHeader."Bank Account No.";
        "Balance (LCY)" := 0;
      end;
    END;

    LOCAL PROCEDURE CopyBankComments@1020019(DepositHeader@1020000 : Record "Deposit Header");
    VAR
      BankCommentLine@1020001 : Record "Bank Comment Line";
      BankCommentLine2@1020002 : Record "Bank Comment Line";
    BEGIN
      BankCommentLine.RESET;
      BankCommentLine.SETRANGE("Table Name",BankCommentLine."Table Name"::Deposit);
      BankCommentLine.SETRANGE("Bank Account No.",DepositHeader."Bank Account No.");
      BankCommentLine.SETRANGE("No.",DepositHeader."No.");
      if BankCommentLine.FINDSET then
        repeat
          BankCommentLine2 := BankCommentLine;
          BankCommentLine2."Table Name" := BankCommentLine2."Table Name"::"Posted Deposit";
          BankCommentLine2.INSERT;
        until BankCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteBankComments@1020020(DepositHeader@1020000 : Record "Deposit Header");
    VAR
      BankCommentLine@1020001 : Record "Bank Comment Line";
    BEGIN
      BankCommentLine.RESET;
      BankCommentLine.SETRANGE("Table Name",BankCommentLine."Table Name"::Deposit);
      BankCommentLine.SETRANGE("Bank Account No.",DepositHeader."Bank Account No.");
      BankCommentLine.SETRANGE("No.",DepositHeader."No.");
      BankCommentLine.DELETEALL;
    END;

    LOCAL PROCEDURE InsertPostedDepositHeader@1020013(VAR DepositHeader@1020000 : Record "Deposit Header");
    VAR
      RecordLinkManagement@1020002 : Codeunit "Record Link Management";
    BEGIN
      PostedDepositHeader.RESET;
      PostedDepositHeader.TRANSFERFIELDS(DepositHeader,true);
      PostedDepositHeader."No. Printed" := 0;
      OnBeforePostedDepositHeaderInsert(PostedDepositHeader,DepositHeader);
      PostedDepositHeader.INSERT;
      RecordLinkManagement.CopyLinks(DepositHeader,PostedDepositHeader);
    END;

    LOCAL PROCEDURE InsertPostedDepositLine@1020014(DepositHeader@1020000 : Record "Deposit Header";GenJnlLine@1020002 : Record "Gen. Journal Line";LineNo@1020001 : Integer);
    BEGIN
      with PostedDepositLine do begin
        "Deposit No." := DepositHeader."No.";
        "Line No." := LineNo;
        "Account Type" := GenJnlLine."Account Type";
        "Account No." := GenJnlLine."Account No.";
        "Document Date" := GenJnlLine."Document Date";
        "Document Type" := GenJnlLine."Document Type";
        "Document No." := GenJnlLine."Document No.";
        Description := GenJnlLine.Description;
        "Currency Code" := GenJnlLine."Currency Code";
        Amount := -GenJnlLine.Amount;
        "Posting Group" := GenJnlLine."Posting Group";
        "Shortcut Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
        "Shortcut Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
        "Dimension Set ID" := GenJnlLine."Dimension Set ID";
        "Posting Date" := DepositHeader."Posting Date";
        OnBeforePostedDepositLineInsert(PostedDepositLine,GenJnlLine);
        INSERT;
      end;
    END;

    LOCAL PROCEDURE PostBalancingEntry@1020012(DepositHeader@1020001 : Record "Deposit Header";TotalAmountLCY@1020002 : Decimal);
    VAR
      GenJnlLine@1020000 : Record "Gen. Journal Line";
    BEGIN
      with GenJnlLine do begin
        INIT;
        "Account Type" := "Account Type"::"Bank Account";
        "Account No." := DepositHeader."Bank Account No.";
        "Posting Date" := DepositHeader."Posting Date";
        "Document No." := DepositHeader."No.";
        "Currency Code" := DepositHeader."Currency Code";
        "Currency Factor" := DepositHeader."Currency Factor";
        "Posting Group" := DepositHeader."Bank Acc. Posting Group";
        "Shortcut Dimension 1 Code" := DepositHeader."Shortcut Dimension 1 Code";
        "Shortcut Dimension 2 Code" := DepositHeader."Shortcut Dimension 2 Code";
        "Dimension Set ID" := DepositHeader."Dimension Set ID";
        "Source Code" := SourceCodeSetup.Deposits;
        "Reason Code" := DepositHeader."Reason Code";
        "Document Date" := DepositHeader."Document Date";
        "External Document No." := DepositHeader."No.";
        "Source Type" := "Source Type"::"Bank Account";
        "Source No." := DepositHeader."Bank Account No.";
        "Source Currency Code" := DepositHeader."Currency Code";
        Description := DepositHeader."Posting Description";
        Amount := DepositHeader."Total Deposit Amount";
        "Source Currency Amount" := DepositHeader."Total Deposit Amount";
        VALIDATE(Amount);
        "Amount (LCY)" := -TotalAmountLCY;
        OnBeforePostBalancingEntry(GenJnlLine,DepositHeader);
        GenJnlPostLine.RunWithCheck(GenJnlLine);
      end;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCheckDeposit@1020003(DepositHeader@1020000 : Record "Deposit Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterDepositPost@1020007(DepositHeader@1020000 : Record "Deposit Header";VAR PostedDepositHeader@1020001 : Record "Posted Deposit Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDepositPost@1020002(VAR DepositHeader@1020000 : Record "Deposit Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostBalancingEntry@1020006(VAR GenJnlLine@1020000 : Record "Gen. Journal Line";DepositHeader@1020001 : Record "Deposit Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostGenJnlLine@1020004(VAR GenJnlLine@1020000 : Record "Gen. Journal Line";DepositHeader@1020001 : Record "Deposit Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostedDepositHeaderInsert@1020008(VAR PostedDepositHeader@1020000 : Record "Posted Deposit Header";DepositHeader@1020001 : Record "Deposit Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostedDepositLineInsert@1020000(VAR PostedDepositLine@1020000 : Record "Posted Deposit Line";GenJnlLine@1020001 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePostedDepositLineModify@1020005(VAR PostedDepositLine@1020001 : Record "Posted Deposit Line";GenJnlLine@1020000 : Record "Gen. Journal Line");
    BEGIN
    END;

    BEGIN
    END.
  }
}

