OBJECT Codeunit 453 Job Queue - Enqueue
{
  OBJECT-PROPERTIES
  {
    Date=0D;
    Time=0T;
    Version List=;
  }
  PROPERTIES
  {
    TableNo="Job Queue Entry";
    Permissions=TableData "Job Queue Entry"=rimd;
    OnRun=BEGIN
            EnqueueJobQueueEntry(Rec);
          END;

  }
  CODE
  {

    LOCAL PROCEDURE EnqueueJobQueueEntry@4(VAR JobQueueEntry@1000 : Record "Job Queue Entry");
    VAR
      SavedStatus@1001 : Option;
    BEGIN
      with JobQueueEntry do begin
        SavedStatus := Status;
        InitEntryForSchedulerWithDelayInSec(JobQueueEntry,1);
        if ISNULLGUID(ID) then
          INSERT(true)
        else begin
          if CanScheduleTask(JobQueueEntry) then
            CancelTask; // clears "System Task ID"
          MODIFY;
        end;

        if CanScheduleTask(JobQueueEntry) then
          "System Task ID" := ScheduleTask;

        if not ISNULLGUID("System Task ID") then begin
          if SavedStatus = Status::"On Hold with Inactivity Timeout" then
            Status := SavedStatus
          else
            Status := Status::Ready;
          MODIFY;
        end;
      end;
    END;

    LOCAL PROCEDURE InitEntryForSchedulerWithDelayInSec@3(VAR JobQueueEntry@1001 : Record "Job Queue Entry";DelayInSec@1000 : Integer);
    BEGIN
      with JobQueueEntry do begin
        Status := Status::"On Hold";
        "User Session Started" := 0DT;
        if "Earliest Start Date/Time" < (CURRENTDATETIME + 1000) then
          "Earliest Start Date/Time" := CURRENTDATETIME + DelayInSec * 1000;
      end;
    END;

    LOCAL PROCEDURE CanScheduleTask@5(VAR JobQueueEntry@1001 : Record "Job Queue Entry") : Boolean;
    VAR
      DoNotScheduleTask@1000 : Boolean;
    BEGIN
      OnBeforeJobQueueScheduleTask(JobQueueEntry,DoNotScheduleTask);
      exit(not DoNotScheduleTask);
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforeJobQueueScheduleTask@2(VAR JobQueueEntry@1001 : Record "Job Queue Entry";VAR DoNotScheduleTask@1000 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

