OBJECT Codeunit 5332 Lookup CRM Tables
{
  OBJECT-PROPERTIES
  {
    Date=0D;
    Time=0T;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE Lookup@1(CRMTableID@1001 : Integer;NAVTableId@1004 : Integer;SavedCRMId@1000 : GUID;VAR CRMId@1002 : GUID) : Boolean;
    VAR
      IntTableFilter@1003 : Text;
    BEGIN
      IntTableFilter := GetIntegrationTableFilter(CRMTableID,NAVTableId);

      case CRMTableID of
        DATABASE::"CRM Account":
          exit(LookupCRMAccount(SavedCRMId,CRMId,IntTableFilter));
        DATABASE::"CRM Contact":
          exit(LookupCRMContact(SavedCRMId,CRMId,IntTableFilter));
        DATABASE::"CRM Systemuser":
          exit(LookupCRMSystemuser(SavedCRMId,CRMId,IntTableFilter));
        DATABASE::"CRM Transactioncurrency":
          exit(LookupCRMCurrency(SavedCRMId,CRMId,IntTableFilter));
        DATABASE::"CRM Pricelevel":
          exit(LookupCRMPriceList(SavedCRMId,CRMId,IntTableFilter));
        DATABASE::"CRM Product":
          exit(LookupCRMProduct(SavedCRMId,CRMId,IntTableFilter));
        DATABASE::"CRM Uomschedule":
          exit(LookupCRMUomschedule(SavedCRMId,CRMId,IntTableFilter));
        DATABASE::"CRM Opportunity":
          exit(LookupCRMOpportunity(SavedCRMId,CRMId,IntTableFilter));
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupCRMAccount@2(SavedCRMId@1004 : GUID;VAR CRMId@1000 : GUID;IntTableFilter@1005 : Text) : Boolean;
    VAR
      CRMAccount@1003 : Record "CRM Account";
      OriginalCRMAccount@1002 : Record "CRM Account";
      CRMAccountList@1001 : Page "CRM Account List";
    BEGIN
      if not ISNULLGUID(CRMId) then begin
        if CRMAccount.GET(CRMId) then
          CRMAccountList.SETRECORD(CRMAccount);
        if not ISNULLGUID(SavedCRMId) then
          if OriginalCRMAccount.GET(SavedCRMId) then
            CRMAccountList.SetCurrentlyCoupledCRMAccount(OriginalCRMAccount);
      end;
      CRMAccount.SETVIEW(IntTableFilter);
      CRMAccountList.SETTABLEVIEW(CRMAccount);
      CRMAccountList.LOOKUPMODE(true);
      if CRMAccountList.RUNMODAL = ACTION::LookupOK then begin
        CRMAccountList.GETRECORD(CRMAccount);
        CRMId := CRMAccount.AccountId;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupCRMContact@3(SavedCRMId@1004 : GUID;VAR CRMId@1003 : GUID;IntTableFilter@1005 : Text) : Boolean;
    VAR
      CRMContact@1002 : Record "CRM Contact";
      OriginalCRMContact@1001 : Record "CRM Contact";
      CRMContactList@1000 : Page "CRM Contact List";
    BEGIN
      if not ISNULLGUID(CRMId) then begin
        if CRMContact.GET(CRMId) then
          CRMContactList.SETRECORD(CRMContact);
        if not ISNULLGUID(SavedCRMId) then
          if OriginalCRMContact.GET(SavedCRMId) then
            CRMContactList.SetCurrentlyCoupledCRMContact(OriginalCRMContact);
      end;
      CRMContact.SETVIEW(IntTableFilter);
      CRMContactList.SETTABLEVIEW(CRMContact);
      CRMContactList.LOOKUPMODE(true);
      if CRMContactList.RUNMODAL = ACTION::LookupOK then begin
        CRMContactList.GETRECORD(CRMContact);
        CRMId := CRMContact.ContactId;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupCRMSystemuser@4(SavedCRMId@1004 : GUID;VAR CRMId@1003 : GUID;IntTableFilter@1005 : Text) : Boolean;
    VAR
      CRMSystemuser@1002 : Record "CRM Systemuser";
      OriginalCRMSystemuser@1001 : Record "CRM Systemuser";
      CRMSystemuserList@1000 : Page "CRM Systemuser List";
    BEGIN
      if not ISNULLGUID(CRMId) then begin
        if CRMSystemuser.GET(CRMId) then
          CRMSystemuserList.SETRECORD(CRMSystemuser);
        if not ISNULLGUID(SavedCRMId) then
          if OriginalCRMSystemuser.GET(SavedCRMId) then
            CRMSystemuserList.SetCurrentlyCoupledCRMSystemuser(OriginalCRMSystemuser);
      end;
      CRMSystemuser.SETVIEW(IntTableFilter);
      CRMSystemuserList.SETTABLEVIEW(CRMSystemuser);
      CRMSystemuserList.LOOKUPMODE(true);
      if CRMSystemuserList.RUNMODAL = ACTION::LookupOK then begin
        CRMSystemuserList.GETRECORD(CRMSystemuser);
        CRMId := CRMSystemuser.SystemUserId;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupCRMCurrency@5(SavedCRMId@1004 : GUID;VAR CRMId@1003 : GUID;IntTableFilter@1005 : Text) : Boolean;
    VAR
      CRMTransactioncurrency@1002 : Record "CRM Transactioncurrency";
      OriginalCRMTransactioncurrency@1001 : Record "CRM Transactioncurrency";
      CRMTransactionCurrencyList@1000 : Page "CRM TransactionCurrency List";
    BEGIN
      if not ISNULLGUID(CRMId) then begin
        if CRMTransactioncurrency.GET(CRMId) then
          CRMTransactionCurrencyList.SETRECORD(CRMTransactioncurrency);
        if not ISNULLGUID(SavedCRMId) then
          if OriginalCRMTransactioncurrency.GET(SavedCRMId) then
            CRMTransactionCurrencyList.SetCurrentlyCoupledCRMTransactioncurrency(OriginalCRMTransactioncurrency);
      end;
      CRMTransactioncurrency.SETVIEW(IntTableFilter);
      CRMTransactionCurrencyList.SETTABLEVIEW(CRMTransactioncurrency);
      CRMTransactionCurrencyList.LOOKUPMODE(true);
      if CRMTransactionCurrencyList.RUNMODAL = ACTION::LookupOK then begin
        CRMTransactionCurrencyList.GETRECORD(CRMTransactioncurrency);
        CRMId := CRMTransactioncurrency.TransactionCurrencyId;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupCRMPriceList@8(SavedCRMId@1004 : GUID;VAR CRMId@1003 : GUID;IntTableFilter@1005 : Text) : Boolean;
    VAR
      CRMPricelevel@1002 : Record "CRM Pricelevel";
      OriginalCRMPricelevel@1001 : Record "CRM Pricelevel";
      CRMPricelevelList@1000 : Page "CRM Pricelevel List";
    BEGIN
      if not ISNULLGUID(CRMId) then begin
        if CRMPricelevel.GET(CRMId) then
          CRMPricelevelList.SETRECORD(CRMPricelevel);
        if not ISNULLGUID(SavedCRMId) then
          if OriginalCRMPricelevel.GET(SavedCRMId) then
            CRMPricelevelList.SetCurrentlyCoupledCRMPricelevel(OriginalCRMPricelevel);
      end;
      CRMPricelevel.SETVIEW(IntTableFilter);
      CRMPricelevelList.SETTABLEVIEW(CRMPricelevel);
      CRMPricelevelList.LOOKUPMODE(true);
      if CRMPricelevelList.RUNMODAL = ACTION::LookupOK then begin
        CRMPricelevelList.GETRECORD(CRMPricelevel);
        CRMId := CRMPricelevel.PriceLevelId;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupCRMProduct@6(SavedCRMId@1004 : GUID;VAR CRMId@1003 : GUID;IntTableFilter@1005 : Text) : Boolean;
    VAR
      CRMProduct@1002 : Record "CRM Product";
      OriginalCRMProduct@1001 : Record "CRM Product";
      CRMProductList@1000 : Page "CRM Product List";
    BEGIN
      if not ISNULLGUID(CRMId) then begin
        if CRMProduct.GET(CRMId) then
          CRMProductList.SETRECORD(CRMProduct);
        if not ISNULLGUID(SavedCRMId) then
          if OriginalCRMProduct.GET(SavedCRMId) then
            CRMProductList.SetCurrentlyCoupledCRMProduct(OriginalCRMProduct);
      end;
      CRMProduct.SETVIEW(IntTableFilter);
      CRMProductList.SETTABLEVIEW(CRMProduct);
      CRMProductList.LOOKUPMODE(true);
      if CRMProductList.RUNMODAL = ACTION::LookupOK then begin
        CRMProductList.GETRECORD(CRMProduct);
        CRMId := CRMProduct.ProductId;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupCRMUomschedule@7(SavedCRMId@1004 : GUID;VAR CRMId@1003 : GUID;IntTableFilter@1005 : Text) : Boolean;
    VAR
      CRMUomschedule@1002 : Record "CRM Uomschedule";
      OriginalCRMUomschedule@1001 : Record "CRM Uomschedule";
      CRMUnitGroupList@1000 : Page "CRM UnitGroup List";
    BEGIN
      if not ISNULLGUID(CRMId) then begin
        if CRMUomschedule.GET(CRMId) then
          CRMUnitGroupList.SETRECORD(CRMUomschedule);
        if not ISNULLGUID(SavedCRMId) then
          if OriginalCRMUomschedule.GET(SavedCRMId) then
            CRMUnitGroupList.SetCurrentlyCoupledCRMUomschedule(OriginalCRMUomschedule);
      end;
      CRMUomschedule.SETVIEW(IntTableFilter);
      CRMUnitGroupList.SETTABLEVIEW(CRMUomschedule);
      CRMUnitGroupList.LOOKUPMODE(true);
      if CRMUnitGroupList.RUNMODAL = ACTION::LookupOK then begin
        CRMUnitGroupList.GETRECORD(CRMUomschedule);
        CRMId := CRMUomschedule.UoMScheduleId;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupCRMOpportunity@10(SavedCRMId@1004 : GUID;VAR CRMId@1003 : GUID;IntTableFilter@1005 : Text) : Boolean;
    VAR
      CRMOpportunity@1002 : Record "CRM Opportunity";
      OriginalCRMOpportunity@1001 : Record "CRM Opportunity";
      CRMOpportunityList@1000 : Page "CRM Opportunity List";
    BEGIN
      if not ISNULLGUID(CRMId) then begin
        if CRMOpportunity.GET(CRMId) then
          CRMOpportunityList.SETRECORD(CRMOpportunity);
        if not ISNULLGUID(SavedCRMId) then
          if OriginalCRMOpportunity.GET(SavedCRMId) then
            CRMOpportunityList.SetCurrentlyCoupledCRMOpportunity(OriginalCRMOpportunity);
      end;
      CRMOpportunity.SETVIEW(IntTableFilter);
      CRMOpportunityList.SETTABLEVIEW(CRMOpportunity);
      CRMOpportunityList.LOOKUPMODE(true);
      if CRMOpportunityList.RUNMODAL = ACTION::LookupOK then begin
        CRMOpportunityList.GETRECORD(CRMOpportunity);
        CRMId := CRMOpportunity.OpportunityId;
        exit(true);
      end;
      exit(false);
    END;

    PROCEDURE GetIntegrationTableFilter@9(CRMTableId@1001 : Integer;NAVTableId@1000 : Integer) : Text;
    VAR
      IntegrationTableMapping@1002 : Record "Integration Table Mapping";
    BEGIN
      IntegrationTableMapping.SETRANGE("Synch. Codeunit ID",CODEUNIT::"CRM Integration Table Synch.");
      IntegrationTableMapping.SETRANGE("Table ID",NAVTableId);
      IntegrationTableMapping.SETRANGE("Integration Table ID",CRMTableId);
      IntegrationTableMapping.SETRANGE("Delete After Synchronization",false);
      if IntegrationTableMapping.FINDFIRST then
        exit(IntegrationTableMapping.GetIntegrationTableFilter);
      exit('');
    END;

    PROCEDURE GetIntegrationTableMappingView@11(TableId@1001 : Integer) : Text;
    VAR
      Field@1004 : Record Field;
      IntegrationTableMapping@1006 : Record "Integration Table Mapping";
      RecRef@1011 : ARRAY [2] OF RecordRef;
      FieldRef@1003 : ARRAY [2] OF FieldRef;
      FieldFilter@1005 : ARRAY [2] OF Text;
    BEGIN
      RecRef[1].OPEN(TableId);
      RecRef[2].OPEN(TableId);

      IntegrationTableMapping.SETRANGE("Synch. Codeunit ID",CODEUNIT::"CRM Integration Table Synch.");
      IntegrationTableMapping.SETRANGE("Integration Table ID",TableId);
      IntegrationTableMapping.SETRANGE("Delete After Synchronization",false);
      IntegrationTableMapping.SETRANGE("Int. Table UID Field Type",Field.Type::GUID);
      if IntegrationTableMapping.FINDSET then
        repeat
          FieldFilter[2] := IntegrationTableMapping.GetIntegrationTableFilter;
          if FieldFilter[2] <> '' then begin
            RecRef[2].SETVIEW(FieldFilter[2]);

            Field.SETRANGE(TableNo,TableId);
            if Field.FINDSET then
              repeat
                FieldRef[1] := RecRef[1].FIELD(Field."No.");
                FieldRef[2] := RecRef[2].FIELD(Field."No.");

                FieldFilter[1] := FieldRef[1].GETFILTER;
                FieldFilter[2] := FieldRef[2].GETFILTER;

                if FieldFilter[2] <> '' then
                  if FieldFilter[1] = '' then
                    FieldRef[1].SETFILTER(FieldFilter[2])
                  else
                    FieldRef[1].SETFILTER(STRSUBSTNO('%1|%2',FieldFilter[1],FieldFilter[2]));

              until Field.NEXT = 0;
          end;
        until IntegrationTableMapping.NEXT = 0;

      exit(RecRef[1].GETVIEW);
    END;

    BEGIN
    END.
  }
}

