OBJECT Codeunit 10095 Export EFT (RB)
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160929.443T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Vendor@1020032 : Record Vendor;
      Customer@1020031 : Record Customer;
      BankAccount@1020030 : Record "Bank Account";
      CompanyInformation@1020029 : Record "Company Information";
      FileManagement@1020028 : Codeunit "File Management";
      FileName@1020021 : Text;
      FileDate@1020019 : Date;
      DummyModifierValues@1020018 : ARRAY [26] OF Code[1];
      PaymentsThisAcct@1020016 : Integer;
      CurrencyType@1020014 : Code[10];
      AcctNo@1020012 : Code[20];
      AcctName@1020011 : Text[30];
      AcctLanguage@1020010 : '"E  English","F  French"';
      RecipientAddress@1020009 : Text[80];
      RecipientCity@1020008 : Text[30];
      RecipientCountryCode@1020007 : Text[30];
      RecipientCounty@1020006 : Text[30];
      RecipientPostCode@1020005 : Code[20];
      RecipientBankAcctNo@1020004 : Text[30];
      RecipientTransitNo@1020003 : Text[20];
      RecipientBankNo@1020002 : Text[20];
      RecipientBankAcctCurrencyCode@1020001 : Code[10];
      RecipientBankAcctCountryCode@1020000 : Code[10];
      AlreadyExistsErr@1020045 : TextConst 'ENU=The file already exists. Check the "Last E-Pay Export File Name" field in the bank account.';
      ReferErr@1020043 : TextConst 'ENU=Either Account type or balance account type must refer to either a vendor or a customer for an electronic payment.';
      VendorBankAccountErr@1020042 : TextConst 'ENU=The vendor has no bank account setup for electronic payments.';
      VendorMoreThanOneBankAccErr@1020041 : TextConst 'ENU=The vendor has more than one bank account setup for electronic payments.';
      CustomerBankAccountErr@1020040 : TextConst 'ENU=The customer has no bank account setup for electronic payments.';
      CustomerMoreThanOneBankAccountErr@1020039 : TextConst 'ENU=The customer has more than one bank account setup for electronic payments.';
      IsBlockedErr@1020035 : TextConst 'ENU=Account type is blocked for processing.';
      PrivacyBlockedErr@1234567 : TextConst 'ENU=Account type is blocked for privacy.';

    PROCEDURE StartExportFile@6(VAR TempEFTExportWorkset@1020004 : TEMPORARY Record "EFT Export Workset";BankAccountNo@1020001 : Code[20];DataExchEntryNo@1020005 : Integer;VAR EFTValues@1020003 : Codeunit "EFT Values");
    VAR
      ACHRBHeader@1020006 : Record "ACH RB Header";
      GLSetup@1030002 : Record "General Ledger Setup";
      ExportEFTACH@1020010 : Codeunit "Export EFT (ACH)";
      i@1020002 : Integer;
      FedID@1020000 : Text[30];
    BEGIN
      ExportEFTACH.BuildIDModifier(DummyModifierValues);

      CompanyInformation.GET;
      CompanyInformation.TESTFIELD("Federal ID No.");

      with BankAccount do begin
        LOCKTABLE;
        GET(BankAccountNo);
        TESTFIELD("Export Format","Export Format"::CA);
        TESTFIELD("Transit No.");
        TESTFIELD("Last E-Pay Export File Name");
        TESTFIELD("Bank Acc. Posting Group");
        TESTFIELD(Blocked,false);
        TESTFIELD("Client No.");
        TESTFIELD("Client Name");

        if TempEFTExportWorkset."Bank Payment Type" =
           TempEFTExportWorkset."Bank Payment Type"::"Electronic Payment-IAT"
        then begin
          TempEFTExportWorkset.TESTFIELD("Transaction Code");
          TempEFTExportWorkset.TESTFIELD("Company Entry Description");
        end;

        FileName := FileManagement.ServerTempFileName('');

        if "Last ACH File ID Modifier" = '' then
          "Last ACH File ID Modifier" := '1'
        else begin
          i := 1;
          while (i < ARRAYLEN(DummyModifierValues)) and
                ("Last ACH File ID Modifier" <> DummyModifierValues[i])
          do
            i := i + 1;
          if i = ARRAYLEN(DummyModifierValues) then
            i := 1
          else
            i := i + 1;

          "Last ACH File ID Modifier" := DummyModifierValues[i];
        end;
        "Last E-Pay File Creation No." := "Last E-Pay File Creation No." + 1;
        MODIFY;

        if EXISTS(FileName) then
          ERROR(AlreadyExistsErr);

        FileDate := TODAY;
        EFTValues.SetNoOfRec(1);
        EFTValues.SetNoOfCustInfoRec(0);
        EFTValues.SetTotalFileDebit(0);
        EFTValues.SetTotalFileCredit(0);
        EFTValues.SetTransactions(0);
        FedID := CompanyInformation."Federal ID No.";

        if TempEFTExportWorkset."Currency Code" = '' then begin
          GLSetup.GET;
          CurrencyType := GLSetup."LCY Code";
        end else
          CurrencyType := TempEFTExportWorkset."Currency Code";

        ACHRBHeader.GET(DataExchEntryNo);
        ACHRBHeader."Record Count" := EFTValues.GetNoOfRec;
        ACHRBHeader."Record Type" := 'A';
        ACHRBHeader."Transaction Code" := 'HDR';
        ACHRBHeader."Client Number" := "Client No.";
        ACHRBHeader."Client Name" := "Client Name";
        ACHRBHeader."Federal ID No." := DELCHR(FedID,'=',' .,-');
        ACHRBHeader."File Creation Number" := "Last E-Pay File Creation No.";
        ACHRBHeader."File Creation Date" := JulianDate(FileDate);
        ACHRBHeader."Currency Type" := CurrencyType;
        ACHRBHeader."Input Type" := '1';
        ACHRBHeader."Input Qualifier" := "Input Qualifier";
        ACHRBHeader.MODIFY;
      end;
    END;

    PROCEDURE ExportElectronicPayment@17(VAR TempEFTExportWorkset@1020002 : TEMPORARY Record "EFT Export Workset";PaymentAmount@1020001 : Decimal;SettleDate@1020000 : Date;DataExchEntryNo@1020003 : Integer;DataExchLineDefCode@1020006 : Code[20];VAR EFTValues@1020005 : Codeunit "EFT Values") : Code[30];
    VAR
      DemandCredit@1020004 : Boolean;
    BEGIN
      // NOTE:  If PaymentAmount is Positive, then we are Receiving money.
      // If PaymentAmount is Negative, then we are Sending money.
      if PaymentAmount = 0 then
        exit('');
      DemandCredit := (PaymentAmount < 0);
      PaymentAmount := ABS(PaymentAmount);

      if EFTValues.GetParentBoolean then
        if DemandCredit then
          EFTValues.SetTotalFileCredit(EFTValues.GetTotalFileCredit + PaymentAmount)
        else
          EFTValues.SetTotalFileDebit(EFTValues.GetTotalFileDebit + PaymentAmount);

      GetRecipientData(TempEFTExportWorkset);
      WriteRecord(TempEFTExportWorkset,PaymentAmount,SettleDate,DataExchEntryNo,DataExchLineDefCode,
        EFTValues.GetParentBoolean,EFTValues);

      exit(GenerateFullTraceNoCode(EFTValues.GetTraceNo));
    END;

    PROCEDURE EndExportFile@10(DataExchEntryNo@1020002 : Integer;VAR EFTValues@1020000 : Codeunit "EFT Values") : Boolean;
    VAR
      ACHRBFooter@1020005 : Record "ACH RB Footer";
    BEGIN
      ACHRBFooter.GET(DataExchEntryNo);
      ACHRBFooter."Record Type" := 'Z';
      ACHRBFooter."Transaction Code" := 'TRL';
      ACHRBFooter."Client Number" := BankAccount."Client No.";
      EFTValues.SetNoOfRec(EFTValues.GetNoOfRec + 1);
      ACHRBFooter."Record Count" := EFTValues.GetNoOfRec;
      ACHRBFooter."Credit Payment Transactions" := EFTValues.GetTransactions;
      ACHRBFooter."Total File Credit" := EFTValues.GetTotalFileCredit;
      ACHRBFooter."Zero Fill" := 0;
      ACHRBFooter."Number of Cust Info Records" := EFTValues.GetNoOfCustInfoRec;
      ACHRBFooter.MODIFY;

      exit(true);
    END;

    LOCAL PROCEDURE GenerateFullTraceNoCode@14(TraceNo@1020000 : Integer) : Code[30];
    VAR
      TraceCode@1020001 : Text;
    BEGIN
      TraceCode := '';
      TraceCode := FORMAT(BankAccount."Last E-Pay File Creation No." + TraceNo);
      exit(TraceCode);
    END;

    LOCAL PROCEDURE GetRecipientData@20(VAR TempEFTExportWorkset@1020000 : TEMPORARY Record "EFT Export Workset");
    VAR
      AcctType@1030001 : Text[1];
    BEGIN
      with TempEFTExportWorkset do begin
        if "Account Type" = "Account Type"::Vendor then begin
          AcctType := 'V';
          AcctNo := "Account No.";
        end else
          if "Account Type" = "Account Type"::Customer then begin
            AcctType := 'C';
            AcctNo := "Account No.";
          end else
            if "Bal. Account Type" = "Bal. Account Type"::Vendor then begin
              AcctType := 'V';
              AcctNo := "Bal. Account No.";
            end else
              if "Bal. Account Type" = "Bal. Account Type"::Customer then begin
                AcctType := 'C';
                AcctNo := "Bal. Account No.";
              end else
                ERROR(ReferErr);

        if AcctType = 'V' then
          GetRecipientDataFromVendor
        else
          if AcctType = 'C' then
            GetRecipientDataFromCustomer;
      end;
    END;

    LOCAL PROCEDURE GetRecipientDataFromVendor@21();
    VAR
      VendorBankAccount@1030002 : Record "Vendor Bank Account";
    BEGIN
      if AcctNo <> Vendor."No." then begin
        Vendor.GET(AcctNo);
        Vendor.TESTFIELD(Blocked,Vendor.Blocked::" ");
        Vendor.TESTFIELD("Privacy Blocked",false);
        PaymentsThisAcct := 0;
      end else
        PaymentsThisAcct := PaymentsThisAcct + 1;
      AcctName := COPYSTR(Vendor.Name,1,30);
      AcctLanguage := Vendor."Bank Communication";
      RecipientAddress := COPYSTR(Vendor.Address,1,35) + ' ' + COPYSTR(Vendor."Address 2",1,35);
      RecipientCity := Vendor.City;
      RecipientCountryCode := Vendor."Country/Region Code";
      RecipientCounty := Vendor.County;
      RecipientPostCode := Vendor."Post Code";
      VendorBankAccount.SETRANGE("Vendor No.",AcctNo);
      VendorBankAccount.SETRANGE("Use for Electronic Payments",true);
      if VendorBankAccount.COUNT < 1 then
        ERROR(VendorBankAccountErr);
      if VendorBankAccount.COUNT > 1 then
        ERROR(VendorMoreThanOneBankAccErr);
      VendorBankAccount.FINDFIRST;

      VendorBankAccount.TESTFIELD("Bank Account No.");
      RecipientBankNo := VendorBankAccount."Bank Branch No.";
      RecipientTransitNo := VendorBankAccount."Transit No.";
      RecipientBankAcctNo := VendorBankAccount."Bank Account No.";
      RecipientBankAcctCurrencyCode := VendorBankAccount."Currency Code";
      RecipientBankAcctCountryCode := VendorBankAccount."Country/Region Code";
    END;

    LOCAL PROCEDURE GetRecipientDataFromCustomer@22();
    VAR
      CustomerBankAccount@1030001 : Record "Customer Bank Account";
    BEGIN
      if AcctNo <> Customer."No." then begin
        Customer.GET(AcctNo);
        if Customer."Privacy Blocked" then
          ERROR(PrivacyBlockedErr);
        if Customer.Blocked in [Customer.Blocked::All] then
          ERROR(IsBlockedErr);

        PaymentsThisAcct := 0;
      end else
        PaymentsThisAcct := PaymentsThisAcct + 1;
      AcctName := COPYSTR(Customer.Name,1,30);
      AcctLanguage := Customer."Bank Communication";
      RecipientAddress := COPYSTR(Customer.Address,1,35) + ' ' + COPYSTR(Customer."Address 2",1,35);
      RecipientCity := Customer.City;
      RecipientCountryCode := Customer."Country/Region Code";
      RecipientCounty := Customer.County;
      RecipientPostCode := Customer."Post Code";
      CustomerBankAccount.SETRANGE("Customer No.",AcctNo);
      CustomerBankAccount.SETRANGE("Use for Electronic Payments",true);
      if CustomerBankAccount.COUNT < 1 then
        ERROR(CustomerBankAccountErr);

      if CustomerBankAccount.COUNT > 1 then
        ERROR(CustomerMoreThanOneBankAccountErr);

      CustomerBankAccount.FINDFIRST;

      CustomerBankAccount.TESTFIELD("Bank Account No.");
      RecipientBankNo := CustomerBankAccount."Bank Branch No.";
      RecipientTransitNo := CustomerBankAccount."Transit No.";
      RecipientBankAcctNo := CustomerBankAccount."Bank Account No.";
      RecipientBankAcctCurrencyCode := CustomerBankAccount."Currency Code";
      RecipientBankAcctCountryCode := CustomerBankAccount."Country/Region Code"
    END;

    PROCEDURE JulianDate@23(NormalDate@1020000 : Date) : Integer;
    VAR
      Year@1020002 : Integer;
      Days@1020001 : Integer;
    BEGIN
      Year := DATE2DMY(NormalDate,3);
      Days := (NormalDate - DMY2DATE(1,1,Year)) + 1;
      exit(Year * 1000 + Days);
    END;

    LOCAL PROCEDURE WriteRecord@30(VAR TempEFTExportWorkset@1020000 : TEMPORARY Record "EFT Export Workset";PaymentAmount@1030005 : Decimal;SettleDate@1030006 : Date;DataExchEntryNo@1020002 : Integer;DataExchLineDefCode@1020003 : Code[20];IsParent@1020004 : Boolean;VAR EFTValues@1020005 : Codeunit "EFT Values");
    VAR
      ACHRBDetail@1020001 : Record "ACH RB Detail";
    BEGIN
      with TempEFTExportWorkset do begin
        if IsParent then
          EFTValues.SetTransactions(EFTValues.GetTransactions + 1);
        EFTValues.SetNoOfRec(EFTValues.GetNoOfRec + 1);
        EFTValues.SetTraceNo(EFTValues.GetNoOfRec);
        EFTValues.SetDataExchEntryNo(DataExchEntryNo);

        ACHRBDetail.GET(DataExchEntryNo,DataExchLineDefCode);
        ACHRBDetail."Record Count" := EFTValues.GetNoOfRec;
        ACHRBDetail."Transaction Code" := "Transaction Code";
        ACHRBDetail."Client Number" := BankAccount."Client No.";
        ACHRBDetail."Customer/Vendor Number" := AcctNo;
        ACHRBDetail."Vendor/Customer Name" := AcctName;
        ACHRBDetail."Payment Number" := PaymentsThisAcct;

        if RecipientBankAcctCountryCode = 'CA' then begin
          ACHRBDetail."Bank No." := RecipientBankNo;
          ACHRBDetail."Transit Routing No." := RecipientTransitNo;
        end else
          if RecipientBankAcctCountryCode = 'US' then
            ACHRBDetail."Transit Routing No." := RecipientTransitNo;

        ACHRBDetail."Recipient Bank No." := RecipientBankAcctNo;
        ACHRBDetail."Payment Amount" := PaymentAmount;
        ACHRBDetail."Payment Date" := JulianDate(SettleDate);
        ACHRBDetail."Language Code" := FORMAT(AcctLanguage);
        ACHRBDetail."Client Name" := BankAccount."Client Name";

        if RecipientBankAcctCurrencyCode = '' then
          ACHRBDetail."Currency Code" := CurrencyType
        else
          ACHRBDetail."Currency Code" := RecipientBankAcctCurrencyCode;

        if RecipientCountryCode = 'CA' then
          ACHRBDetail.Country := 'CAN'
        else
          if RecipientCountryCode = 'US' then
            ACHRBDetail.Country := 'USA';

        if IsParent then
          EFTValues.SetNoOfCustInfoRec(EFTValues.GetNoOfCustInfoRec + 1);
        ACHRBDetail.AD1NoOfRec := EFTValues.GetNoOfRec;
        ACHRBDetail."AD1Client No" := BankAccount."Client No.";
        ACHRBDetail."AD1Company Name" := CompanyInformation.Name;
        ACHRBDetail.AD1Address := COPYSTR(CompanyInformation.Address,1,35) + ' ' +
          COPYSTR(CompanyInformation."Address 2",1,35);
        ACHRBDetail."AD1City State" := CompanyInformation.City + '*' + CompanyInformation.County + '\';
        ACHRBDetail."AD1Region Code/Post Code" := CompanyInformation."Country/Region Code" + '*' +
          CompanyInformation."Post Code" + '\';

        if IsParent then
          EFTValues.SetNoOfCustInfoRec(EFTValues.GetNoOfCustInfoRec + 1);
        ACHRBDetail.AD2NoOfRec := EFTValues.GetNoOfRec;
        ACHRBDetail."AD2Client No" := BankAccount."Client No.";
        ACHRBDetail."AD2Recipient Address" := RecipientAddress;
        ACHRBDetail."AD2Recipient City/County" := RecipientCity + '*' + RecipientCounty + '\';
        ACHRBDetail."AD2Region Code/Post Code" := RecipientCountryCode + '*' + RecipientPostCode + '\';
        ACHRBDetail."AD2Transaction Type Code" := FORMAT("Transaction Type Code");
        ACHRBDetail."AD2Company Entry Description" := "Company Entry Description";

        if ("Payment Related Information 1" <> '') or ("Payment Related Information 2" <> '') then begin
          ACHRBDetail."Client Number" := BankAccount."Client No.";
          ACHRBDetail.RRNoOfRec := EFTValues.GetNoOfRec;
          ACHRBDetail."RRClient No" := BankAccount."Client No.";
          ACHRBDetail."RRPayment Related Info1" := "Payment Related Information 1";
          ACHRBDetail."RRPayment Related Info2" := "Payment Related Information 2";
          ACHRBDetail.MODIFY;
          EFTValues.SetNoOfCustInfoRec(EFTValues.GetNoOfCustInfoRec + 1);
        end else
          ACHRBDetail.MODIFY;
      end;
    END;

    BEGIN
    END.
  }
}

