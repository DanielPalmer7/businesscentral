OBJECT Page 10042 Sales Stats.
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=161716.557T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Sales Statistics;
    InsertAllowed=false;
    DeleteAllowed=false;
    SourceTable="Sales Header";
    PageType=Document;
    OnOpenPage=BEGIN
                 SalesSetup.GET;
                 AllowInvDisc :=
                   not (SalesSetup."Calc. Inv. Discount" and CustInvDiscRecExists("Invoice Disc. Code"));
                 AllowVATDifference :=
                   SalesSetup."Allow VAT Difference" and
                   not ("Document Type" in ["Document Type"::Quote,"Document Type"::"Blanket Order"]);
                 CurrPage.EDITABLE :=
                   AllowVATDifference or AllowInvDisc;
                 TaxArea.GET("Tax Area Code");
                 SetVATSpecification;
               END;

    OnAfterGetRecord=VAR
                       SalesLine@1000 : Record "Sales Line";
                       TempSalesLine@1001 : TEMPORARY Record "Sales Line";
                       TempSalesTaxAmtLine@1020002 : TEMPORARY Record "Sales Tax Amount Line";
                     BEGIN
                       CurrPage.CAPTION(STRSUBSTNO(Text000,"Document Type"));
                       if PrevNo = "No." then
                         exit;
                       PrevNo := "No.";
                       FILTERGROUP(2);
                       SETRANGE("No.",PrevNo);
                       FILTERGROUP(0);
                       CLEAR(SalesLine);
                       CLEAR(TotalSalesLine);
                       CLEAR(TotalSalesLineLCY);
                       CLEAR(SalesPost);
                       CLEAR(TaxAmount);
                       SalesTaxCalculate.StartSalesTaxCalculation;
                       SalesLine.SETRANGE("Document Type","Document Type");
                       SalesLine.SETRANGE("Document No.","No.");
                       SalesLine.SETFILTER(Type,'>0');
                       SalesLine.SETFILTER(Quantity,'<>0');
                       if SalesLine.FIND('-') then
                         repeat
                           TempSalesLine.COPY(SalesLine);
                           TempSalesLine.INSERT;
                           if not TaxArea."Use External Tax Engine" then
                             SalesTaxCalculate.AddSalesLine(TempSalesLine);
                         until SalesLine.NEXT = 0;
                       TempSalesTaxLine.DELETEALL;

                       OnBeforeCalculateSalesTaxSalesStats(Rec,TempSalesTaxLine,TempSalesTaxAmtLine,SalesTaxCalculationOverridden);

                       if not SalesTaxCalculationOverridden then begin
                         if TaxArea."Use External Tax Engine" then
                           SalesTaxCalculate.CallExternalTaxEngineForSales(Rec,true)
                         else
                           SalesTaxCalculate.EndSalesTaxCalculation("Posting Date");

                         SalesTaxCalculate.GetSalesTaxAmountLineTable(TempSalesTaxLine);
                         SalesTaxCalculate.DistTaxOverSalesLines(TempSalesLine);
                       end;

                       SalesPost.SumSalesLinesTemp(
                         Rec,TempSalesLine,0,TotalSalesLine,TotalSalesLineLCY,
                         TaxAmount,TaxAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);

                       if "Prices Including VAT" then begin
                         TotalAmount2 := TotalSalesLine.Amount;
                         TotalAmount1 := TotalAmount2 + TaxAmount;
                         TotalSalesLine."Line Amount" := TotalAmount1 + TotalSalesLine."Inv. Discount Amount";
                       end else begin
                         TotalAmount1 := TotalSalesLine.Amount;
                         TotalAmount2 := TotalSalesLine."Amount Including VAT";
                       end;

                       if not SalesTaxCalculationOverridden then
                         SalesTaxCalculate.GetSummarizedSalesTaxTable(TempSalesTaxAmtLine);
                       UpdateTaxBreakdown(TempSalesTaxAmtLine,true);
                       if Cust.GET("Bill-to Customer No.") then
                         Cust.CALCFIELDS("Balance (LCY)")
                       else
                         CLEAR(Cust);
                       if Cust."Credit Limit (LCY)" = 0 then
                         CreditLimitLCYExpendedPct := 0
                       else
                         if Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" < 0 then
                           CreditLimitLCYExpendedPct := 0
                         else
                           if Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" > 1 then
                             CreditLimitLCYExpendedPct := 10000
                           else
                             CreditLimitLCYExpendedPct := ROUND(Cust."Balance (LCY)" / Cust."Credit Limit (LCY)" * 10000,1);

                       TempSalesTaxLine.MODIFYALL(Modified,false);
                       SetVATSpecification;
                       OnActivateForm;
                     END;

    OnQueryClosePage=BEGIN
                       GetVATSpecification;
                       if TempSalesTaxLine.GetAnyLineModified then
                         UpdateVATOnSalesLines;
                       exit(true);
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Control1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 129 ;2   ;Field     ;
                Name="TotalSalesLine.""Line Amount""";
                CaptionML=ENU=Amount;
                ToolTipML=ENU=Specifies the net amount of all the lines on the sales document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLine."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text002,false);
                Editable=FALSE }

    { 93  ;2   ;Field     ;
                Name="TotalSalesLine.""Inv. Discount Amount""";
                CaptionML=ENU=Inv. Discount Amount;
                ToolTipML=ENU=Specifies the invoice discount amount for the sales document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLine."Inv. Discount Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=FALSE;
                OnValidate=BEGIN
                             UpdateInvDiscAmount;
                           END;
                            }

    { 80  ;2   ;Field     ;
                Name=TotalAmount1;
                CaptionML=ENU=Total;
                ToolTipML=ENU=Specifies the total amount less any invoice discount amount (excluding tax) for the sales document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAmount1;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,false);
                Editable=FALSE;
                OnValidate=BEGIN
                             UpdateTotalAmount;
                           END;

                ImplicitType=Decimal }

    { 75  ;2   ;Field     ;
                Name=TaxAmount;
                CaptionML=ENU=Tax Amount;
                ToolTipML=ENU=Specifies the total tax amount that has been calculated for all the lines in the sales document.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TaxAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=FALSE;
                ImplicitType=Decimal }

    { 76  ;2   ;Field     ;
                Name=TotalAmount2;
                CaptionML=ENU=Total Incl. Tax;
                ToolTipML=ENU=Specifies the total amount including tax that will be posted to the customer's account for all the lines in the sales document. This is the amount that the customer owes based on this sales document. If the document is a credit memo, it is the amount that you owe to the customer.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalAmount2;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=GetCaptionClass(Text001,true);
                Editable=FALSE;
                ImplicitType=Decimal }

    { 2   ;2   ;Field     ;
                Name="TotalSalesLineLCY.Amount";
                CaptionML=ENU=Sales ($);
                ToolTipML=ENU=Specifies your total sales turnover in the fiscal year. It is calculated from amounts excluding tax on all completed and open sales invoices and credit memos.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalSalesLineLCY.Amount;
                AutoFormatType=1;
                Editable=FALSE }

    { 79  ;2   ;Field     ;
                Name=ProfitLCY;
                CaptionML=ENU=Profit ($);
                ToolTipML=ENU=Specifies the original profit that was associated with the sales when they were originally posted.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ProfitLCY;
                AutoFormatType=1;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 81  ;2   ;Field     ;
                Name=ProfitPct;
                CaptionML=ENU=Profit %;
                ToolTipML=ENU=Specifies the original profit percentage that was associated with the sales when they were originally posted.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=1:1;
                SourceExpr=ProfitPct;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 95  ;2   ;Field     ;
                Name="TotalSalesLine.Quantity";
                CaptionML=ENU=Quantity;
                ToolTipML=ENU=Specifies the total quantity of G/L account entries, items, and/or resources in the sales document. If the amount is rounded, because the Invoice Rounding check box is selected in the Sales & Receivables Setup window, this field will contain the quantity of items in the sales document plus one.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine.Quantity;
                Editable=FALSE }

    { 73  ;2   ;Field     ;
                Name="TotalSalesLine.""Units per Parcel""";
                CaptionML=ENU=Parcels;
                ToolTipML=ENU=Specifies the number of parcels on the document.;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine."Units per Parcel";
                Editable=FALSE }

    { 91  ;2   ;Field     ;
                Name="TotalSalesLine.""Net Weight""";
                CaptionML=ENU=Net Weight;
                ToolTipML=ENU=Specifies the total net weight of the items in the sales document.;
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine."Net Weight";
                Editable=FALSE }

    { 82  ;2   ;Field     ;
                Name="TotalSalesLine.""Gross Weight""";
                CaptionML=ENU=Gross Weight;
                ToolTipML=ENU=Specifies the gross weight of items listed on the document.;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine."Gross Weight";
                Editable=FALSE }

    { 71  ;2   ;Field     ;
                Name="TotalSalesLine.""Unit Volume""";
                CaptionML=ENU=Volume;
                ToolTipML=ENU=Specifies the volume of the items in the sales order.;
                DecimalPlaces=0:5;
                SourceExpr=TotalSalesLine."Unit Volume";
                Editable=FALSE }

    { 1020001;2;Field     ;
                Name=BreakdownTitle;
                ApplicationArea=#Basic,#Suite;
                CaptionClass=FORMAT(BreakdownTitle);
                Editable=FALSE }

    { 1020005;2;Field     ;
                Name="BreakdownAmt[1]";
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=BreakdownAmt[1];
                CaptionClass=FORMAT(BreakdownLabel[1]);
                Editable=FALSE }

    { 1020006;2;Field     ;
                Name="BreakdownAmt[2]";
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=BreakdownAmt[2];
                CaptionClass=FORMAT(BreakdownLabel[2]);
                Editable=FALSE }

    { 1020007;2;Field     ;
                Name="BreakdownAmt[3]";
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=BreakdownAmt[3];
                CaptionClass=FORMAT(BreakdownLabel[3]);
                Editable=FALSE }

    { 1020009;2;Field     ;
                Name="BreakdownAmt[4]";
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=BreakdownAmt[4];
                CaptionClass=FORMAT(BreakdownLabel[4]);
                Editable=FALSE }

    { 5   ;1   ;Part      ;
                Name=SubForm;
                ApplicationArea=#Basic,#Suite;
                PagePartID="Sales Tax Lines Subform";
                PartType=Page }

    { 1903289601;1;Group  ;
                Name=Customer;
                CaptionML=ENU=Customer }

    { 67  ;2   ;Field     ;
                Name="Cust.""Balance (LCY)""";
                CaptionML=ENU=Balance ($);
                ToolTipML=ENU="Specifies the customer's balance. ";
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Cust."Balance (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 68  ;2   ;Field     ;
                Name="Cust.""Credit Limit (LCY)""";
                CaptionML=ENU=Credit Limit ($);
                ToolTipML=ENU=Specifies the customer's credit limit, in dollars.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Cust."Credit Limit (LCY)";
                AutoFormatType=1;
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                Name=CreditLimitLCYExpendedPct;
                ExtendedDatatype=Ratio;
                CaptionML=ENU=Expended % of Credit Limit ($);
                ToolTipML=ENU=Specifies the Expended Percentage of Credit Limit ($).;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CreditLimitLCYExpendedPct;
                ImplicitType=Decimal }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Sales %1 Statistics';
      Text001@1001 : TextConst 'ENU=Total';
      Text002@1002 : TextConst 'ENU=Amount';
      Text003@1003 : TextConst 'ENU=%1 must not be 0.';
      Text004@1004 : TextConst 'ENU=%1 must not be greater than %2.';
      Text005@1005 : TextConst 'ENU=You cannot change the invoice discount because there is a %1 record for %2 %3.';
      TotalSalesLine@1006 : Record "Sales Line";
      TotalSalesLineLCY@1007 : Record "Sales Line";
      Cust@1008 : Record Customer;
      TempSalesTaxLine@1009 : TEMPORARY Record "Sales Tax Amount Line";
      SalesSetup@1010 : Record "Sales & Receivables Setup";
      TaxArea@1020001 : Record "Tax Area";
      SalesTaxDifference@1020009 : Record "Sales Tax Amount Difference";
      SalesPost@1011 : Codeunit "Sales-Post";
      SalesTaxCalculate@1020000 : Codeunit "Sales Tax Calculate";
      TotalAmount1@1012 : Decimal;
      TotalAmount2@1013 : Decimal;
      TaxAmount@1014 : Decimal;
      TaxAmountText@1015 : Text[30];
      ProfitLCY@1016 : Decimal;
      ProfitPct@1017 : Decimal;
      TotalAdjCostLCY@1022 : Decimal;
      CreditLimitLCYExpendedPct@1018 : Decimal;
      PrevNo@1019 : Code[20];
      AllowInvDisc@1020 : Boolean;
      AllowVATDifference@1021 : Boolean;
      BreakdownTitle@1020005 : Text[35];
      BreakdownLabel@1020004 : ARRAY [4] OF Text[30];
      BreakdownAmt@1020003 : ARRAY [4] OF Decimal;
      BrkIdx@1020002 : Integer;
      Text006@1020008 : TextConst 'ENU=Tax Breakdown:';
      Text007@1020007 : TextConst 'ENU=Sales Tax Breakdown:';
      Text008@1020006 : TextConst 'ENU=Other Taxes';
      SalesTaxCalculationOverridden@1020010 : Boolean;

    LOCAL PROCEDURE UpdateHeaderInfo@5();
    VAR
      CurrExchRate@1000 : Record "Currency Exchange Rate";
      UseDate@1001 : Date;
    BEGIN
      TotalAmount1 :=
        TotalSalesLine."Line Amount" - TotalSalesLine."Inv. Discount Amount";
      if not SalesTaxCalculationOverridden then
        TaxAmount := TempSalesTaxLine.GetTotalTaxAmountFCY;
      if "Prices Including VAT" then
        TotalAmount2 := TotalSalesLine.Amount
      else
        TotalAmount2 := TotalAmount1 + TaxAmount;

      if "Prices Including VAT" then
        TotalSalesLineLCY.Amount := TotalAmount2
      else
        TotalSalesLineLCY.Amount := TotalAmount1;
      if "Currency Code" <> '' then begin
        if "Document Type" = "Document Type"::Quote then
          UseDate := WORKDATE
        else
          UseDate := "Posting Date";
        TotalSalesLineLCY.Amount :=
          CurrExchRate.ExchangeAmtFCYToLCY(
            UseDate,"Currency Code",TotalSalesLineLCY.Amount,"Currency Factor");
      end;
      ProfitLCY := TotalSalesLineLCY.Amount - TotalSalesLineLCY."Unit Cost (LCY)";
      if TotalSalesLineLCY.Amount = 0 then
        ProfitPct := 0
      else
        ProfitPct := ROUND(100 * ProfitLCY / TotalSalesLineLCY.Amount,0.01);
    END;

    LOCAL PROCEDURE GetVATSpecification@21();
    BEGIN
      CurrPage.SubForm.PAGE.GetTempTaxAmountLine(TempSalesTaxLine);
      UpdateHeaderInfo;
    END;

    LOCAL PROCEDURE SetVATSpecification@11();
    BEGIN
      CurrPage.SubForm.PAGE.SetTempTaxAmountLine(TempSalesTaxLine);
      CurrPage.SubForm.PAGE.InitGlobals(
        "Currency Code",AllowVATDifference,AllowVATDifference,
        "Prices Including VAT",AllowInvDisc,"VAT Base Discount %");
    END;

    LOCAL PROCEDURE UpdateTotalAmount@16();
    VAR
      SaveTotalAmount@1000 : Decimal;
    BEGIN
      CheckAllowInvDisc;
      if "Prices Including VAT" then begin
        SaveTotalAmount := TotalAmount1;
        UpdateInvDiscAmount;
        TotalAmount1 := SaveTotalAmount;
      end;
      with TotalSalesLine do
        "Inv. Discount Amount" := "Line Amount" - TotalAmount1;
      UpdateInvDiscAmount;
    END;

    LOCAL PROCEDURE UpdateInvDiscAmount@3();
    VAR
      InvDiscBaseAmount@1000 : Decimal;
    BEGIN
      CheckAllowInvDisc;
      InvDiscBaseAmount := TempSalesTaxLine.GetTotalInvDiscBaseAmount(false,"Currency Code");
      if InvDiscBaseAmount = 0 then
        ERROR(Text003,TempSalesTaxLine.FIELDCAPTION("Inv. Disc. Base Amount"));

      if TotalSalesLine."Inv. Discount Amount" / InvDiscBaseAmount > 1 then
        ERROR(
          Text004,
          TotalSalesLine.FIELDCAPTION("Inv. Discount Amount"),
          TempSalesTaxLine.FIELDCAPTION("Inv. Disc. Base Amount"));

      TempSalesTaxLine.SetInvoiceDiscountAmount(
        TotalSalesLine."Inv. Discount Amount","Currency Code","Prices Including VAT","VAT Base Discount %");
      CurrPage.SubForm.PAGE.SetTempTaxAmountLine(TempSalesTaxLine);
      UpdateHeaderInfo;

      "Invoice Discount Calculation" := "Invoice Discount Calculation"::Amount;
      "Invoice Discount Value" := TotalSalesLine."Inv. Discount Amount";
      MODIFY;
      UpdateVATOnSalesLines;
    END;

    LOCAL PROCEDURE GetCaptionClass@2(FieldCaption@1000 : Text[100];ReverseCaption@1001 : Boolean) : Text[80];
    BEGIN
      if "Prices Including VAT" xor ReverseCaption then
        exit('2,1,' + FieldCaption);

      exit('2,0,' + FieldCaption);
    END;

    LOCAL PROCEDURE UpdateVATOnSalesLines@1();
    VAR
      SalesLine@1000 : Record "Sales Line";
    BEGIN
      GetVATSpecification;

      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","No.");
      SalesLine.FINDFIRST;

      if TempSalesTaxLine.GetAnyLineModified then begin
        SalesTaxCalculate.StartSalesTaxCalculation;
        SalesTaxCalculate.PutSalesTaxAmountLineTable(
          TempSalesTaxLine,
          SalesTaxDifference."Document Product Area"::Sales,
          "Document Type","No.");
        SalesTaxCalculate.DistTaxOverSalesLines(SalesLine);
        SalesTaxCalculate.SaveTaxDifferences;
      end;

      PrevNo := '';
    END;

    LOCAL PROCEDURE CustInvDiscRecExists@4(InvDiscCode@1000 : Code[20]) : Boolean;
    VAR
      CustInvDisc@1001 : Record "Cust. Invoice Disc.";
    BEGIN
      CustInvDisc.SETRANGE(Code,InvDiscCode);
      exit(CustInvDisc.FINDFIRST);
    END;

    LOCAL PROCEDURE CheckAllowInvDisc@8();
    VAR
      CustInvDisc@1000 : Record "Cust. Invoice Disc.";
    BEGIN
      if not AllowInvDisc then
        ERROR(
          Text005,
          CustInvDisc.TABLECAPTION,FIELDCAPTION("Invoice Disc. Code"),"Invoice Disc. Code");
    END;

    LOCAL PROCEDURE UpdateTaxBreakdown@1480000(VAR TempSalesTaxAmtLine@1020002 : TEMPORARY Record "Sales Tax Amount Line";UpdateTaxAmount@1480000 : Boolean);
    VAR
      PrevPrintOrder@1020001 : Integer;
      PrevTaxPercent@1020000 : Decimal;
    BEGIN
      CLEAR(BreakdownLabel);
      CLEAR(BreakdownAmt);
      BrkIdx := 0;
      PrevPrintOrder := 0;
      PrevTaxPercent := 0;
      if TaxArea."Country/Region" = TaxArea."Country/Region"::CA then
        BreakdownTitle := Text006
      else
        BreakdownTitle := Text007;
      with TempSalesTaxAmtLine do begin
        RESET;
        SETCURRENTKEY("Print Order","Tax Area Code for Key","Tax Jurisdiction Code");
        if FIND('-') then
          repeat
            if ("Print Order" = 0) or
               ("Print Order" <> PrevPrintOrder) or
               ("Tax %" <> PrevTaxPercent)
            then begin
              BrkIdx := BrkIdx + 1;
              if BrkIdx > ARRAYLEN(BreakdownAmt) then begin
                BrkIdx := BrkIdx - 1;
                BreakdownLabel[BrkIdx] := Text008;
              end else
                BreakdownLabel[BrkIdx] := STRSUBSTNO("Print Description","Tax %");
            end;
            BreakdownAmt[BrkIdx] := BreakdownAmt[BrkIdx] + "Tax Amount";
            if UpdateTaxAmount then
              TaxAmount := TaxAmount + "Tax Amount"
            else
              BreakdownAmt[BrkIdx] := BreakdownAmt[BrkIdx] + "Tax Difference";
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE OnActivateForm@1020000();
    BEGIN
      if "No." = PrevNo then
        GetVATSpecification;
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforeCalculateSalesTaxSalesStats@1020001(VAR SalesHeader@1020000 : Record "Sales Header";VAR SalesTaxAmountLine@1020001 : Record "Sales Tax Amount Line";VAR SalesTaxAmountLine2@1020002 : Record "Sales Tax Amount Line";VAR SalesTaxCalculationOverridden@1020003 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

