OBJECT Page 2810 Native - Sales Inv. Entity
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=161412.743T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=nativeInvoicingSalesInvoices];
    SourceTable="Sales Invoice Entity Aggregate";
    DelayedInsert=true;
    PageType=List;
    OnOpenPage=BEGIN
                 BINDSUBSCRIPTION(NativeAPILanguageHandler);
               END;

    OnAfterGetRecord=VAR
                       SalesHeader@1000 : Record "Sales Header";
                       SalesInvoiceHeader@1002 : Record "Sales Invoice Header";
                       SalesInvoiceAggregator@1001 : Codeunit "Sales Invoice Aggregator";
                       GraphMgtGeneralTools@1003 : Codeunit "Graph Mgt - General Tools";
                     BEGIN
                       if not GetParentRecordNativeInvoicing(SalesHeader,SalesInvoiceHeader) then begin
                         GraphMgtGeneralTools.CleanAggregateWithoutParent(Rec);
                         exit;
                       end;

                       SetCalculatedFields(SalesHeader,SalesInvoiceHeader);
                       SalesInvoiceAggregator.RedistributeInvoiceDiscounts(Rec);
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                END;

    OnInsertRecord=VAR
                     SalesHeader@1003 : Record "Sales Header";
                     SalesInvoiceHeader@1001 : Record "Sales Invoice Header";
                     SalesInvoiceAggregator@1002 : Codeunit "Sales Invoice Aggregator";
                   BEGIN
                     CheckCustomer;
                     ProcessBillingPostalAddress;

                     SalesInvoiceAggregator.PropagateOnInsert(Rec,TempFieldBuffer);
                     SetDates;

                     UpdateAttachments;
                     UpdateLines;
                     UpdateDiscount;
                     UpdateCoupons;
                     SetNoteForCustomer;

                     if not GetParentRecordNativeInvoicing(SalesHeader,SalesInvoiceHeader) then
                       ERROR(AggregateParentIsMissingErr);

                     SetCalculatedFields(SalesHeader,SalesInvoiceHeader);

                     exit(false);
                   END;

    OnModifyRecord=VAR
                     SalesHeader@1001 : Record "Sales Header";
                     SalesInvoiceHeader@1000 : Record "Sales Invoice Header";
                     SalesInvoiceAggregator@1002 : Codeunit "Sales Invoice Aggregator";
                   BEGIN
                     if Posted then begin
                       if not IsAttachmentsSet then
                         exit(false);
                       UpdateAttachments;
                       SetAttachmentsJSON;
                       exit(false);
                     end;

                     if xRec.Id <> Id then
                       ERROR(CannotChangeIDErr);

                     ProcessBillingPostalAddress;

                     SalesInvoiceAggregator.PropagateOnModify(Rec,TempFieldBuffer);

                     UpdateAttachments;
                     UpdateLines;
                     UpdateDiscount;
                     UpdateCoupons;
                     SetNoteForCustomer;

                     if not GetParentRecordNativeInvoicing(SalesHeader,SalesInvoiceHeader) then
                       ERROR(AggregateParentIsMissingErr);

                     SetCalculatedFields(SalesHeader,SalesInvoiceHeader);

                     exit(false);
                   END;

    OnDeleteRecord=VAR
                     SalesInvoiceAggregator@1000 : Codeunit "Sales Invoice Aggregator";
                   BEGIN
                     SalesInvoiceAggregator.PropagateOnDelete(Rec);

                     exit(false);
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 21  ;0   ;Container ;
                Name=Control21;
                ContainerType=ContentArea }

    { 20  ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 19  ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=id];
                ApplicationArea=#All;
                SourceExpr=Id;
                OnValidate=BEGIN
                             CheckStatus;
                             RegisterFieldSet(FIELDNO(Id));
                           END;

                ImplicitType=GUID }

    { 18  ;2   ;Field     ;
                Name=number;
                CaptionML=[@@@={Locked};
                           ENU=Number];
                ApplicationArea=#All;
                SourceExpr="No.";
                Editable=FALSE;
                ImplicitType=Code20 }

    { 14  ;2   ;Field     ;
                Name=customerId;
                CaptionML=[@@@={Locked};
                           ENU=customerId];
                ApplicationArea=#All;
                SourceExpr="Customer Id";
                OnValidate=VAR
                             O365SalesInvoiceMgmt@1000 : Codeunit "O365 Sales Invoice Mgmt";
                           BEGIN
                             CheckStatus;

                             Customer.SETRANGE(Id,"Customer Id");

                             if not Customer.FINDFIRST then
                               ERROR(CannotFindCustomerErr);

                             O365SalesInvoiceMgmt.EnforceCustomerTemplateIntegrity(Customer);

                             "Sell-to Customer No." := Customer."No.";
                             RegisterFieldSet(FIELDNO("Customer Id"));
                             RegisterFieldSet(FIELDNO("Sell-to Customer No."));
                             CustomerIdSet := true;
                           END;

                ImplicitType=GUID }

    { 23  ;2   ;Field     ;
                Name=graphContactId;
                CaptionML=[@@@={Locked};
                           ENU=graphContactId];
                ApplicationArea=#All;
                SourceExpr="Contact Graph Id";
                OnValidate=VAR
                             Contact@1000 : Record Contact;
                             Customer@1001 : Record Customer;
                             GraphIntContact@1003 : Codeunit "Graph Int. - Contact";
                           BEGIN
                             CheckStatus;

                             if ("Contact Graph Id" = '') and CustomerIdSet then
                               exit;

                             RegisterFieldSet(FIELDNO("Contact Graph Id"));

                             if "Contact Graph Id" = '' then
                               ERROR(ContactIdHasToHaveValueErr);

                             if not GraphIntContact.FindOrCreateCustomerFromGraphContactSafe("Contact Graph Id",Customer,Contact) then
                               exit;

                             UpdateCustomerFromGraphContactId(Customer);

                             if Contact."Company No." = Customer."No." then begin
                               VALIDATE("Sell-to Contact No.",Contact."No.");
                               VALIDATE("Sell-to Contact",Contact.Name);

                               RegisterFieldSet(FIELDNO("Sell-to Contact No."));
                               RegisterFieldSet(FIELDNO("Sell-to Contact"));
                             end;
                           END;

                ImplicitType=Text250 }

    { 36  ;2   ;Field     ;
                Name=customerNumber;
                CaptionML=[@@@={Locked};
                           ENU=customerNumber];
                ApplicationArea=#All;
                SourceExpr="Sell-to Customer No.";
                OnValidate=VAR
                             O365SalesInvoiceMgmt@1000 : Codeunit "O365 Sales Invoice Mgmt";
                           BEGIN
                             CheckStatus;

                             if Customer."No." <> '' then
                               exit;

                             if not Customer.GET("Sell-to Customer No.") then
                               ERROR(CannotFindCustomerErr);

                             O365SalesInvoiceMgmt.EnforceCustomerTemplateIntegrity(Customer);

                             "Customer Id" := Customer.Id;
                             RegisterFieldSet(FIELDNO("Customer Id"));
                             RegisterFieldSet(FIELDNO("Sell-to Customer No."));
                           END;

                ImplicitType=Code20 }

    { 3   ;2   ;Field     ;
                Name=taxLiable;
                CaptionML=ENU=taxLiable;
                ToolTipML=ENU=Specifies if the sales invoice contains sales tax.;
                ApplicationArea=#All;
                SourceExpr="Tax Liable";
                Importance=Additional;
                OnValidate=BEGIN
                             CheckStatus;
                             RegisterFieldSet(FIELDNO("Tax Liable"));
                           END;

                ImplicitType=Boolean }

    { 26  ;2   ;Field     ;
                Name=taxAreaId;
                CaptionML=ENU=taxAreaId;
                ApplicationArea=#All;
                SourceExpr="Tax Area ID";
                OnValidate=BEGIN
                             CheckStatus;

                             RegisterFieldSet(FIELDNO("Tax Area ID"));

                             if IsUsingVAT then
                               RegisterFieldSet(FIELDNO("VAT Bus. Posting Group"))
                             else
                               RegisterFieldSet(FIELDNO("Tax Area Code"));
                           END;

                ImplicitType=GUID }

    { 33  ;2   ;Field     ;
                Name=taxAreaDisplayName;
                CaptionML=ENU=taxAreaDisplayName;
                ToolTipML=ENU=Specifies the tax area display name.;
                ApplicationArea=#All;
                SourceExpr=TaxAreaDisplayName;
                Editable=FALSE;
                ImplicitType=Text }

    { 5   ;2   ;Field     ;
                Name=taxRegistrationNumber;
                CaptionML=ENU=taxRegistrationNumber;
                ApplicationArea=#All;
                SourceExpr="VAT Registration No.";
                OnValidate=BEGIN
                             CheckStatus;
                             RegisterFieldSet(FIELDNO("VAT Registration No."));
                           END;

                ImplicitType=Text20 }

    { 15  ;2   ;Field     ;
                Name=customerName;
                CaptionML=[@@@={Locked};
                           ENU=customerName];
                ApplicationArea=#All;
                SourceExpr="Sell-to Customer Name";
                Editable=FALSE;
                ImplicitType=Text50 }

    { 27  ;2   ;Field     ;
                Name=customerEmail;
                CaptionML=[@@@={Locked};
                           ENU=customerEmail];
                ToolTipML=ENU=Specifies the email address of the customer.;
                ApplicationArea=#All;
                SourceExpr=CustomerEmail;
                Editable=FALSE;
                ImplicitType=Text }

    { 22  ;2   ;Field     ;
                Name=invoiceDate;
                CaptionML=[@@@={Locked};
                           ENU=invoiceDate];
                ApplicationArea=#All;
                SourceExpr="Document Date";
                OnValidate=BEGIN
                             CheckStatus;

                             DocumentDateVar := "Document Date";
                             DocumentDateSet := true;

                             RegisterFieldSet(FIELDNO("Document Date"));
                             RegisterFieldSet(FIELDNO("Posting Date"));
                           END;

                ImplicitType=Date }

    { 24  ;2   ;Field     ;
                Name=dueDate;
                CaptionML=[@@@={Locked};
                           ENU=dueDate];
                ApplicationArea=#All;
                SourceExpr="Due Date";
                OnValidate=BEGIN
                             CheckStatus;

                             DueDateVar := "Due Date";
                             DueDateSet := true;

                             RegisterFieldSet(FIELDNO("Due Date"));
                           END;

                ImplicitType=Date }

    { 6   ;2   ;Field     ;
                Name=billingPostalAddress;
                CaptionML=[@@@={Locked};
                           ENU=billingPostalAddress];
                ToolTipML=ENU=Specifies the billing address of the Sales Invoice.;
                ApplicationArea=#All;
                SourceExpr=BillingPostalAddressJSONText;
                OnValidate=BEGIN
                             CheckStatus;
                             BillingPostalAddressSet := true;
                           END;

                ODataEDMType=POSTALADDRESS;
                ImplicitType=Text }

    { 28  ;2   ;Field     ;
                Name=pricesIncludeTax;
                CaptionML=[@@@={Locked};
                           ENU=pricesIncludeTax];
                ApplicationArea=#All;
                SourceExpr="Prices Including VAT";
                Editable=FALSE;
                ImplicitType=Boolean }

    { 38  ;2   ;Field     ;
                Name=currencyCode;
                CaptionML=[@@@={Locked};
                           ENU=currencyCode];
                ToolTipML=ENU=Specifies the currency code.;
                ApplicationArea=#All;
                SourceExpr=CurrencyCodeTxt;
                Editable=FALSE;
                ImplicitType=Text }

    { 1   ;2   ;Field     ;
                Name=lines;
                CaptionML=[@@@={Locked};
                           ENU=lines];
                ToolTipML=ENU=Specifies Sales Invoice Lines;
                ApplicationArea=#All;
                SourceExpr=SalesInvoiceLinesJSON;
                OnValidate=BEGIN
                             CheckStatus;
                             SalesLinesSet := PreviousSalesInvoiceLinesJSON <> SalesInvoiceLinesJSON;
                           END;

                ODataEDMType=Collection(NATIVE-SALESINVOICE-LINE);
                ImplicitType=Text }

    { 17  ;2   ;Field     ;
                Name=subtotalAmount;
                CaptionML=ENU=subtotalAmount;
                ApplicationArea=#All;
                SourceExpr="Subtotal Amount";
                Editable=FALSE;
                ImplicitType=Decimal }

    { 11  ;2   ;Field     ;
                Name=discountAmount;
                CaptionML=[@@@={Locked};
                           ENU=discountAmount];
                ApplicationArea=#All;
                SourceExpr="Invoice Discount Amount";
                Editable=FALSE;
                ImplicitType=Decimal }

    { 10  ;2   ;Field     ;
                Name=discountAppliedBeforeTax;
                CaptionML=[@@@={Locked};
                           ENU=discountAppliedBeforeTax];
                ApplicationArea=#All;
                SourceExpr="Discount Applied Before Tax";
                Editable=FALSE;
                ImplicitType=Boolean }

    { 25  ;2   ;Field     ;
                Name=coupons;
                CaptionML=[@@@={Locked};
                           ENU=coupons];
                ToolTipML=ENU=Specifies Sales Invoice Coupons.;
                ApplicationArea=#All;
                SourceExpr=CouponsJSON;
                OnValidate=BEGIN
                             CheckStatus;
                             CouponsSet := PreviousCouponsJSON <> CouponsJSON;
                           END;

                ODataEDMType=Collection(NATIVE-SALESDOCUMENT-COUPON);
                ImplicitType=Text }

    { 9   ;2   ;Field     ;
                Name=totalAmountExcludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalAmountExcludingTax];
                ApplicationArea=#All;
                SourceExpr=Amount;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 8   ;2   ;Field     ;
                Name=totalTaxAmount;
                CaptionML=[@@@={Locked};
                           ENU=totalTaxAmount];
                ToolTipML=ENU=Specifies the total tax amount for the sales invoice.;
                ApplicationArea=#All;
                SourceExpr="Total Tax Amount";
                Editable=FALSE;
                ImplicitType=Decimal }

    { 7   ;2   ;Field     ;
                Name=totalAmountIncludingTax;
                CaptionML=[@@@={Locked};
                           ENU=totalAmountIncludingTax];
                ApplicationArea=#All;
                SourceExpr="Amount Including VAT";
                Editable=FALSE;
                ImplicitType=Decimal }

    { 16  ;2   ;Field     ;
                Name=noteForCustomer;
                CaptionML=ENU=noteForCustomer;
                ToolTipML=ENU=Specifies the note for the customer.;
                ApplicationArea=#All;
                SourceExpr=WorkDescription;
                OnValidate=BEGIN
                             CheckStatus;
                             NoteForCustomerSet := true;
                           END;

                ImplicitType=Text }

    { 13  ;2   ;Field     ;
                Name=status;
                CaptionML=[@@@={Locked};
                           ENU=status];
                ToolTipML=ENU=Specifies the status of the Sales Invoice (canceled, paid, on hold, created).;
                ApplicationArea=#All;
                SourceExpr=Status;
                Editable=FALSE;
                ImplicitType=Option }

    { 2   ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=lastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last Modified Date Time";
                Editable=FALSE;
                ImplicitType=DateTime }

    { 30  ;2   ;Field     ;
                Name=attachments;
                CaptionML=[@@@={Locked};
                           ENU=attachments];
                ToolTipML=ENU=Specifies Attachments;
                ApplicationArea=#All;
                SourceExpr=AttachmentsJSON;
                OnValidate=BEGIN
                             IsAttachmentsSet := AttachmentsJSON <> PreviousAttachmentsJSON;
                           END;

                ODataEDMType=Collection(NATIVE-ATTACHMENT);
                ImplicitType=Text }

    { 4   ;2   ;Field     ;
                Name=invoiceDiscountCalculation;
                CaptionML=ENU=invoiceDiscountCalculation;
                OptionCaptionML=[@@@={Locked};
                                 ENU=,%,Amount];
                ApplicationArea=#All;
                SourceExpr="Invoice Discount Calculation";
                OnValidate=BEGIN
                             CheckStatus;
                             RegisterFieldSet(FIELDNO("Invoice Discount Calculation"));
                             DiscountAmountSet := true;
                           END;

                ImplicitType=Option }

    { 31  ;2   ;Field     ;
                Name=invoiceDiscountValue;
                CaptionML=ENU=invoiceDiscountValue;
                ApplicationArea=#All;
                SourceExpr="Invoice Discount Value";
                OnValidate=BEGIN
                             CheckStatus;
                             RegisterFieldSet(FIELDNO("Invoice Discount Value"));
                             DiscountAmountSet := true;
                           END;

                ImplicitType=Decimal }

    { 32  ;2   ;Field     ;
                Name=remainingAmount;
                CaptionML=ENU=remainingAmount;
                ToolTipML=ENU=Specifies the Status for the Invoice;
                ApplicationArea=#All;
                SourceExpr=RemainingAmountVar;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 34  ;2   ;Field     ;
                Name=lastEmailSentStatus;
                CaptionML=[@@@={Locked};
                           ENU=lastEmailSentStatus];
                ToolTipML=ENU=Specifies the status of the last sent email, Not Sent, In Process, Finished, or Error.;
                ApplicationArea=#All;
                SourceExpr=LastEmailSentStatus;
                Editable=FALSE;
                ImplicitType=Option }

    { 35  ;2   ;Field     ;
                Name=lastEmailSentTime;
                CaptionML=[@@@={Locked};
                           ENU=lastEmailSentTime];
                ToolTipML=ENU=Specifies the time that the last email was sent.;
                ApplicationArea=#All;
                SourceExpr=LastEmailSentTime;
                Editable=FALSE;
                ImplicitType=DateTime }

    { 12  ;2   ;Field     ;
                Name=isTest;
                CaptionML=[@@@={Locked};
                           ENU=isTest];
                ToolTipML=ENU=Specifies if the sales invoice is a test invoice.;
                ApplicationArea=#All;
                SourceExpr=IsTest;
                Editable=FALSE;
                ImplicitType=Boolean }

    { 37  ;2   ;Field     ;
                Name=isCustomerBlocked;
                CaptionML=[@@@={Locked};
                           ENU=isCustomerBlocked];
                ToolTipML=ENU=Specifies if the customer is blocked.;
                ApplicationArea=#All;
                SourceExpr=IsCustomerBlocked;
                Editable=FALSE;
                ImplicitType=Boolean }

    { 29  ;2   ;Part      ;
                Name=Payments;
                CaptionML=[@@@={Locked};
                           ENU=Payments];
                ApplicationArea=#All;
                SubPageLink="Applies-to Invoice Id"=FIELD(Id);
                PagePartID="Native - Payments";
                PartType=Page }

  }
  CODE
  {
    VAR
      CannotChangeIDErr@1004 : TextConst '@@@={Locked};ENU=The id cannot be changed.';
      TempFieldBuffer@1001 : TEMPORARY Record "Field Buffer";
      Customer@1003 : Record Customer;
      DummySalesLine@1017 : Record "Sales Line";
      NativeAPILanguageHandler@1040 : Codeunit "Native API - Language Handler";
      BillingPostalAddressJSONText@1002 : Text;
      CustomerEmail@1010 : Text;
      SalesInvoiceLinesJSON@1006 : Text;
      PreviousSalesInvoiceLinesJSON@1009 : Text;
      CouponsJSON@1022 : Text;
      PreviousCouponsJSON@1023 : Text;
      AttachmentsJSON@1025 : Text;
      PreviousAttachmentsJSON@1026 : Text;
      TaxAreaDisplayName@1035 : Text;
      BillingPostalAddressSet@1000 : Boolean;
      CannotFindCustomerErr@1005 : TextConst '@@@={Locked};ENU=The customer cannot be found.';
      ContactIdHasToHaveValueErr@1007 : TextConst 'ENU=Contact Id must have a value set.';
      SalesLinesSet@1008 : Boolean;
      CouponsSet@1024 : Boolean;
      DiscountAmountSet@1013 : Boolean;
      IsAttachmentsSet@1027 : Boolean;
      InvoiceDiscountAmount@1011 : Decimal;
      CustomerNotProvidedErr@1012 : TextConst '@@@={Locked};ENU=A customerNumber or a customerID must be provided.';
      InvoiceDiscountPct@1030 : Decimal;
      WorkDescription@1014 : Text;
      NoteForCustomerSet@1015 : Boolean;
      CannotChangeWorkDescriptionOnPostedInvoiceErr@1016 : TextConst 'ENU=The Note for customer cannot be changed on the sent invoice.';
      DocumentDateSet@1018 : Boolean;
      DocumentDateVar@1019 : Date;
      DueDateSet@1020 : Boolean;
      DueDateVar@1021 : Date;
      PostedInvoiceActionErr@1041 : TextConst 'ENU=The action can be applied to a posted invoice only.';
      DraftInvoiceActionErr@1042 : TextConst 'ENU=The action can be applied to a draft invoice only.';
      CannotFindInvoiceErr@1043 : TextConst 'ENU=The invoice cannot be found.';
      CancelingInvoiceFailedCreditMemoCreatedAndPostedErr@1046 : TextConst '@@@=%1 - Error Message;ENU=Canceling the invoice failed because of the following error: \\%1\\A credit memo is posted.';
      CancelingInvoiceFailedCreditMemoCreatedButNotPostedErr@1047 : TextConst '@@@=%1 - Error Message;ENU=Canceling the invoice failed because of the following error: \\%1\\A credit memo is created but not posted.';
      CancelingInvoiceFailedNothingCreatedErr@1048 : TextConst '@@@=%1 - Error Message;ENU=Canceling the invoice failed because of the following error: \\%1.';
      EmptyEmailErr@1049 : TextConst 'ENU=The send-to email is empty. Specify email either for the customer or for the invoice in email preview.';
      AlreadyCanceledErr@1031 : TextConst 'ENU=The invoice cannot be canceled because it has already been canceled.';
      InvoiceDiscountPctMustBePositiveErr@1028 : TextConst 'ENU=Invoice discount percentage must be positive.';
      InvoiceDiscountPctMustBeBelowHundredErr@1029 : TextConst 'ENU=Invoice discount percentage must be below 100.';
      InvoiceDiscountAmtMustBePositiveErr@1033 : TextConst 'ENU=Invoice discount must be positive.';
      RemainingAmountVar@1034 : Decimal;
      CustomerIdSet@1037 : Boolean;
      LastEmailSentTime@1036 : DateTime;
      CannotModifyPostedInvioceErr@1038 : TextConst 'ENU=The invoice has been posted and can no longer be modified. You are only allowed to change the attachments.';
      LastEmailSentStatus@1039 : '"Not Sent","In Process",Finished,Error';
      AggregateParentIsMissingErr@1044 : TextConst 'ENU=Please try the operation again. If the error persists, please contact support.';
      CurrencyCodeTxt@1052 : Text;
      LCYCurrencyCode@1045 : Code[10];
      IsCustomerBlocked@1032 : Boolean;

    LOCAL PROCEDURE SetAttachmentsJSON@37();
    VAR
      NativeAttachments@1004 : Codeunit "Native - Attachments";
    BEGIN
      AttachmentsJSON := NativeAttachments.GenerateAttachmentsJSON(Id);
      PreviousAttachmentsJSON := AttachmentsJSON;
    END;

    LOCAL PROCEDURE SetCalculatedFields@6(VAR SalesHeader@1006 : Record "Sales Header";VAR SalesInvoiceHeader@1004 : Record "Sales Invoice Header");
    VAR
      TempSalesInvoiceLineAggregate@1002 : TEMPORARY Record "Sales Invoice Line Aggregate";
      DummyNativeAPITaxSetup@1005 : Record "Native - API Tax Setup";
      GraphMgtGeneralTools@1007 : Codeunit "Graph Mgt - General Tools";
      GraphMgtSalesInvoice@1000 : Codeunit "Graph Mgt - Sales Invoice";
      NativeEDMTypes@1001 : Codeunit "Native - EDM Types";
      NativeCoupons@1003 : Codeunit "Native - Coupons";
    BEGIN
      DocumentDateVar := "Document Date";
      DueDateVar := "Due Date";
      BillingPostalAddressJSONText := GraphMgtSalesInvoice.BillToCustomerAddressToJSON(Rec);
      CurrencyCodeTxt := GraphMgtGeneralTools.TranslateNAVCurrencyCodeToCurrencyCode(LCYCurrencyCode,"Currency Code");

      if "Sell-to Customer No." <> '' then
        if Customer.GET("Sell-to Customer No.") then begin
          CustomerEmail := Customer."E-Mail";
          IsCustomerBlocked := Customer.IsBlocked
        end else begin
          IsCustomerBlocked := false;
          CustomerEmail := '';
        end;

      LoadLines(TempSalesInvoiceLineAggregate,Rec);
      SalesInvoiceLinesJSON :=
        NativeEDMTypes.WriteSalesLinesJSON(TempSalesInvoiceLineAggregate);
      PreviousSalesInvoiceLinesJSON := SalesInvoiceLinesJSON;

      CouponsJSON := NativeCoupons.WriteCouponsJSON(DummySalesLine."Document Type"::Invoice,"No.",Posted);
      PreviousCouponsJSON := CouponsJSON;

      SetAttachmentsJSON;
      TaxAreaDisplayName := DummyNativeAPITaxSetup.GetTaxAreaDisplayName("Tax Area ID");
      GetNoteForCustomer(SalesHeader,SalesInvoiceHeader);
      GetRemainingAmount;
      GetLastEmailSentFields(SalesHeader,SalesInvoiceHeader);
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(BillingPostalAddressJSONText);
      CLEAR(SalesInvoiceLinesJSON);
      CLEAR(PreviousSalesInvoiceLinesJSON);
      CLEAR(SalesLinesSet);
      CLEAR(CouponsJSON);
      CLEAR(PreviousCouponsJSON);
      CLEAR(CouponsSet);
      CLEAR(AttachmentsJSON);
      CLEAR(PreviousAttachmentsJSON);
      CLEAR(IsAttachmentsSet);
      CLEAR(WorkDescription);
      CLEAR(DueDateSet);
      CLEAR(CurrencyCodeTxt);
      "Due Date" := 19990101D;
      CLEAR(DocumentDateSet);
      CLEAR(DocumentDateVar);
      CLEAR(RemainingAmountVar);
      CLEAR(TaxAreaDisplayName);
      CLEAR(LastEmailSentTime);
      CLEAR(LastEmailSentStatus);
      TempFieldBuffer.DELETEALL;
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer);
    VAR
      LastOrderNo@1001 : Integer;
    BEGIN
      LastOrderNo := 1;
      if TempFieldBuffer.FINDLAST then
        LastOrderNo := TempFieldBuffer.Order + 1;

      CLEAR(TempFieldBuffer);
      TempFieldBuffer.Order := LastOrderNo;
      TempFieldBuffer."Table ID" := DATABASE::"Sales Invoice Entity Aggregate";
      TempFieldBuffer."Field ID" := FieldNo;
      TempFieldBuffer.INSERT;
    END;

    LOCAL PROCEDURE ProcessBillingPostalAddress@5();
    VAR
      GraphMgtSalesInvoice@1000 : Codeunit "Graph Mgt - Sales Invoice";
    BEGIN
      if not BillingPostalAddressSet then
        exit;

      GraphMgtSalesInvoice.ProcessComplexTypes(Rec,BillingPostalAddressJSONText);

      if xRec."Sell-to Address" <> "Sell-to Address" then
        RegisterFieldSet(FIELDNO("Sell-to Address"));

      if xRec."Sell-to Address 2" <> "Sell-to Address 2" then
        RegisterFieldSet(FIELDNO("Sell-to Address 2"));

      if xRec."Sell-to City" <> "Sell-to City" then
        RegisterFieldSet(FIELDNO("Sell-to City"));

      if xRec."Sell-to Country/Region Code" <> "Sell-to Country/Region Code" then
        RegisterFieldSet(FIELDNO("Sell-to Country/Region Code"));

      if xRec."Sell-to Post Code" <> "Sell-to Post Code" then
        RegisterFieldSet(FIELDNO("Sell-to Post Code"));

      if xRec."Sell-to County" <> "Sell-to County" then
        RegisterFieldSet(FIELDNO("Sell-to County"));
    END;

    LOCAL PROCEDURE UpdateCustomerFromGraphContactId@2(VAR Customer@1001 : Record Customer);
    VAR
      O365SalesInvoiceMgmt@1002 : Codeunit "O365 Sales Invoice Mgmt";
      UpdateCustomer@1000 : Boolean;
    BEGIN
      UpdateCustomer := "Sell-to Customer No." = '';
      if not UpdateCustomer then begin
        TempFieldBuffer.RESET;
        TempFieldBuffer.SETRANGE("Field ID",FIELDNO("Customer Id"));
        UpdateCustomer := not TempFieldBuffer.FINDFIRST;
        TempFieldBuffer.RESET;
      end;

      if UpdateCustomer then begin
        VALIDATE("Customer Id",Customer.Id);
        VALIDATE("Sell-to Customer No.",Customer."No.");
        RegisterFieldSet(FIELDNO("Customer Id"));
        RegisterFieldSet(FIELDNO("Sell-to Customer No."));
      end;

      O365SalesInvoiceMgmt.EnforceCustomerTemplateIntegrity(Customer);
    END;

    LOCAL PROCEDURE LoadLines@1(VAR TempSalesInvoiceLineAggregate@1000 : TEMPORARY Record "Sales Invoice Line Aggregate";VAR SalesInvoiceEntityAggregate@1001 : Record "Sales Invoice Entity Aggregate");
    VAR
      SalesInvoiceAggregator@1002 : Codeunit "Sales Invoice Aggregator";
    BEGIN
      TempSalesInvoiceLineAggregate.SETRANGE("Document Id",SalesInvoiceEntityAggregate.Id);
      SalesInvoiceAggregator.LoadLines(TempSalesInvoiceLineAggregate,TempSalesInvoiceLineAggregate.GETFILTER("Document Id"));
    END;

    LOCAL PROCEDURE UpdateLines@4();
    VAR
      TempSalesInvoiceLineAggregate@1002 : TEMPORARY Record "Sales Invoice Line Aggregate";
      SalesInvoiceAggregator@1000 : Codeunit "Sales Invoice Aggregator";
      NativeEDMTypes@1001 : Codeunit "Native - EDM Types";
    BEGIN
      if not SalesLinesSet then
        exit;

      NativeEDMTypes.ParseSalesLinesJSON(
        DummySalesLine."Document Type"::Invoice,SalesInvoiceLinesJSON,TempSalesInvoiceLineAggregate,Id);
      TempSalesInvoiceLineAggregate.SETRANGE("Document Id",Id);
      SalesInvoiceAggregator.PropagateMultipleLinesUpdate(TempSalesInvoiceLineAggregate);
      FIND;
    END;

    LOCAL PROCEDURE UpdateDiscount@13();
    VAR
      SalesHeader@1002 : Record "Sales Header";
      SalesLine@1004 : Record "Sales Line";
      TotalSalesLine@1006 : Record "Sales Line";
      CustInvDisc@1008 : Record "Cust. Invoice Disc.";
      SalesInvoiceAggregator@1000 : Codeunit "Sales Invoice Aggregator";
      SalesCalcDiscountByType@1001 : Codeunit "Sales - Calc Discount By Type";
      O365Discounts@1003 : Codeunit "O365 Discounts";
      DocumentTotals@1005 : Codeunit "Document Totals";
      VatAmount@1007 : Decimal;
    BEGIN
      if Posted then
        exit;

      if SalesLinesSet and (not DiscountAmountSet) then begin
        SalesInvoiceAggregator.RedistributeInvoiceDiscounts(Rec);
        exit;
      end;

      if not DiscountAmountSet then
        exit;

      case "Invoice Discount Calculation" of
        "Invoice Discount Calculation"::"%":
          begin
            if "Invoice Discount Value" < 0 then
              ERROR(InvoiceDiscountPctMustBePositiveErr);
            if "Invoice Discount Value" > 100 then
              ERROR(InvoiceDiscountPctMustBeBelowHundredErr);
            InvoiceDiscountPct := "Invoice Discount Value";
          end;
        "Invoice Discount Calculation"::Amount:
          begin
            InvoiceDiscountAmount := "Invoice Discount Value";
            if "Invoice Discount Value" < 0 then
              ERROR(InvoiceDiscountAmtMustBePositiveErr);
          end;
      end;

      SalesHeader.GET("Document Type"::Invoice,"No.");
      if InvoiceDiscountPct <> 0 then begin
        O365Discounts.ApplyInvoiceDiscountPercentage(SalesHeader,InvoiceDiscountPct);
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        if SalesLine.FINDFIRST then begin
          SalesInvoiceAggregator.RedistributeInvoiceDiscounts(Rec);
          DocumentTotals.CalculateSalesTotals(TotalSalesLine,VatAmount,SalesLine);
          "Invoice Discount Amount" := TotalSalesLine."Inv. Discount Amount";
          RegisterFieldSet(FIELDNO("Invoice Discount Amount"));
        end;
      end else begin
        CustInvDisc.SETRANGE(Code,"No.");
        CustInvDisc.DELETEALL;
        SalesCalcDiscountByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,SalesHeader);
        SalesInvoiceAggregator.RedistributeInvoiceDiscounts(Rec);
      end;
    END;

    LOCAL PROCEDURE UpdateCoupons@14();
    VAR
      NativeEDMTypes@1000 : Codeunit "Native - EDM Types";
    BEGIN
      if not CouponsSet then
        exit;

      NativeEDMTypes.ParseCouponsJSON("Contact Graph Id",DummySalesLine."Document Type"::Invoice,"No.",CouponsJSON);
    END;

    LOCAL PROCEDURE UpdateAttachments@7();
    VAR
      NativeAttachments@1001 : Codeunit "Native - Attachments";
    BEGIN
      if not IsAttachmentsSet then
        exit;

      NativeAttachments.UpdateAttachments(Id,AttachmentsJSON,PreviousAttachmentsJSON);
    END;

    LOCAL PROCEDURE CheckCustomer@3();
    VAR
      BlankGUID@1000 : GUID;
    BEGIN
      if ("Sell-to Customer No." = '') and
         ("Customer Id" = BlankGUID)
      then
        ERROR(CustomerNotProvidedErr);
    END;

    LOCAL PROCEDURE CheckStatus@28();
    BEGIN
      if Posted then
        ERROR(CannotModifyPostedInvioceErr);
    END;

    LOCAL PROCEDURE GetNoteForCustomer@9(VAR SalesHeader@1000 : Record "Sales Header";VAR SalesInvoiceHeader@1001 : Record "Sales Invoice Header");
    BEGIN
      if Posted then
        WorkDescription := SalesInvoiceHeader.GetWorkDescriptionWorkDescriptionCalculated
      else
        WorkDescription := SalesHeader.GetWorkDescriptionWorkDescriptionCalculated;
    END;

    LOCAL PROCEDURE GetLastEmailSentFields@23(VAR SalesHeader@1003 : Record "Sales Header";VAR SalesInvoiceHeader@1002 : Record "Sales Invoice Header");
    BEGIN
      if Posted then begin
        LastEmailSentTime := SalesInvoiceHeader."Last Email Sent Time";
        LastEmailSentStatus := SalesInvoiceHeader."Last Email Sent Status";
      end else begin
        LastEmailSentTime := SalesHeader."Last Email Sent Time";
        LastEmailSentStatus := SalesHeader."Last Email Sent Status";
      end;
    END;

    LOCAL PROCEDURE GetRemainingAmount@16();
    VAR
      SalesInvoiceHeader@1000 : Record "Sales Invoice Header";
    BEGIN
      RemainingAmountVar := "Amount Including VAT";
      if Posted then
        if SalesInvoiceHeader.GET("No.") then begin
          RemainingAmountVar := SalesInvoiceHeader.GetRemainingAmount;
          if IsInvoiceCanceled then
            RemainingAmountVar := 0;
        end;
    END;

    LOCAL PROCEDURE SetNoteForCustomer@22();
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      if not NoteForCustomerSet then
        exit;

      if Posted then
        ERROR(CannotChangeWorkDescriptionOnPostedInvoiceErr);

      SalesHeader.GET(SalesHeader."Document Type"::Invoice,"No.");
      SalesHeader.SetWorkDescription(WorkDescription);
      SalesHeader.MODIFY(true);
      FIND;
    END;

    LOCAL PROCEDURE SetDates@8();
    VAR
      SalesInvoiceAggregator@1000 : Codeunit "Sales Invoice Aggregator";
    BEGIN
      if not (DueDateSet or DocumentDateSet) then
        exit;

      TempFieldBuffer.RESET;
      TempFieldBuffer.DELETEALL;

      if DocumentDateSet then begin
        "Document Date" := DocumentDateVar;
        "Posting Date" := DocumentDateVar;
        RegisterFieldSet(FIELDNO("Document Date"));
        RegisterFieldSet(FIELDNO("Posting Date"));
      end;

      if DueDateSet then begin
        "Due Date" := DueDateVar;
        RegisterFieldSet(FIELDNO("Due Date"));
      end;

      SalesInvoiceAggregator.PropagateOnModify(Rec,TempFieldBuffer);
      FIND;
    END;

    LOCAL PROCEDURE GetPostedInvoice@35(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    BEGIN
      if not Posted then
        ERROR(PostedInvoiceActionErr);

      SalesInvoiceHeader.SETRANGE(Id,Id);
      if not SalesInvoiceHeader.FINDFIRST then
        ERROR(CannotFindInvoiceErr);
    END;

    LOCAL PROCEDURE GetDraftInvoice@36(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
      if Posted then
        ERROR(DraftInvoiceActionErr);

      SalesHeader.SETRANGE(Id,Id);
      if not SalesHeader.FINDFIRST then
        ERROR(CannotFindInvoiceErr);
    END;

    LOCAL PROCEDURE CheckSendToEmailAddress@21(DocumentNo@1000 : Code[20]);
    BEGIN
      if GetSendToEmailAddress(DocumentNo) = '' then
        ERROR(EmptyEmailErr);
    END;

    LOCAL PROCEDURE GetSendToEmailAddress@26(DocumentNo@1001 : Code[20]) : Text[250];
    VAR
      EmailAddress@1000 : Text[250];
    BEGIN
      EmailAddress := GetDocumentEmailAddress(DocumentNo);
      if EmailAddress <> '' then
        exit(EmailAddress);
      EmailAddress := GetCustomerEmailAddress;
      exit(EmailAddress);
    END;

    LOCAL PROCEDURE GetCustomerEmailAddress@24() : Text[250];
    BEGIN
      if not Customer.GET("Sell-to Customer No.") then
        exit('');
      exit(Customer."E-Mail");
    END;

    LOCAL PROCEDURE GetDocumentEmailAddress@58(DocumentNo@1000 : Code[20]) : Text[250];
    VAR
      EmailParameter@1002 : Record "Email Parameter";
    BEGIN
      if not EmailParameter.GET(DocumentNo,"Document Type",EmailParameter."Parameter Type"::Address) then
        exit('');
      exit(EmailParameter."Parameter Value");
    END;

    LOCAL PROCEDURE CheckInvoiceCanBeCanceled@32(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    VAR
      CorrectPostedSalesInvoice@1001 : Codeunit "Correct Posted Sales Invoice";
    BEGIN
      if IsInvoiceCanceled then
        ERROR(AlreadyCanceledErr);
      CorrectPostedSalesInvoice.TestCorrectInvoiceIsAllowed(SalesInvoiceHeader,true);
    END;

    LOCAL PROCEDURE IsInvoiceCanceled@25() : Boolean;
    BEGIN
      exit(Status = Status::Canceled);
    END;

    LOCAL PROCEDURE PostInvoice@20(VAR SalesHeader@1001 : Record "Sales Header";VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    VAR
      DummyO365SalesDocument@1003 : Record "O365 Sales Document";
      LinesInstructionMgt@1005 : Codeunit "Lines Instruction Mgt.";
      O365SendResendInvoice@1002 : Codeunit "O365 Send + Resend Invoice";
      PreAssignedNo@1006 : Code[20];
    BEGIN
      O365SendResendInvoice.CheckDocumentIfNoItemsExists(SalesHeader,false,DummyO365SalesDocument);
      LinesInstructionMgt.SalesCheckAllLinesHaveQuantityAssigned(SalesHeader);
      PreAssignedNo := SalesHeader."No.";
      SalesHeader.SendToPosting(CODEUNIT::"Sales-Post");
      SalesInvoiceHeader.SETCURRENTKEY("Pre-Assigned No.");
      SalesInvoiceHeader.SETRANGE("Pre-Assigned No.",PreAssignedNo);
      SalesInvoiceHeader.FINDFIRST;
    END;

    LOCAL PROCEDURE SendPostedInvoice@34(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    VAR
      O365SetupEmail@1001 : Codeunit "O365 Setup Email";
      O365SalesEmailManagement@1002 : Codeunit "O365 Sales Email Management";
    BEGIN
      O365SetupEmail.SilentSetup;
      CheckSendToEmailAddress(SalesInvoiceHeader."No.");
      O365SalesEmailManagement.NativeAPISaveEmailBodyText(Id);

      SalesInvoiceHeader.SETRECFILTER;
      SalesInvoiceHeader.EmailRecords(false);
    END;

    LOCAL PROCEDURE SendDraftInvoice@15(VAR SalesHeader@1000 : Record "Sales Header");
    VAR
      DummyO365SalesDocument@1003 : Record "O365 Sales Document";
      LinesInstructionMgt@1002 : Codeunit "Lines Instruction Mgt.";
      O365SendResendInvoice@1001 : Codeunit "O365 Send + Resend Invoice";
      O365SetupEmail@1004 : Codeunit "O365 Setup Email";
      O365SalesEmailManagement@1005 : Codeunit "O365 Sales Email Management";
    BEGIN
      O365SendResendInvoice.CheckDocumentIfNoItemsExists(SalesHeader,false,DummyO365SalesDocument);
      LinesInstructionMgt.SalesCheckAllLinesHaveQuantityAssigned(SalesHeader);
      O365SetupEmail.SilentSetup;
      CheckSendToEmailAddress(SalesHeader."No.");

      O365SalesEmailManagement.NativeAPISaveEmailBodyText(Id);
      SalesHeader.SETRECFILTER;
      SalesHeader.EmailRecords(false);
    END;

    LOCAL PROCEDURE SendCanceledInvoice@41(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    VAR
      JobQueueEntry@1001 : Record "Job Queue Entry";
      O365SetupEmail@1002 : Codeunit "O365 Setup Email";
      O365SalesEmailManagement@1003 : Codeunit "O365 Sales Email Management";
      O365SalesCancelInvoice@1005 : Codeunit "O365 Sales Cancel Invoice";
      GraphMail@1004 : Codeunit "Graph Mail";
    BEGIN
      O365SetupEmail.SilentSetup;
      CheckSendToEmailAddress(SalesInvoiceHeader."No.");
      O365SalesEmailManagement.NativeAPISaveEmailBodyText(Id);

      JobQueueEntry.INIT;
      JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
      JobQueueEntry."Object ID to Run" := CODEUNIT::"O365 Sales Cancel Invoice";
      JobQueueEntry."Maximum No. of Attempts to Run" := 3;
      JobQueueEntry."Record ID to Process" := SalesInvoiceHeader.RECORDID;

      if GraphMail.IsEnabled and GraphMail.HasConfiguration then
        O365SalesCancelInvoice.SendInvoiceCancelationEmail(SalesInvoiceHeader)
      else
        CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
    END;

    LOCAL PROCEDURE CancelInvoice@39(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    VAR
      SalesCrMemoHeader@1007 : Record "Sales Cr.Memo Header";
      SalesHeader@1001 : Record "Sales Header";
    BEGIN
      GetPostedInvoice(SalesInvoiceHeader);
      CheckInvoiceCanBeCanceled(SalesInvoiceHeader);
      if not CODEUNIT.RUN(CODEUNIT::"Correct Posted Sales Invoice",SalesInvoiceHeader) then begin
        SalesCrMemoHeader.SETRANGE("Applies-to Doc. No.",SalesInvoiceHeader."No.");
        if SalesCrMemoHeader.FINDFIRST then
          ERROR(CancelingInvoiceFailedCreditMemoCreatedAndPostedErr,GETLASTERRORTEXT);
        SalesHeader.SETRANGE("Applies-to Doc. No.",SalesInvoiceHeader."No.");
        if SalesHeader.FINDFIRST then
          ERROR(CancelingInvoiceFailedCreditMemoCreatedButNotPostedErr,GETLASTERRORTEXT);
        ERROR(CancelingInvoiceFailedNothingCreatedErr,GETLASTERRORTEXT);
      end;
    END;

    LOCAL PROCEDURE SetActionResponse@47(VAR ActionContext@1004 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.WebServiceActionContext";InvoiceId@1000 : GUID);
    VAR
      ODataActionManagement@1003 : Codeunit "OData Action Management";
    BEGIN
      ODataActionManagement.AddKey(FIELDNO(Id),InvoiceId);
      ODataActionManagement.SetDeleteResponseLocation(ActionContext,PAGE::"Native - Sales Inv. Entity");
    END;

    [ServiceEnabled]
    [External]
    PROCEDURE Post@18(VAR ActionContext@1000 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.WebServiceActionContext");
    VAR
      SalesHeader@1001 : Record "Sales Header";
      SalesInvoiceHeader@1002 : Record "Sales Invoice Header";
    BEGIN
      GetDraftInvoice(SalesHeader);
      PostInvoice(SalesHeader,SalesInvoiceHeader);
      SetActionResponse(ActionContext,SalesInvoiceHeader.Id);
    END;

    [ServiceEnabled]
    [External]
    PROCEDURE PostAndSend@33(VAR ActionContext@1000 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.WebServiceActionContext");
    VAR
      SalesHeader@1005 : Record "Sales Header";
      SalesInvoiceHeader@1002 : Record "Sales Invoice Header";
    BEGIN
      GetDraftInvoice(SalesHeader);
      PostInvoice(SalesHeader,SalesInvoiceHeader);
      COMMIT;
      SendPostedInvoice(SalesInvoiceHeader);
      SetActionResponse(ActionContext,SalesInvoiceHeader.Id);
    END;

    [ServiceEnabled]
    [External]
    PROCEDURE Send@17(VAR ActionContext@1000 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.WebServiceActionContext");
    VAR
      SalesHeader@1005 : Record "Sales Header";
      SalesInvoiceHeader@1002 : Record "Sales Invoice Header";
    BEGIN
      if Posted then begin
        GetPostedInvoice(SalesInvoiceHeader);
        if IsInvoiceCanceled then
          SendCanceledInvoice(SalesInvoiceHeader)
        else
          SendPostedInvoice(SalesInvoiceHeader);
        SetActionResponse(ActionContext,SalesInvoiceHeader.Id);
        exit;
      end;
      GetDraftInvoice(SalesHeader);
      SendDraftInvoice(SalesHeader);
      SetActionResponse(ActionContext,SalesHeader.Id);
    END;

    [ServiceEnabled]
    [External]
    PROCEDURE Cancel@19(VAR ActionContext@1000 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.WebServiceActionContext");
    VAR
      SalesInvoiceHeader@1002 : Record "Sales Invoice Header";
    BEGIN
      GetPostedInvoice(SalesInvoiceHeader);
      CancelInvoice(SalesInvoiceHeader);
      SetActionResponse(ActionContext,SalesInvoiceHeader.Id);
    END;

    [ServiceEnabled]
    [External]
    PROCEDURE CancelAndSend@51(VAR ActionContext@1000 : DotNet "'Microsoft.Dynamics.Nav.Ncl, Version=12.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Runtime.WebServiceActionContext");
    VAR
      SalesInvoiceHeader@1002 : Record "Sales Invoice Header";
    BEGIN
      GetPostedInvoice(SalesInvoiceHeader);
      CancelInvoice(SalesInvoiceHeader);
      SendCanceledInvoice(SalesInvoiceHeader);
      SetActionResponse(ActionContext,SalesInvoiceHeader.Id);
    END;

    BEGIN
    END.
  }
}

