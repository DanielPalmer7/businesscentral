OBJECT Codeunit 5923 Service-Quote to Order
{
  OBJECT-PROPERTIES
  {
    Date=0D;
    Time=0T;
    Version List=;
  }
  PROPERTIES
  {
    TableNo="Service Header";
    Permissions=TableData "Loaner Entry"=m,
                TableData "Service Order Allocation"=rimd;
    OnRun=VAR
            ServQuoteLine@1001 : Record "Service Line";
            Customer@1005 : Record Customer;
            CustCheckCreditLimit@1000 : Codeunit "Cust-Check Cr. Limit";
            ItemCheckAvail@1002 : Codeunit "Item-Check Avail.";
            DocType@1003 : 'Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order"';
          BEGIN
            OnBeforeRun(Rec);

            NewServHeader := Rec;

            ServMgtSetup.GET;

            NewServHeader."Document Type" := "Document Type"::Order;
            Customer.GET("Customer No.");
            Customer.CheckBlockedCustOnDocs(Customer,DocType::Quote,false,false);
            if "Customer No." <> "Bill-to Customer No." then begin
              Customer.GET("Bill-to Customer No.");
              Customer.CheckBlockedCustOnDocs(Customer,DocType::Quote,false,false);
            end;

            ValidateSalesPersonOnServiceHeader(Rec,true,false);

            CustCheckCreditLimit.ServiceHeaderCheck(NewServHeader);

            ServQuoteLine.SETRANGE("Document Type","Document Type");
            ServQuoteLine.SETRANGE("Document No.","No.");
            ServQuoteLine.SETRANGE(Type,ServQuoteLine.Type::Item);
            ServQuoteLine.SETFILTER("No.",'<>%1','');
            if ServQuoteLine.FIND('-') then
              repeat
                ServLine := ServQuoteLine;
                ServLine.VALIDATE("Reserved Qty. (Base)",0);
                ServLine."Line No." := 0;
                if GUIALLOWED then
                  if ItemCheckAvail.ServiceInvLineCheck(ServLine) then
                    ItemCheckAvail.RaiseUpdateInterruptedError;
              until ServQuoteLine.NEXT = 0;

            MakeOrder(Rec);

            DELETE(true);
          END;

  }
  CODE
  {
    VAR
      ServMgtSetup@1006 : Record "Service Mgt. Setup";
      RepairStatus@1004 : Record "Repair Status";
      ServItemLine@1001 : Record "Service Item Line";
      ServItemLine2@1008 : Record "Service Item Line";
      ServLine@1000 : Record "Service Line";
      ServLine2@1009 : Record "Service Line";
      ServOrderAlloc@1005 : Record "Service Order Allocation";
      NewServHeader@1010 : Record "Service Header";
      LoanerEntry@1019 : Record "Loaner Entry";
      ServCommentLine@1020 : Record "Service Comment Line";
      ServCommentLine2@1021 : Record "Service Comment Line";
      NoSeriesMgt@1007 : Codeunit NoSeriesManagement;
      ServLogMgt@1011 : Codeunit ServLogManagement;
      ReserveServiceLine@1012 : Codeunit "Service Line-Reserve";

    LOCAL PROCEDURE TestNoSeries@21();
    BEGIN
      ServMgtSetup.TESTFIELD("Service Order Nos.");
    END;

    LOCAL PROCEDURE GetNoSeriesCode@20() : Code[20];
    BEGIN
      exit(ServMgtSetup."Service Order Nos.");
    END;

    [External]
    PROCEDURE ReturnOrderNo@1() : Code[20];
    BEGIN
      exit(NewServHeader."No.");
    END;

    LOCAL PROCEDURE InsertServHeader@4(VAR ServiceHeaderOrder@1001 : Record "Service Header";ServiceHeaderQuote@1000 : Record "Service Header");
    BEGIN
      ServiceHeaderOrder.INSERT(true);
      ServiceHeaderOrder."Document Date" := ServiceHeaderQuote."Document Date";
      ServiceHeaderOrder."Location Code" := ServiceHeaderQuote."Location Code";
      ServiceHeaderOrder.MODIFY;
    END;

    LOCAL PROCEDURE MakeOrder@3(ServiceHeader@1000 : Record "Service Header");
    VAR
      ApprovalsMgmt@1002 : Codeunit "Approvals Mgmt.";
      RecordLinkManagement@1001 : Codeunit "Record Link Management";
    BEGIN
      with NewServHeader do begin
        "No." := '';
        "No. Printed" := 0;
        VALIDATE(Status,Status::Pending);
        "Order Date" := WORKDATE;
        "Order Time" := TIME;
        "Actual Response Time (Hours)" := 0;
        "Service Time (Hours)" := 0;
        "Starting Date" := 0D;
        "Starting Time" := 0T;
        "Finishing Date" := 0D;
        "Finishing Time" := 0T;

        TestNoSeries;
        NoSeriesMgt.InitSeries(GetNoSeriesCode,'',0D,"No.","No. Series");

        "Quote No." := ServiceHeader."No.";
        RecordLinkManagement.CopyLinks(ServiceHeader,NewServHeader);
        InsertServHeader(NewServHeader,ServiceHeader);

        ServCommentLine.RESET;
        ServCommentLine.SETRANGE("Table Name",ServCommentLine."Table Name"::"Service Header");
        ServCommentLine.SETRANGE("Table Subtype",ServiceHeader."Document Type");
        ServCommentLine.SETRANGE("No.",ServiceHeader."No.");
        ServCommentLine.SETRANGE("Table Line No.",0);
        if ServCommentLine.FIND('-') then
          repeat
            ServCommentLine2 := ServCommentLine;
            ServCommentLine2."Table Subtype" := "Document Type";
            ServCommentLine2."No." := "No.";
            ServCommentLine2.INSERT;
          until ServCommentLine.NEXT = 0;

        ServOrderAlloc.RESET;
        ServOrderAlloc.SETCURRENTKEY("Document Type","Document No.",Status);
        ServOrderAlloc.SETRANGE("Document Type",ServiceHeader."Document Type");
        ServOrderAlloc.SETRANGE("Document No.",ServiceHeader."No.");
        ServOrderAlloc.SETRANGE(Status,ServOrderAlloc.Status::Active);
        while ServOrderAlloc.FINDFIRST do begin
          ServOrderAlloc."Document Type" := "Document Type";
          ServOrderAlloc."Document No." := "No.";
          ServOrderAlloc."Service Started" := true;
          ServOrderAlloc.Status := ServOrderAlloc.Status::"Reallocation Needed";
          ServOrderAlloc.MODIFY;
        end;

        ServItemLine.RESET;
        ServItemLine.SETRANGE("Document Type",ServiceHeader."Document Type");
        ServItemLine.SETRANGE("Document No.",ServiceHeader."No.");
        if ServItemLine.FIND('-') then
          repeat
            ServItemLine2 := ServItemLine;
            ServItemLine2."Document Type" := "Document Type";
            ServItemLine2."Document No." := "No.";
            ServItemLine2."Starting Date" := 0D;
            ServItemLine2."Starting Time" := 0T;
            ServItemLine2."Actual Response Time (Hours)" := 0;
            ServItemLine2."Finishing Date" := 0D;
            ServItemLine2."Finishing Time" := 0T;
            RepairStatus.RESET;
            RepairStatus.SETRANGE(Initial,true);
            if RepairStatus.FINDFIRST then
              ServItemLine2."Repair Status Code" := RepairStatus.Code;
            ServItemLine2.INSERT(true);
          until ServItemLine.NEXT = 0;

        UpdateResponseDateTime;

        LoanerEntry.RESET;
        LoanerEntry.SETCURRENTKEY("Document Type","Document No.");
        LoanerEntry.SETRANGE("Document Type",ServiceHeader."Document Type" + 1);
        LoanerEntry.SETRANGE("Document No.",ServiceHeader."No.");
        while LoanerEntry.FINDFIRST do begin
          LoanerEntry."Document Type" := "Document Type" + 1;
          LoanerEntry."Document No." := "No.";
          LoanerEntry.MODIFY;
        end;

        ServCommentLine.RESET;
        ServCommentLine.SETRANGE("Table Name",ServCommentLine."Table Name"::"Service Header");
        ServCommentLine.SETRANGE("Table Subtype",ServiceHeader."Document Type");
        ServCommentLine.SETRANGE("No.",ServiceHeader."No.");
        ServCommentLine.SETFILTER("Table Line No.",'>%1',0);
        if ServCommentLine.FIND('-') then
          repeat
            ServCommentLine2 := ServCommentLine;
            ServCommentLine2."Table Subtype" := "Document Type";
            ServCommentLine2."No." := "No.";
            ServCommentLine2.INSERT;
          until ServCommentLine.NEXT = 0;

        ServLine.RESET;
        ServLine.SETRANGE("Document Type",ServiceHeader."Document Type");
        ServLine.SETRANGE("Document No.",ServiceHeader."No.");
        if ServLine.FIND('-') then
          repeat
            ServLine2 := ServLine;
            ServLine2."Document Type" := "Document Type";
            ServLine2."Document No." := "No.";
            ServLine2."Posting Date" := "Posting Date";
            ServLine2.INSERT;
            ReserveServiceLine.TransServLineToServLine(ServLine,ServLine2,ServLine.Quantity);
          until ServLine.NEXT = 0;

        ServLogMgt.ServOrderQuoteChanged(NewServHeader,ServiceHeader);
        ApprovalsMgmt.CopyApprovalEntryQuoteToOrder(ServiceHeader.RECORDID,"No.",RECORDID);
        ApprovalsMgmt.DeleteApprovalEntries(ServiceHeader.RECORDID);
        ServLine.DELETEALL(true);
      end;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeRun@2(VAR ServiceHeader@1000 : Record "Service Header");
    BEGIN
    END;

    BEGIN
    END.
  }
}

