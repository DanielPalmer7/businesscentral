OBJECT Page 2335 BC O365 Email Account Settings
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=161409.97T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    CaptionML=ENU=Email Account;
    DeleteAllowed=false;
    SourceTable="SMTP Mail Setup";
    PageType=CardPart;
    SourceTableTemporary=true;
    RefreshOnActivate=true;
    OnOpenPage=VAR
                 GraphMail@1000 : Codeunit "Graph Mail";
               BEGIN
                 INIT;
                 INSERT;

                 LookupMode := CurrPage.LOOKUPMODE;

                 GraphMailAvailable := GraphMail.HasConfiguration;

                 UpdateRec;
               END;

    OnAfterGetRecord=BEGIN
                       UpdateRec;
                     END;

    OnModifyRecord=BEGIN
                     if not CurrPage.LOOKUPMODE then
                       if ValidateSettings(true) then
                         StoreSMTPSetup;
                   END;

    OnQueryClosePage=BEGIN
                       if not CurrPage.LOOKUPMODE then
                         if ValidateSettings(true) then
                           StoreSMTPSetup;
                     END;

    ActionList=ACTIONS
    {
      { 1       ;    ;ActionContainer;
                      Name=ActionContainer1;
                      ActionContainerType=ActionItems }
    }
  }
  CONTROLS
  {
    { 5   ;0   ;Container ;
                Name=Control5;
                ContainerType=ContentArea }

    { 4   ;1   ;Group     ;
                Name=Control4;
                GroupType=Group;
                InstructionalTextML=ENU=Your invoices will be sent from the following email account. }

    { 2   ;1   ;Field     ;
                Name=Email Provider;
                CaptionML=ENU=Email Account Type;
                ToolTipML=ENU=Specifies your email provider.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=EmailProvider;
                OnValidate=BEGIN
                             case EmailProvider of
                               EmailProvider::"Office 365":
                                 SMTPMail.ApplyOffice365Smtp(Rec);
                               EmailProvider::Outlook:
                                 SMTPMail.ApplyOutlookSmtp(Rec);
                               EmailProvider::Gmail:
                                 SMTPMail.ApplyGmailSmtp(Rec);
                               EmailProvider::Yahoo:
                                 SMTPMail.ApplyYahooSmtp(Rec);
                               EmailProvider::"Other Email Provider":
                                 "SMTP Server" := '';
                             end;

                             AdvancedSettingsVisible := EmailProvider = EmailProvider::"Other Email Provider";

                             Password := '';
                             PasswordModified := true;
                           END;

                ImplicitType=Option }

    { 12  ;1   ;Group     ;
                Name=Control12;
                GroupType=Group }

    { 13  ;2   ;Group     ;
                Name=Control13;
                Visible=AdvancedSettingsVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Enter the SMTP Server Details. }

    { 8   ;3   ;Field     ;
                Name=Authentication;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Authentication;
                ImplicitType=Option }

    { 7   ;3   ;Field     ;
                Name="SMTP Server";
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="SMTP Server";
                ImplicitType=Text250;
                ShowMandatory=TRUE }

    { 6   ;3   ;Field     ;
                Name="SMTP Server Port";
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="SMTP Server Port";
                ImplicitType=Integer }

    { 3   ;3   ;Field     ;
                Name=Secure Connection;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr="Secure Connection";
                ImplicitType=Boolean }

    { 10  ;1   ;Field     ;
                Name=FromAccount;
                CaptionML=ENU=Email;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=FromAccount;
                OnValidate=VAR
                             MailManagement@1000 : Codeunit "Mail Management";
                           BEGIN
                             SplitUserIdAndSendAs(FromAccount);

                             if GetSender <> '' then
                               MailManagement.CheckValidEmailAddress("User ID");
                           END;

                ImplicitType=Text250 }

    { 9   ;1   ;Field     ;
                Name=Password;
                ExtendedDatatype=Masked;
                CaptionML=ENU=Password;
                ToolTipML=ENU=Specifies the password used for logging into the server.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Password;
                OnValidate=BEGIN
                             PasswordModified := true;
                             "Password Key" := CREATEGUID; // trigger modify
                           END;

                ImplicitType=Text250 }

    { 11  ;1   ;Field     ;
                Name=TestEmailLbl;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=TestEmailLbl;
                Editable=FALSE;
                Style=StandardAccent;
                StyleExpr=TRUE;
                OnDrillDown=BEGIN
                              ValidateSettings(false);

                              SendTestEmailAction;
                            END;

                ImplicitType=TextConst;
                ShowCaption=false }

    { 14  ;1   ;Group     ;
                Name=Control14;
                Visible=NOT LookupMode;
                GroupType=Group }

    { 15  ;2   ;Field     ;
                Name=SendViaGraphLbl;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=SendViaGraphLbl;
                Visible=GraphMailAvailable;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              PAGE.RUNMODAL(PAGE::"Graph Mail Setup");
                              CurrPage.UPDATE;
                            END;

                ImplicitType=TextConst;
                ShowCaption=false }

  }
  CODE
  {
    VAR
      SMTPMail@1016 : Codeunit "SMTP Mail";
      AdvancedSettingsVisible@1013 : Boolean;
      FromAccount@1010 : Text[250];
      Password@1005 : Text[250];
      PasswordModified@1006 : Boolean;
      LookupMode@1007 : Boolean;
      EmailProvider@1003 : '"Office 365",Outlook,Gmail,Yahoo,"Other Email Provider"';
      DummyPasswordTxt@1001 : TextConst '@@@={Locked};ENU=***';
      TestEmailLbl@1000 : TextConst 'ENU=Send test email';
      EmailMissingUserPassErr@1004 : TextConst 'ENU=You must provide a user name and password to send email.';
      MissingServerSettingsErr@1002 : TextConst 'ENU=You must provide server information to send email.';
      SendViaGraphLbl@1008 : TextConst 'ENU=Send email from my account';
      GraphMailAvailable@1009 : Boolean;

    PROCEDURE StoreSMTPSetup@31();
    VAR
      SMTPMailSetup@1000 : Record "SMTP Mail Setup";
    BEGIN
      if not SMTPMailSetup.GET then begin
        SMTPMailSetup.INIT;
        SMTPMailSetup.INSERT;
      end;

      // preserve old password key in case we need to remove it
      "Password Key" := SMTPMailSetup."Password Key";

      SMTPMailSetup.TRANSFERFIELDS(Rec,false);

      if PasswordModified then begin
        if Password = '' then
          SMTPMailSetup.RemovePassword
        else
          SMTPMailSetup.SetPassword(Password);
      end;

      SMTPMailSetup.MODIFY(true);
    END;

    LOCAL PROCEDURE SendTestEmailAction@10();
    BEGIN
      StoreSMTPSetup;
      COMMIT;
      CODEUNIT.RUN(CODEUNIT::"SMTP Test Mail");
    END;

    LOCAL PROCEDURE GetEmailProvider@11(VAR SMTPMailSetup@1000 : Record "SMTP Mail Setup");
    BEGIN
      if SMTPMail.IsOffice365Setup(SMTPMailSetup) then
        EmailProvider := EmailProvider::"Office 365"
      else
        if SMTPMail.IsOutlookSetup(SMTPMailSetup) then
          EmailProvider := EmailProvider::Outlook
        else
          if SMTPMail.IsGmailSetup(SMTPMailSetup) then
            EmailProvider := EmailProvider::Gmail
          else
            if SMTPMail.IsYahooSetup(SMTPMailSetup) then
              EmailProvider := EmailProvider::Yahoo
            else
              EmailProvider := EmailProvider::"Other Email Provider";

      AdvancedSettingsVisible := EmailProvider = EmailProvider::"Other Email Provider";
    END;

    [TryFunction]
    PROCEDURE ValidateSettings@1(EmptyAuthInfoValid@1000 : Boolean);
    BEGIN
      if EmailProvider = EmailProvider::"Other Email Provider" then begin
        if (not EmptyAuthInfoValid) and ("SMTP Server" = '') then
          ERROR(MissingServerSettingsErr);
        exit;
      end;

      if EmptyAuthInfoValid and ("User ID" = '') and (Password = '') then
        exit;

      if ("User ID" = '') or (Password = '') then
        ERROR(EmailMissingUserPassErr);
    END;

    PROCEDURE UpdateRec@2();
    VAR
      User@1002 : Record User;
      SMTPMailSetup@1000 : Record "SMTP Mail Setup";
      SMTPMail@1001 : Codeunit "SMTP Mail";
    BEGIN
      if SMTPMailSetup.GET then begin
        TRANSFERFIELDS(SMTPMailSetup);
        GetEmailProvider(SMTPMailSetup)
      end else begin
        SMTPMail.ApplyOffice365Smtp(Rec);
        EmailProvider := EmailProvider::"Office 365";
        if User.GET(USERSECURITYID) then
          "User ID" := User."Authentication Email";
        SMTPMailSetup := Rec;
        if SMTPMailSetup.INSERT then;
      end;

      MODIFY;

      if SMTPMailSetup.HasPassword then
        Password := DummyPasswordTxt;

      PasswordModified := false;

      FromAccount := GetConnectionString;
    END;

    BEGIN
    END.
  }
}

