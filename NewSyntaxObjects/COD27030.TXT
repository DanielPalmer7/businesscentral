OBJECT Codeunit 27030 SAT Utilities
{
  OBJECT-PROPERTIES
  {
    Date=0D;
    Time=0T;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetSATUnitofMeasure@1020000(UofM@1020000 : Code[10]) : Code[10];
    VAR
      UnitOfMeasure@1020001 : Record "Unit of Measure";
    BEGIN
      if UnitOfMeasure.GET(UofM) then
        exit(UnitOfMeasure."SAT UofM Classification");
      exit(UofM);
    END;

    PROCEDURE GetSATCountryCode@1020001(CountryCode@1020001 : Code[10]) : Code[10];
    VAR
      CountryRegion@1020000 : Record "Country/Region";
    BEGIN
      if CountryRegion.GET(CountryCode) then
        exit(CountryRegion."SAT Country Code");
      exit(CountryCode);
    END;

    PROCEDURE GetSATPaymentMethod@1020004(PaymentMeth@1020000 : Code[10]) : Code[10];
    VAR
      PaymentMethod@1020001 : Record "Payment Method";
    BEGIN
      if PaymentMethod.GET(PaymentMeth) then
        exit(PaymentMethod."SAT Method of Payment");
      exit(PaymentMeth);
    END;

    PROCEDURE GetSATPaymentMethodDescription@1020007(PaymentMeth@1020000 : Code[10]) : Text[50];
    VAR
      PaymentMethod@1020001 : Record "Payment Method";
      SATPaymentMethod@1020002 : Record "SAT Payment Method";
    BEGIN
      if PaymentMethod.GET(PaymentMeth) then begin
        if SATPaymentMethod.GET(PaymentMethod."SAT Method of Payment") then
          exit(SATPaymentMethod.Description);
      end;
      exit(PaymentMeth);
    END;

    PROCEDURE GetSATItemClassification@1020005(Type@1020000 : '" ","G/L Account",Item,Resource,"Fixed Asset","Charge (Item)"';ItemNumber@1020001 : Code[20]) : Code[10];
    VAR
      Item@1020002 : Record Item;
    BEGIN
      if Type = Type::Item then
        if Item.GET(ItemNumber) then
          exit(Item."SAT Item Classification");
      if Type = Type::Resource then
        exit('01010101'); // Does not exist in the catalog
      exit('');
    END;

    PROCEDURE GetSATPaymentTerm@1020011(PaymentTerm@1020000 : Code[10]) : Code[10];
    VAR
      PaymentTerms@1020002 : Record "Payment Terms";
    BEGIN
      if PaymentTerms.GET(PaymentTerm) then
        exit(PaymentTerms."SAT Payment Term");
      exit(PaymentTerm);
    END;

    PROCEDURE GetSATPaymentTermDescription@1020009(PaymentTerm@1020000 : Code[10]) : Text[50];
    VAR
      PaymentTerms@1020002 : Record "Payment Terms";
      SATPaymentTerm@1020001 : Record "SAT Payment Term";
    BEGIN
      if PaymentTerms.GET(PaymentTerm) then begin
        if SATPaymentTerm.GET(PaymentTerms."SAT Payment Term") then
          exit(SATPaymentTerm.Description);
      end;
      exit(PaymentTerm);
    END;

    PROCEDURE GetSATTaxSchemeDescription@1020012(TaxScheme@1020000 : Code[10]) : Text[100];
    VAR
      SATTaxScheme@1020002 : Record "SAT Tax Scheme";
    BEGIN
      if SATTaxScheme.GET(TaxScheme) then
        exit(SATTaxScheme.Description);
      exit(TaxScheme);
    END;

    PROCEDURE MapCountryCodes@1020002();
    VAR
      CountryRegion@1020000 : Record "Country/Region";
    BEGIN
      if CountryRegion.FINDSET then
        repeat
          case CountryRegion.Code of
            'AE':
              CountryRegion."SAT Country Code" := 'ARE';
            'AT':
              CountryRegion."SAT Country Code" := 'AUT';
            'AU':
              CountryRegion."SAT Country Code" := 'AUS';
            'BE':
              CountryRegion."SAT Country Code" := 'BEL';
            'BG':
              CountryRegion."SAT Country Code" := 'BGR';
            'BN':
              CountryRegion."SAT Country Code" := 'BRN';
            'BR':
              CountryRegion."SAT Country Code" := 'BRA';
            'CA':
              CountryRegion."SAT Country Code" := 'CAN';
            'CH':
              CountryRegion."SAT Country Code" := 'CHE';
            'CN':
              CountryRegion."SAT Country Code" := 'CHN';
            'CY':
              CountryRegion."SAT Country Code" := 'CYP';
            'CZ':
              CountryRegion."SAT Country Code" := 'CZE';
            'DE':
              CountryRegion."SAT Country Code" := 'DEU';
            'DK':
              CountryRegion."SAT Country Code" := 'DNK';
            'DZ':
              CountryRegion."SAT Country Code" := 'DZA';
            'EE':
              CountryRegion."SAT Country Code" := 'EST';
            'EL':
              CountryRegion."SAT Country Code" := 'GRC';
            'ES':
              CountryRegion."SAT Country Code" := 'ESP';
            'FI':
              CountryRegion."SAT Country Code" := 'FIN';
            'FJ':
              CountryRegion."SAT Country Code" := 'FJI';
            'FR':
              CountryRegion."SAT Country Code" := 'FRA';
            'GB':
              CountryRegion."SAT Country Code" := 'GBR';
            'HR':
              CountryRegion."SAT Country Code" := 'HRV';
            'HU':
              CountryRegion."SAT Country Code" := 'HUN';
            'ID':
              CountryRegion."SAT Country Code" := 'IDN';
            'IE':
              CountryRegion."SAT Country Code" := 'IRL';
            'IN':
              CountryRegion."SAT Country Code" := 'IND';
            'IS':
              CountryRegion."SAT Country Code" := 'ISL';
            'IT':
              CountryRegion."SAT Country Code" := 'ITA';
            'JP':
              CountryRegion."SAT Country Code" := 'JPN';
            'KE':
              CountryRegion."SAT Country Code" := 'KEN';
            'LT':
              CountryRegion."SAT Country Code" := 'LTU';
            'LU':
              CountryRegion."SAT Country Code" := 'LUX';
            'LV':
              CountryRegion."SAT Country Code" := 'LVA';
            'MA':
              CountryRegion."SAT Country Code" := 'MAR';
            'ME':
              CountryRegion."SAT Country Code" := 'MNE';
            'MT':
              CountryRegion."SAT Country Code" := 'MLT';
            'MX':
              CountryRegion."SAT Country Code" := 'MEX';
            'MY':
              CountryRegion."SAT Country Code" := 'MYS';
            'MZ':
              CountryRegion."SAT Country Code" := 'MOZ';
            'NG':
              CountryRegion."SAT Country Code" := 'NGA';
            'NL':
              CountryRegion."SAT Country Code" := 'NLD';
            'NO':
              CountryRegion."SAT Country Code" := 'NOR';
            'NZ':
              CountryRegion."SAT Country Code" := 'NZL';
            'PH':
              CountryRegion."SAT Country Code" := 'PHL';
            'PL':
              CountryRegion."SAT Country Code" := 'POL';
            'PT':
              CountryRegion."SAT Country Code" := 'PRT';
            'RO':
              CountryRegion."SAT Country Code" := 'ROU';
            'RS':
              CountryRegion."SAT Country Code" := 'SRB';
            'RU':
              CountryRegion."SAT Country Code" := 'RUS';
            'SA':
              CountryRegion."SAT Country Code" := 'SAU';
            'SB':
              CountryRegion."SAT Country Code" := 'SLB';
            'SE':
              CountryRegion."SAT Country Code" := 'SWE';
            'SG':
              CountryRegion."SAT Country Code" := 'SGP';
            'SI':
              CountryRegion."SAT Country Code" := 'SVN';
            'SK':
              CountryRegion."SAT Country Code" := 'SVK';
            'SZ':
              CountryRegion."SAT Country Code" := 'SWZ';
            'TH':
              CountryRegion."SAT Country Code" := 'THA';
            'TN':
              CountryRegion."SAT Country Code" := 'TUN';
            'TR':
              CountryRegion."SAT Country Code" := 'TUR';
            'TZ':
              CountryRegion."SAT Country Code" := 'TZA';
            'UG':
              CountryRegion."SAT Country Code" := 'UGA';
            'US':
              CountryRegion."SAT Country Code" := 'USA';
            'VU':
              CountryRegion."SAT Country Code" := 'VUT';
            'WS':
              CountryRegion."SAT Country Code" := 'WSM';
            'ZA':
              CountryRegion."SAT Country Code" := 'ZAF';
            else
              CountryRegion."SAT Country Code" := 'ZZZ';
          end;
          CountryRegion.MODIFY;
        until CountryRegion.NEXT = 0;
    END;

    PROCEDURE MapUnitsofMeasure@1020003();
    VAR
      UnitOfMeasure@1020000 : Record "Unit of Measure";
    BEGIN
      if UnitOfMeasure.FINDSET then
        repeat
          case UnitOfMeasure.Code of
            'DAY':
              UnitOfMeasure."SAT UofM Classification" := 'DAY';
            'GR':
              UnitOfMeasure."SAT UofM Classification" := 'GRM';
            'HOUR':
              UnitOfMeasure."SAT UofM Classification" := 'HUR';
            'KG':
              UnitOfMeasure."SAT UofM Classification" := 'KGM';
            'KM':
              UnitOfMeasure."SAT UofM Classification" := 'KMT';
            'L':
              UnitOfMeasure."SAT UofM Classification" := 'LTR';
            'PCS':
              UnitOfMeasure."SAT UofM Classification" := 'EA';
          end;
          UnitOfMeasure.MODIFY;
        until UnitOfMeasure.NEXT = 0;
    END;

    PROCEDURE PopulateSATInformation@1020006();
    VAR
      SATPaymentMethod@1020012 : Record "SAT Payment Method";
      SATClassification@1020013 : Record "SAT Classification";
      SATRelationshipType@1020014 : Record "SAT Relationship Type";
      SATUseCode@1020015 : Record "SAT Use Code";
      SATUnitOfMeasure@1020016 : Record "SAT Unit of Measure";
      SATCountryCode@1020017 : Record "SAT Country Code";
      SATTaxScheme@1020018 : Record "SAT Tax Scheme";
      SATPaymentTerm@1020019 : Record "SAT Payment Term";
      SATMXResources@1020021 : Record "SAT MX Resources";
      SATClassificationPort@1020004 : XMLport "SAT Classification";
      SATRelationshipTypePort@1020005 : XMLport "SAT Relationship Type";
      SATUseCodePort@1020006 : XMLport "SAT Use Code";
      SATUnitOfMeasurePort@1020007 : XMLport "SAT Unit of Measure";
      SATCountryCodePort@1020008 : XMLport "SAT Country Code";
      SATPaymentMethodPort@1020009 : XMLport "SAT Payment Method";
      SATTaxSchemePort@1020010 : XMLport "SAT Tax Scheme";
      SATPaymentTermPort@1020011 : XMLport "SAT Payment Term";
      IStr@1020001 : InStream;
    BEGIN
      if not SATClassification.FINDFIRST then begin
        SATMXResources.GET('SATClassifications.xml');
        SATMXResources.CALCFIELDS(Blob);
        SATMXResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
        SATClassificationPort.SETSOURCE(IStr);
        SATClassificationPort.IMPORT;
      end;

      if not SATCountryCode.FINDFIRST then begin
        SATMXResources.GET('SATCountry_Codes.xml');
        SATMXResources.CALCFIELDS(Blob);
        SATMXResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
        SATCountryCodePort.SETSOURCE(IStr);
        SATCountryCodePort.IMPORT;
      end;

      if not SATPaymentTerm.FINDFIRST then begin
        SATMXResources.GET('SATPayment_Terms.xml');
        SATMXResources.CALCFIELDS(Blob);
        SATMXResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
        SATPaymentTermPort.SETSOURCE(IStr);
        SATPaymentTermPort.IMPORT;
      end;

      if not SATRelationshipType.FINDFIRST then begin
        SATMXResources.GET('SATRelationship_Types.xml');
        SATMXResources.CALCFIELDS(Blob);
        SATMXResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
        SATRelationshipTypePort.SETSOURCE(IStr);
        SATRelationshipTypePort.IMPORT;
      end;

      if not SATTaxScheme.FINDFIRST then begin
        SATMXResources.GET('SATTax_Schemes.xml');
        SATMXResources.CALCFIELDS(Blob);
        SATMXResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
        SATTaxSchemePort.SETSOURCE(IStr);
        SATTaxSchemePort.IMPORT;
      end;

      if not SATUnitOfMeasure.FINDFIRST then begin
        SATMXResources.GET('SATU_of_M.xml');
        SATMXResources.CALCFIELDS(Blob);
        SATMXResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
        SATUnitOfMeasurePort.SETSOURCE(IStr);
        SATUnitOfMeasurePort.IMPORT;
      end;

      if not SATUseCode.FINDFIRST then begin
        SATMXResources.GET('SATUse_Codes.xml');
        SATMXResources.CALCFIELDS(Blob);
        SATMXResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
        SATUseCodePort.SETSOURCE(IStr);
        SATUseCodePort.IMPORT;
      end;

      if not SATPaymentMethod.FINDFIRST then begin
        SATMXResources.GET('SATPayment_Methods.xml');
        SATMXResources.CALCFIELDS(Blob);
        SATMXResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
        SATPaymentMethodPort.SETSOURCE(IStr);
        SATPaymentMethodPort.IMPORT;
      end;
    END;

    PROCEDURE CreateSATXMLFiles@1020008();
    VAR
      SATPaymentMethodCode@1020012 : Record "SAT Payment Method Code";
      SATClassification@1020013 : Record "SAT Classification";
      SATRelationshipType@1020014 : Record "SAT Relationship Type";
      SATUseCode@1020015 : Record "SAT Use Code";
      SATUnitOfMeasure@1020016 : Record "SAT Unit of Measure";
      SATCountryCode@1020017 : Record "SAT Country Code";
      SATTaxScheme@1020018 : Record "SAT Tax Scheme";
      SATPaymentTerm@1020019 : Record "SAT Payment Term";
      TempBlob@1020021 : Record TempBlob;
      FileManagement@1020023 : Codeunit "File Management";
      OutStr@1020024 : OutStream;
    BEGIN
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLPORT.EXPORT(XMLPORT::"SAT Classification",OutStr,SATClassification);
      FileManagement.BLOBExport(TempBlob,'SATClassifications.xml',true);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLPORT.EXPORT(XMLPORT::"SAT Country Code",OutStr,SATCountryCode);
      FileManagement.BLOBExport(TempBlob,'SATCountry_Codes.xml',true);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLPORT.EXPORT(XMLPORT::"SAT Payment Term",OutStr,SATPaymentTerm);
      FileManagement.BLOBExport(TempBlob,'SATPayment_Forms.xml',true);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLPORT.EXPORT(XMLPORT::"SAT Payment Method",OutStr,SATPaymentMethodCode);
      FileManagement.BLOBExport(TempBlob,'SATPayment_Methods.xml',true);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLPORT.EXPORT(XMLPORT::"SAT Relationship Type",OutStr,SATRelationshipType);
      FileManagement.BLOBExport(TempBlob,'SATRelationship_Types.xml',true);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLPORT.EXPORT(XMLPORT::"SAT Tax Scheme",OutStr,SATTaxScheme);
      FileManagement.BLOBExport(TempBlob,'SATTax_Schemes.xml',true);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLPORT.EXPORT(XMLPORT::"SAT Unit of Measure",OutStr,SATUnitOfMeasure);
      FileManagement.BLOBExport(TempBlob,'SATU_of_M.xml',true);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLPORT.EXPORT(XMLPORT::"SAT Use Code",OutStr,SATUseCode);
      FileManagement.BLOBExport(TempBlob,'SATUse_Codes.xml',true);
    END;

    BEGIN
    {
      This codeunit will house various utility functions used by the CFDI Mexican Reg F functionality.
    }
    END.
  }
}

