OBJECT Codeunit 1485 Rolecenter Selector Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160658.447T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ActionContainerXmlElementLbl@1000 : TextConst '@@@={Locked};ENU=ActionContainers';
      ActionContainerTypeAttrLbl@1001 : TextConst '@@@={Locked};ENU=ActionContainerType';
      ActivityButtonsLbl@1002 : TextConst '@@@={Locked};ENU=ActivityButtons';
      JsonNameElementLbl@1003 : TextConst '@@@={Locked};ENU=name';
      TooltipAttrLbl@1004 : TextConst '@@@={Locked};ENU=ToolTipML';
      CaptionAttrLbl@1005 : TextConst '@@@={Locked};ENU=CaptionML';
      JsonRowElementLbl@1007 : TextConst '@@@={Locked};ENU=rows';
      JsonTooltipLbl@1008 : TextConst '@@@={Locked};ENU=tooltip';
      PromotedAttrLbl@1009 : TextConst '@@@={Locked};ENU=Promoted';
      ActionCaptionTxt@1011 : TextConst 'ENU=Continue';
      ActionDescriptionTxt@1010 : TextConst 'ENU=Choose a Role Center that suits your business role, and then choose the Continue button. You can change the Role Center any time.';
      DropdownLbl@1006 : TextConst 'ENU=My Role Center';
      JsonHeaderLbl@1012 : TextConst '@@@={Locked};ENU=HeaderLabel';
      JsonDropdownContentLbl@1013 : TextConst '@@@={Locked};ENU=DropContent';
      JsonProfileNameLbl@1014 : TextConst '@@@={Locked};ENU=Name';
      JsonProfileDescriptionLbl@1015 : TextConst '@@@={Locked};ENU=Description';
      JsonRolecenterIdLbl@1016 : TextConst '@@@={Locked};ENU=RolecenterId';
      JsonDefaultActionLbl@1017 : TextConst '@@@={Locked};ENU=DefaultActionLabel';
      JsonDisclaimerTextLbl@1018 : TextConst '@@@={Locked};ENU=DisclaimerText';
      JsonActionDescriptionLbl@1019 : TextConst '@@@={Locked};ENU=ActionDescription';
      DisclaimerTxt@1020 : TextConst 'ENU=Note that this view merely shows you the breadth of functionality in the selected Role Center. What you will actually see depends on your company and personal UI settings.';
      DefaultLangaugeCodeTxt@1021 : TextConst '@@@={Locked};ENU=ENU';
      LanguageCodeRegExPatternTxt@1023 : TextConst '@@@={Locked};ENU="[A-Z]{3}="';
      LanguageCodePatternTxt@1024 : TextConst '@@@={Locked};ENU="%1="';
      RoleCenterSelectorAddinTxt@1022 : TextConst '@@@={Locked};ENU=Microsoft.Dynamics.Nav.Client.RoleCenterSelector';
      RoleCenterSelectorPublickKeyTxt@1025 : TextConst '@@@={Locked};ENU=31bf3856ad364e35';

    PROCEDURE BuildJsonFromPageMetadata@14(RolecenterId@1000 : Integer) : Text;
    VAR
      TempBlob@1021 : Record TempBlob;
      ObjectMetadata@1019 : Record "Object Metadata";
      JSONManagement@1017 : Codeunit "JSON Management";
      XMLDOMManagement@1016 : Codeunit "XML DOM Management";
      ReturnXmlDocument@1014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReturnedXMLNodeList@1013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      ActivityButtonsXmlNode@1011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      BucketXmlNode@1010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FeatureXmlNode@1009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FeatureBucketsJArray@1008 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray";
      FeatureBucketJObject@1007 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      FeatureJArray@1006 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray";
      FeatureJObject@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      Instream@1004 : InStream;
      Outstream@1003 : OutStream;
      Tooltip@1025 : Text;
      Caption@1026 : Text;
    BEGIN
      JSONManagement.InitializeEmptyCollection;
      JSONManagement.GetJsonArray(FeatureBucketsJArray);

      if not ObjectMetadata.GET(ObjectMetadata."Object Type"::Page,RolecenterId) then
        exit(FeatureBucketsJArray.ToString);

      ObjectMetadata.CALCFIELDS(Metadata);
      TempBlob.Blob.CREATEOUTSTREAM(Outstream);
      ObjectMetadata.Metadata.CREATEINSTREAM(Instream);

      XMLDOMManagement.LoadXMLDocumentFromInStream(Instream,ReturnXmlDocument);
      ReturnedXMLNodeList := ReturnXmlDocument.GetElementsByTagName(ActionContainerXmlElementLbl);

      if not GetActivityButtonsActionContainerXmlNode(ActivityButtonsXmlNode,ReturnedXMLNodeList) then
        exit(FeatureBucketsJArray.ToString);

      foreach BucketXmlNode in ActivityButtonsXmlNode.ChildNodes do begin
        JSONManagement.InitializeEmptyObject;
        JSONManagement.GetJSONObject(FeatureBucketJObject);
        GetLanguageSpecificCaptionAndTooltip(BucketXmlNode,Caption,Tooltip);
        JSONManagement.AddJPropertyToJObject(FeatureBucketJObject,JsonNameElementLbl,Caption);
        JSONManagement.AddJPropertyToJObject(FeatureBucketJObject,JsonTooltipLbl,Tooltip);

        FeatureJArray := FeatureJArray.JArray;
        foreach FeatureXmlNode in BucketXmlNode.ChildNodes do
          if IsNodePromoted(FeatureXmlNode) then begin
            FeatureJObject := FeatureJObject.JObject;
            GetLanguageSpecificCaptionAndTooltip(FeatureXmlNode,Caption,Tooltip);
            JSONManagement.AddJPropertyToJObject(FeatureJObject,JsonNameElementLbl,Caption);
            JSONManagement.AddJPropertyToJObject(FeatureJObject,JsonTooltipLbl,Tooltip);
            JSONManagement.AddJObjectToJArray(FeatureJArray,FeatureJObject);
          end;

        if FeatureJArray.Count > 0 then begin
          JSONManagement.AddJArrayToJObject(FeatureBucketJObject,JsonRowElementLbl,FeatureJArray);
          JSONManagement.AddJObjectToJArray(FeatureBucketsJArray,FeatureBucketJObject);
        end;
      end;

      exit(FeatureBucketsJArray.ToString);
    END;

    PROCEDURE BuildPageDataJsonForRolecenterSelector@3() : Text;
    VAR
      AllProfile@1000 : Record "All Profile";
      JSONManagement@1017 : Codeunit "JSON Management";
      PageDataJObject@1007 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      ProfileJArray@1006 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray";
      ProfileJObject@1005 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(PageDataJObject);
      JSONManagement.AddJPropertyToJObject(PageDataJObject,JsonHeaderLbl,DropdownLbl);
      JSONManagement.AddJPropertyToJObject(PageDataJObject,JsonDefaultActionLbl,ActionCaptionTxt);
      JSONManagement.AddJPropertyToJObject(PageDataJObject,JsonDisclaimerTextLbl,DisclaimerTxt);
      JSONManagement.AddJPropertyToJObject(PageDataJObject,JsonActionDescriptionLbl,ActionDescriptionTxt);

      JSONManagement.InitializeEmptyCollection;
      JSONManagement.GetJsonArray(ProfileJArray);

      if FindSaaSProfiles(AllProfile) then
        repeat
          JSONManagement.InitializeEmptyObject;
          JSONManagement.GetJSONObject(ProfileJObject);
          JSONManagement.AddJPropertyToJObject(ProfileJObject,JsonProfileNameLbl,AllProfile."Profile ID");
          JSONManagement.AddJPropertyToJObject(ProfileJObject,JsonProfileDescriptionLbl,AllProfile.Description);
          JSONManagement.AddJPropertyToJObject(ProfileJObject,JsonRolecenterIdLbl,AllProfile."Role Center ID");
          JSONManagement.AddJObjectToJArray(ProfileJArray,ProfileJObject);
        until AllProfile.NEXT = 0;

      JSONManagement.AddJArrayToJObject(PageDataJObject,JsonDropdownContentLbl,ProfileJArray);

      exit(PageDataJObject.ToString);
    END;

    LOCAL PROCEDURE FindSaaSProfiles@11(VAR AllProfile@1000 : Record "All Profile") : Boolean;
    VAR
      ConfPersonalizationMgt@1001 : Codeunit "Conf./Personalization Mgt.";
    BEGIN
      AllProfile.SETRANGE(Scope,AllProfile.Scope::System);
      AllProfile.SETFILTER("Role Center ID",ConfPersonalizationMgt.GetBuiltInSaaSProfilesFilter);
      exit(AllProfile.FINDSET);
    END;

    LOCAL PROCEDURE IsRolecenterSelectorInstalled@5() : Boolean;
    VAR
      Addin@1000 : Record "Add-in";
    BEGIN
      Addin.SETRANGE("Add-in Name",RoleCenterSelectorAddinTxt);
      Addin.SETRANGE("Public Key Token",RoleCenterSelectorPublickKeyTxt);
      Addin.SETRANGE(Category,Addin.Category::"JavaScript Control Add-in");

      if Addin.FINDFIRST then
        if Addin.Resource.HASVALUE then
          exit(true);
    END;

    PROCEDURE IsRolecenterSelectorEnabled@1(UserName@1000 : Code[50]) : Boolean;
    BEGIN
      if not IsRolecenterSelectorInstalled then
        exit(false);

      exit(GetShowStateFromUserPreference(UserName));
    END;

    LOCAL PROCEDURE GetActivityButtonsActionContainerXmlNode@8(VAR ActivityButtonsXmlNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ActionContainerXmlNodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList") : Boolean;
    VAR
      XMLDOMManagement@1001 : Codeunit "XML DOM Management";
    BEGIN
      if ISNULL(ActionContainerXmlNodeList) then
        exit(false);

      foreach ActivityButtonsXmlNode in ActionContainerXmlNodeList do
        if XMLDOMManagement.GetAttributeValue(ActivityButtonsXmlNode,ActionContainerTypeAttrLbl) = ActivityButtonsLbl then
          exit(true);

      exit(false);
    END;

    LOCAL PROCEDURE IsNodePromoted@7(FeatureXmlNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      XMLDOMManagement@1003 : Codeunit "XML DOM Management";
    BEGIN
      exit(XMLDOMManagement.GetAttributeValue(FeatureXmlNode,PromotedAttrLbl) = '1');
    END;

    LOCAL PROCEDURE GetLanguageSpecificCaptionAndTooltip@10(XmlNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR Caption@1001 : Text;VAR Tooltip@1002 : Text);
    VAR
      XMLDOMManagement@1003 : Codeunit "XML DOM Management";
    BEGIN
      Caption := '';
      Tooltip := '';

      Caption := GetLanguageSpecificText(GLOBALLANGUAGE,XMLDOMManagement.GetAttributeValue(XmlNode,CaptionAttrLbl));
      Tooltip := GetLanguageSpecificText(GLOBALLANGUAGE,XMLDOMManagement.GetAttributeValue(XmlNode,TooltipAttrLbl));
      if Tooltip = '' then
        Tooltip := Caption;
    END;

    LOCAL PROCEDURE GetLanguageSpecificText@4(LanguageID@1000 : Integer;InputMLText@1001 : Text) ReturnText : Text;
    VAR
      Language@1002 : Record Language;
      RegEx@1008 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      RegExMatch@1009 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match";
      RegExMatchs@1010 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.MatchCollection";
      Dictionary@1011 : DotNet "'mscorlib'.System.Collections.Generic.Dictionary`2";
      PrevMatch@1012 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match";
      HtmlUtility@1004 : DotNet "'System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Web.HttpUtility";
      LanguageCode@1003 : Text;
    BEGIN
      LanguageCode := DefaultLangaugeCodeTxt;

      Language.SETRANGE("Windows Language ID",LanguageID);
      if Language.FINDFIRST then
        LanguageCode := Language.Code;

      Dictionary := Dictionary.Dictionary;
      RegExMatchs := RegEx.Matches(InputMLText,STRSUBSTNO(LanguageCodeRegExPatternTxt));

      foreach RegExMatch in RegExMatchs do begin
        if not ISNULL(PrevMatch) then
          Dictionary.Add(
            PrevMatch.Value,
            COPYSTR(InputMLText,PrevMatch.Index + PrevMatch.Length + 1,RegExMatch.Index - (PrevMatch.Index + PrevMatch.Length) - 1));
        PrevMatch := RegExMatch;
      end;

      if not ISNULL(PrevMatch) then
        Dictionary.Add(
          PrevMatch.Value,
          COPYSTR(InputMLText,PrevMatch.Index + PrevMatch.Length + 1,STRLEN(InputMLText) - (PrevMatch.Index + PrevMatch.Length)));

      if not Dictionary.TryGetValue(STRSUBSTNO(LanguageCodePatternTxt,LanguageCode),ReturnText) then
        if LanguageCode <> DefaultLangaugeCodeTxt then
          if not Dictionary.TryGetValue(STRSUBSTNO(LanguageCodePatternTxt,DefaultLangaugeCodeTxt),ReturnText) then
            exit;

      ReturnText := HtmlUtility.HtmlDecode(ReturnText);
      if STRPOS(ReturnText,'"') <> 0 then
        ReturnText := COPYSTR(ReturnText,2,STRLEN(ReturnText) - 2);
    END;

    PROCEDURE GetShowStateFromUserPreference@2(UserName@1000 : Code[50]) RoleCenterSelectorIsEnabled : Boolean;
    VAR
      UserPreference@1001 : Record "User Preference";
    BEGIN
      if not UserPreference.GET(UserName,GetUserPreferenceCode) then
        exit(false);

      UserPreference.CALCFIELDS("User Selection");

      EVALUATE(RoleCenterSelectorIsEnabled,UserPreference.GetUserSelectionAsText);
    END;

    PROCEDURE SetShowStateFromUserPreference@6(UserName@1000 : Code[50];State@1001 : Boolean);
    VAR
      UserPreference@1002 : Record "User Preference";
    BEGIN
      if UserPreference.GET(UserName,GetUserPreferenceCode) then begin
        UserPreference.SetUserSelection(State);
        UserPreference.MODIFY;
        exit;
      end;

      UserPreference.INIT;
      UserPreference."User ID" := UserName;
      UserPreference."Instruction Code" := GetUserPreferenceCode;
      UserPreference.SetUserSelection(State);
      UserPreference.INSERT;
    END;

    PROCEDURE GetUserPreferenceCode@9() : Code[50];
    BEGIN
      exit(UPPERCASE('RoleCenterOverviewShowState'));
    END;

    BEGIN
    END.
  }
}

