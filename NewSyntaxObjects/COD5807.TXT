OBJECT Codeunit 5807 Item Charge Assgnt. (Sales)
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160805.823T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    Permissions=TableData "Sales Header"=r,
                TableData "Sales Line"=r,
                TableData "Sales Shipment Line"=r,
                TableData "Item Charge Assignment (Sales)"=imd,
                TableData "Return Receipt Line"=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SuggestItemChargeMsg@1001 : TextConst 'ENU=Select how to distribute the assigned item charge when the document has more than one line of type Item.';
      EquallyTok@1002 : TextConst 'ENU=Equally';
      ByAmountTok@1003 : TextConst 'ENU=By Amount';
      ByWeightTok@1004 : TextConst 'ENU=By Weight';
      ByVolumeTok@1005 : TextConst 'ENU=By Volume';
      ItemChargesNotAssignedErr@1006 : TextConst 'ENU=No item charges were assigned.';

    [External]
    PROCEDURE InsertItemChargeAssgnt@1(ItemChargeAssgntSales@1000 : Record "Item Charge Assignment (Sales)";ApplToDocType@1001 : Option;ApplToDocNo2@1002 : Code[20];ApplToDocLineNo2@1003 : Integer;ItemNo2@1004 : Code[20];Description2@1005 : Text[50];VAR NextLineNo@1006 : Integer);
    BEGIN
      InsertItemChargeAssgntWithAssignValues(
        ItemChargeAssgntSales,ApplToDocType,ApplToDocNo2,ApplToDocLineNo2,ItemNo2,Description2,0,0,NextLineNo);
    END;

    [External]
    PROCEDURE InsertItemChargeAssgntWithAssignValues@19(FromItemChargeAssgntSales@1000 : Record "Item Charge Assignment (Sales)";ApplToDocType@1001 : Option;FromApplToDocNo@1002 : Code[20];FromApplToDocLineNo@1003 : Integer;FromItemNo@1004 : Code[20];FromDescription@1005 : Text[50];QtyToAssign@1008 : Decimal;AmountToAssign@1009 : Decimal;VAR NextLineNo@1006 : Integer);
    VAR
      ItemChargeAssgntSales@1007 : Record "Item Charge Assignment (Sales)";
    BEGIN
      NextLineNo := NextLineNo + 10000;

      ItemChargeAssgntSales."Document No." := FromItemChargeAssgntSales."Document No.";
      ItemChargeAssgntSales."Document Type" := FromItemChargeAssgntSales."Document Type";
      ItemChargeAssgntSales."Document Line No." := FromItemChargeAssgntSales."Document Line No.";
      ItemChargeAssgntSales."Item Charge No." := FromItemChargeAssgntSales."Item Charge No.";
      ItemChargeAssgntSales."Line No." := NextLineNo;
      ItemChargeAssgntSales."Applies-to Doc. No." := FromApplToDocNo;
      ItemChargeAssgntSales."Applies-to Doc. Type" := ApplToDocType;
      ItemChargeAssgntSales."Applies-to Doc. Line No." := FromApplToDocLineNo;
      ItemChargeAssgntSales."Item No." := FromItemNo;
      ItemChargeAssgntSales.Description := FromDescription;
      ItemChargeAssgntSales."Unit Cost" := FromItemChargeAssgntSales."Unit Cost";
      if QtyToAssign <> 0 then begin
        ItemChargeAssgntSales."Amount to Assign" := AmountToAssign;
        ItemChargeAssgntSales.VALIDATE("Qty. to Assign",QtyToAssign);
      end;
      OnBeforeInsertItemChargeAssgntWithAssignValues(ItemChargeAssgntSales);
      ItemChargeAssgntSales.INSERT;
    END;

    [External]
    PROCEDURE CreateDocChargeAssgn@2(LastItemChargeAssgntSales@1000 : Record "Item Charge Assignment (Sales)";ShipmentNo@1001 : Code[20]);
    VAR
      FromSalesLine@1002 : Record "Sales Line";
      ItemChargeAssgntSales@1003 : Record "Item Charge Assignment (Sales)";
      NextLineNo@1004 : Integer;
    BEGIN
      with LastItemChargeAssgntSales do begin
        FromSalesLine.SETRANGE("Document Type","Document Type");
        FromSalesLine.SETRANGE("Document No.","Document No.");
        FromSalesLine.SETRANGE(Type,FromSalesLine.Type::Item);
        if FromSalesLine.FIND('-') then begin
          NextLineNo := "Line No.";
          ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
          ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
          ItemChargeAssgntSales.SETRANGE("Document Line No.","Document Line No.");
          ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.","Document No.");
          repeat
            if (FromSalesLine.Quantity <> 0) and
               (FromSalesLine.Quantity <> FromSalesLine."Quantity Invoiced") and
               (FromSalesLine."Job No." = '') and
               ((ShipmentNo = '') or (FromSalesLine."Shipment No." = ShipmentNo)) and
               FromSalesLine."Allow Item Charge Assignment"
            then begin
              ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",FromSalesLine."Line No.");
              if not ItemChargeAssgntSales.FINDFIRST then
                InsertItemChargeAssgnt(
                  LastItemChargeAssgntSales,FromSalesLine."Document Type",
                  FromSalesLine."Document No.",FromSalesLine."Line No.",
                  FromSalesLine."No.",FromSalesLine.Description,NextLineNo);
            end;
          until FromSalesLine.NEXT = 0;
        end;
      end;
    END;

    [External]
    PROCEDURE CreateShptChargeAssgnt@3(VAR FromSalesShptLine@1000 : Record "Sales Shipment Line";ItemChargeAssgntSales@1001 : Record "Item Charge Assignment (Sales)");
    VAR
      ItemChargeAssgntSales2@1002 : Record "Item Charge Assignment (Sales)";
      Nextline@1003 : Integer;
    BEGIN
      Nextline := ItemChargeAssgntSales."Line No.";
      ItemChargeAssgntSales2.SETRANGE("Document Type",ItemChargeAssgntSales."Document Type");
      ItemChargeAssgntSales2.SETRANGE("Document No.",ItemChargeAssgntSales."Document No.");
      ItemChargeAssgntSales2.SETRANGE("Document Line No.",ItemChargeAssgntSales."Document Line No.");
      ItemChargeAssgntSales2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntSales2."Applies-to Doc. Type"::Shipment);
      repeat
        FromSalesShptLine.TESTFIELD("Job No.",'');
        ItemChargeAssgntSales2.SETRANGE("Applies-to Doc. No.",FromSalesShptLine."Document No.");
        ItemChargeAssgntSales2.SETRANGE("Applies-to Doc. Line No.",FromSalesShptLine."Line No.");
        if not ItemChargeAssgntSales2.FINDFIRST then
          InsertItemChargeAssgnt(ItemChargeAssgntSales,ItemChargeAssgntSales2."Applies-to Doc. Type"::Shipment,
            FromSalesShptLine."Document No.",FromSalesShptLine."Line No.",
            FromSalesShptLine."No.",FromSalesShptLine.Description,Nextline);
      until FromSalesShptLine.NEXT = 0;
    END;

    [External]
    PROCEDURE CreateRcptChargeAssgnt@4(VAR FromReturnRcptLine@1000 : Record "Return Receipt Line";ItemChargeAssgntSales@1001 : Record "Item Charge Assignment (Sales)");
    VAR
      ItemChargeAssgntSales2@1002 : Record "Item Charge Assignment (Sales)";
      Nextline@1003 : Integer;
    BEGIN
      Nextline := ItemChargeAssgntSales."Line No.";
      ItemChargeAssgntSales2.SETRANGE("Document Type",ItemChargeAssgntSales."Document Type");
      ItemChargeAssgntSales2.SETRANGE("Document No.",ItemChargeAssgntSales."Document No.");
      ItemChargeAssgntSales2.SETRANGE("Document Line No.",ItemChargeAssgntSales."Document Line No.");
      ItemChargeAssgntSales2.SETRANGE(
        "Applies-to Doc. Type",ItemChargeAssgntSales2."Applies-to Doc. Type"::"Return Receipt");
      repeat
        FromReturnRcptLine.TESTFIELD("Job No.",'');
        ItemChargeAssgntSales2.SETRANGE("Applies-to Doc. No.",FromReturnRcptLine."Document No.");
        ItemChargeAssgntSales2.SETRANGE("Applies-to Doc. Line No.",FromReturnRcptLine."Line No.");
        if not ItemChargeAssgntSales2.FINDFIRST then
          InsertItemChargeAssgnt(ItemChargeAssgntSales,ItemChargeAssgntSales2."Applies-to Doc. Type"::"Return Receipt",
            FromReturnRcptLine."Document No.",FromReturnRcptLine."Line No.",
            FromReturnRcptLine."No.",FromReturnRcptLine.Description,Nextline);
      until FromReturnRcptLine.NEXT = 0;
    END;

    [Internal]
    PROCEDURE SuggestAssignment@5(SalesLine@1000 : Record "Sales Line";TotalQtyToAssign@1001 : Decimal;TotalAmtToAssign@1002 : Decimal);
    VAR
      ItemChargeAssgntSales@1013 : Record "Item Charge Assignment (Sales)";
      Selection@1014 : Integer;
      SelectionTxt@1005 : Text;
      SuggestItemChargeMenuTxt@1003 : Text;
      SuggestItemChargeMessageTxt@1004 : Text;
    BEGIN
      with SalesLine do begin
        TESTFIELD("Qty. to Invoice");
        ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
        ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
        ItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
      end;
      if ItemChargeAssgntSales.ISEMPTY then
        exit;

      Selection := 1;
      SuggestItemChargeMenuTxt :=
        STRSUBSTNO('%1,%2,%3,%4',AssignEquallyMenuText,AssignByAmountMenuText,AssignByWeightMenuText,AssignByVolumeMenuText);
      if ItemChargeAssgntSales.COUNT > 1 then begin
        Selection := 2;
        SuggestItemChargeMessageTxt := SuggestItemChargeMsg;
        OnBeforeShowSuggestItemChargeAssignStrMenu(SalesLine,SuggestItemChargeMenuTxt,SuggestItemChargeMessageTxt,Selection);
        if SuggestItemChargeMenuTxt = '' then
          exit;
        if STRLEN(DELCHR(SuggestItemChargeMenuTxt,'=',DELCHR(SuggestItemChargeMenuTxt,'=',','))) > 1 then
          Selection := STRMENU(SuggestItemChargeMenuTxt,Selection,SuggestItemChargeMessageTxt)
        else
          Selection := 1;
      end;
      if Selection = 0 then
        exit;

      SelectionTxt := SELECTSTR(Selection,SuggestItemChargeMenuTxt);

      AssignItemCharges(SalesLine,TotalQtyToAssign,TotalAmtToAssign,SelectionTxt);
    END;

    [External]
    PROCEDURE SuggestAssignment2@6(SalesLine@1000 : Record "Sales Line";TotalQtyToAssign@1001 : Decimal;TotalAmtToAssign@1011 : Decimal;Selection@1014 : 'Equally,"By Amount","By Weight","By Volume"');
    BEGIN
      // this function will be deprecated. Please use AssignItemCharges instead
      AssignItemCharges(SalesLine,TotalQtyToAssign,TotalAmtToAssign,FORMAT(Selection))
    END;

    [External]
    PROCEDURE AssignItemCharges@9(SalesLine@1000 : Record "Sales Line";TotalQtyToAssign@1001 : Decimal;TotalAmtToAssign@1011 : Decimal;SelectionTxt@1014 : Text);
    VAR
      Currency@1016 : Record Currency;
      SalesHeader@1003 : Record "Sales Header";
      ItemChargeAssgntSales@1007 : Record "Item Charge Assignment (Sales)";
      ItemChargesAssigned@1002 : Boolean;
    BEGIN
      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      if not Currency.GET(SalesHeader."Currency Code") then
        Currency.InitRoundingPrecision;

      ItemChargeAssgntSales.SETRANGE("Document Type",SalesLine."Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.",SalesLine."Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.",SalesLine."Line No.");
      if ItemChargeAssgntSales.FINDFIRST then
        case SelectionTxt of
          AssignEquallyMenuText:
            AssignEqually(ItemChargeAssgntSales,Currency,TotalQtyToAssign,TotalAmtToAssign);
          AssignByAmountMenuText:
            AssignByAmount(ItemChargeAssgntSales,Currency,SalesHeader,TotalQtyToAssign,TotalAmtToAssign);
          AssignByWeightMenuText:
            AssignByWeight(ItemChargeAssgntSales,Currency,TotalQtyToAssign);
          AssignByVolumeMenuText:
            AssignByVolume(ItemChargeAssgntSales,Currency,TotalQtyToAssign);
          else begin
            OnAssignItemCharges(
              SelectionTxt,ItemChargeAssgntSales,Currency,SalesHeader,TotalQtyToAssign,TotalAmtToAssign,ItemChargesAssigned);
            if not ItemChargesAssigned then
              ERROR(ItemChargesNotAssignedErr);
          end;
        end;
    END;

    PROCEDURE AssignEquallyMenuText@23() : Text;
    BEGIN
      exit(EquallyTok)
    END;

    PROCEDURE AssignByAmountMenuText@24() : Text;
    BEGIN
      exit(ByAmountTok)
    END;

    PROCEDURE AssignByWeightMenuText@25() : Text;
    BEGIN
      exit(ByWeightTok)
    END;

    PROCEDURE AssignByVolumeMenuText@26() : Text;
    BEGIN
      exit(ByVolumeTok)
    END;

    LOCAL PROCEDURE AssignEqually@8(VAR ItemChargeAssignmentSales@1000 : Record "Item Charge Assignment (Sales)";Currency@1002 : Record Currency;TotalQtyToAssign@1003 : Decimal;TotalAmtToAssign@1004 : Decimal);
    VAR
      TempItemChargeAssgntSales@1008 : TEMPORARY Record "Item Charge Assignment (Sales)";
      RemainingNumOfLines@1015 : Integer;
    BEGIN
      repeat
        if not ItemChargeAssignmentSales.SalesLineInvoiced then begin
          TempItemChargeAssgntSales.INIT;
          TempItemChargeAssgntSales := ItemChargeAssignmentSales;
          TempItemChargeAssgntSales.INSERT;
        end;
      until ItemChargeAssignmentSales.NEXT = 0;

      if TempItemChargeAssgntSales.FINDSET(true) then begin
        RemainingNumOfLines := TempItemChargeAssgntSales.COUNT;
        repeat
          ItemChargeAssignmentSales.GET(
            TempItemChargeAssgntSales."Document Type",
            TempItemChargeAssgntSales."Document No.",
            TempItemChargeAssgntSales."Document Line No.",
            TempItemChargeAssgntSales."Line No.");
          ItemChargeAssignmentSales."Qty. to Assign" := ROUND(TotalQtyToAssign / RemainingNumOfLines,0.00001);
          ItemChargeAssignmentSales."Amount to Assign" :=
            ROUND(
              ItemChargeAssignmentSales."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
              Currency."Amount Rounding Precision");
          TotalQtyToAssign -= ItemChargeAssignmentSales."Qty. to Assign";
          TotalAmtToAssign -= ItemChargeAssignmentSales."Amount to Assign";
          RemainingNumOfLines := RemainingNumOfLines - 1;
          ItemChargeAssignmentSales.MODIFY;
        until TempItemChargeAssgntSales.NEXT = 0;
      end;
      TempItemChargeAssgntSales.DELETEALL;
    END;

    LOCAL PROCEDURE AssignByAmount@10(VAR ItemChargeAssignmentSales@1000 : Record "Item Charge Assignment (Sales)";Currency@1001 : Record Currency;SalesHeader@1002 : Record "Sales Header";TotalQtyToAssign@1003 : Decimal;TotalAmtToAssign@1004 : Decimal);
    VAR
      TempItemChargeAssgntSales@1011 : TEMPORARY Record "Item Charge Assignment (Sales)";
      SalesLine@1005 : Record "Sales Line";
      SalesShptLine@1006 : Record "Sales Shipment Line";
      CurrExchRate@1007 : Record "Currency Exchange Rate";
      ReturnRcptLine@1008 : Record "Return Receipt Line";
      CurrencyCode@1009 : Code[10];
      TotalAppliesToDocLineAmount@1010 : Decimal;
    BEGIN
      repeat
        if not ItemChargeAssignmentSales.SalesLineInvoiced then begin
          TempItemChargeAssgntSales.INIT;
          TempItemChargeAssgntSales := ItemChargeAssignmentSales;
          case ItemChargeAssignmentSales."Applies-to Doc. Type" of
            ItemChargeAssignmentSales."Applies-to Doc. Type"::Quote,
            ItemChargeAssignmentSales."Applies-to Doc. Type"::Order,
            ItemChargeAssignmentSales."Applies-to Doc. Type"::Invoice,
            ItemChargeAssignmentSales."Applies-to Doc. Type"::"Return Order",
            ItemChargeAssignmentSales."Applies-to Doc. Type"::"Credit Memo":
              begin
                SalesLine.GET(
                  ItemChargeAssignmentSales."Applies-to Doc. Type",
                  ItemChargeAssignmentSales."Applies-to Doc. No.",
                  ItemChargeAssignmentSales."Applies-to Doc. Line No.");
                TempItemChargeAssgntSales."Applies-to Doc. Line Amount" :=
                  ABS(SalesLine."Line Amount");
              end;
            ItemChargeAssignmentSales."Applies-to Doc. Type"::"Return Receipt":
              begin
                ReturnRcptLine.GET(
                  ItemChargeAssignmentSales."Applies-to Doc. No.",
                  ItemChargeAssignmentSales."Applies-to Doc. Line No.");
                CurrencyCode := ReturnRcptLine.GetCurrencyCode;
                if CurrencyCode = SalesHeader."Currency Code" then
                  TempItemChargeAssgntSales."Applies-to Doc. Line Amount" :=
                    ABS(ReturnRcptLine."Item Charge Base Amount")
                else
                  TempItemChargeAssgntSales."Applies-to Doc. Line Amount" :=
                    CurrExchRate.ExchangeAmtFCYToFCY(
                      SalesHeader."Posting Date",CurrencyCode,SalesHeader."Currency Code",
                      ABS(ReturnRcptLine."Item Charge Base Amount"));
              end;
            ItemChargeAssignmentSales."Applies-to Doc. Type"::Shipment:
              begin
                SalesShptLine.GET(
                  ItemChargeAssignmentSales."Applies-to Doc. No.",
                  ItemChargeAssignmentSales."Applies-to Doc. Line No.");
                CurrencyCode := SalesShptLine.GetCurrencyCode;
                if CurrencyCode = SalesHeader."Currency Code" then
                  TempItemChargeAssgntSales."Applies-to Doc. Line Amount" :=
                    ABS(SalesShptLine."Item Charge Base Amount")
                else
                  TempItemChargeAssgntSales."Applies-to Doc. Line Amount" :=
                    CurrExchRate.ExchangeAmtFCYToFCY(
                      SalesHeader."Posting Date",CurrencyCode,SalesHeader."Currency Code",
                      ABS(SalesShptLine."Item Charge Base Amount"));
              end;
          end;
          if TempItemChargeAssgntSales."Applies-to Doc. Line Amount" <> 0 then
            TempItemChargeAssgntSales.INSERT
          else begin
            ItemChargeAssignmentSales."Amount to Assign" := 0;
            ItemChargeAssignmentSales."Qty. to Assign" := 0;
            ItemChargeAssignmentSales.MODIFY;
          end;
          TotalAppliesToDocLineAmount += TempItemChargeAssgntSales."Applies-to Doc. Line Amount";
        end;
      until ItemChargeAssignmentSales.NEXT = 0;

      if TempItemChargeAssgntSales.FINDSET(true) then
        repeat
          ItemChargeAssignmentSales.GET(
            TempItemChargeAssgntSales."Document Type",
            TempItemChargeAssgntSales."Document No.",
            TempItemChargeAssgntSales."Document Line No.",
            TempItemChargeAssgntSales."Line No.");
          if TotalQtyToAssign <> 0 then begin
            ItemChargeAssignmentSales."Qty. to Assign" :=
              ROUND(
                TempItemChargeAssgntSales."Applies-to Doc. Line Amount" / TotalAppliesToDocLineAmount * TotalQtyToAssign,
                0.00001);
            ItemChargeAssignmentSales."Amount to Assign" :=
              ROUND(
                ItemChargeAssignmentSales."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
                Currency."Amount Rounding Precision");
            TotalQtyToAssign -= ItemChargeAssignmentSales."Qty. to Assign";
            TotalAmtToAssign -= ItemChargeAssignmentSales."Amount to Assign";
            TotalAppliesToDocLineAmount -= TempItemChargeAssgntSales."Applies-to Doc. Line Amount";
            ItemChargeAssignmentSales.MODIFY;
          end;
        until TempItemChargeAssgntSales.NEXT = 0;

      TempItemChargeAssgntSales.DELETEALL;
    END;

    LOCAL PROCEDURE AssignByWeight@15(VAR ItemChargeAssignmentSales@1000 : Record "Item Charge Assignment (Sales)";Currency@1001 : Record Currency;TotalQtyToAssign@1003 : Decimal);
    VAR
      TempItemChargeAssgntSales@1004 : TEMPORARY Record "Item Charge Assignment (Sales)";
      LineArray@1005 : ARRAY [3] OF Decimal;
      TotalGrossWeight@1006 : Decimal;
      QtyRemaining@1007 : Decimal;
      AmountRemaining@1008 : Decimal;
    BEGIN
      repeat
        if not ItemChargeAssignmentSales.SalesLineInvoiced then begin
          TempItemChargeAssgntSales.INIT;
          TempItemChargeAssgntSales := ItemChargeAssignmentSales;
          TempItemChargeAssgntSales.INSERT;
          GetItemValues(TempItemChargeAssgntSales,LineArray);
          TotalGrossWeight := TotalGrossWeight + (LineArray[2] * LineArray[1]);
        end;
      until ItemChargeAssignmentSales.NEXT = 0;

      if TempItemChargeAssgntSales.FINDSET(true) then
        repeat
          GetItemValues(TempItemChargeAssgntSales,LineArray);
          if TotalGrossWeight <> 0 then
            TempItemChargeAssgntSales."Qty. to Assign" :=
              (TotalQtyToAssign * LineArray[2] * LineArray[1]) / TotalGrossWeight + QtyRemaining
          else
            TempItemChargeAssgntSales."Qty. to Assign" := 0;
          AssignSalesItemCharge(ItemChargeAssignmentSales,TempItemChargeAssgntSales,Currency,QtyRemaining,AmountRemaining);
        until TempItemChargeAssgntSales.NEXT = 0;
      TempItemChargeAssgntSales.DELETEALL;
    END;

    LOCAL PROCEDURE AssignByVolume@16(VAR ItemChargeAssignmentSales@1000 : Record "Item Charge Assignment (Sales)";Currency@1001 : Record Currency;TotalQtyToAssign@1002 : Decimal);
    VAR
      TempItemChargeAssgntSales@1004 : TEMPORARY Record "Item Charge Assignment (Sales)";
      LineArray@1005 : ARRAY [3] OF Decimal;
      TotalUnitVolume@1009 : Decimal;
      QtyRemaining@1007 : Decimal;
      AmountRemaining@1008 : Decimal;
    BEGIN
      repeat
        if not ItemChargeAssignmentSales.SalesLineInvoiced then begin
          TempItemChargeAssgntSales.INIT;
          TempItemChargeAssgntSales := ItemChargeAssignmentSales;
          TempItemChargeAssgntSales.INSERT;
          GetItemValues(TempItemChargeAssgntSales,LineArray);
          TotalUnitVolume := TotalUnitVolume + (LineArray[3] * LineArray[1]);
        end;
      until ItemChargeAssignmentSales.NEXT = 0;

      if TempItemChargeAssgntSales.FINDSET(true) then
        repeat
          GetItemValues(TempItemChargeAssgntSales,LineArray);
          if TotalUnitVolume <> 0 then
            TempItemChargeAssgntSales."Qty. to Assign" :=
              (TotalQtyToAssign * LineArray[3] * LineArray[1]) / TotalUnitVolume + QtyRemaining
          else
            TempItemChargeAssgntSales."Qty. to Assign" := 0;
          AssignSalesItemCharge(ItemChargeAssignmentSales,TempItemChargeAssgntSales,Currency,QtyRemaining,AmountRemaining);
        until TempItemChargeAssgntSales.NEXT = 0;
      TempItemChargeAssgntSales.DELETEALL;
    END;

    LOCAL PROCEDURE AssignSalesItemCharge@17(VAR ItemChargeAssignmentSales@1000 : Record "Item Charge Assignment (Sales)";ItemChargeAssignmentSales2@1001 : Record "Item Charge Assignment (Sales)";Currency@1002 : Record Currency;VAR QtyRemaining@1003 : Decimal;VAR AmountRemaining@1004 : Decimal);
    BEGIN
      ItemChargeAssignmentSales.GET(
        ItemChargeAssignmentSales2."Document Type",
        ItemChargeAssignmentSales2."Document No.",
        ItemChargeAssignmentSales2."Document Line No.",
        ItemChargeAssignmentSales2."Line No.");
      ItemChargeAssignmentSales."Qty. to Assign" := ROUND(ItemChargeAssignmentSales2."Qty. to Assign",0.00001);
      ItemChargeAssignmentSales."Amount to Assign" :=
        ItemChargeAssignmentSales."Qty. to Assign" * ItemChargeAssignmentSales."Unit Cost" + AmountRemaining;
      AmountRemaining := ItemChargeAssignmentSales."Amount to Assign" -
        ROUND(ItemChargeAssignmentSales."Amount to Assign",Currency."Amount Rounding Precision");
      QtyRemaining := ItemChargeAssignmentSales2."Qty. to Assign" - ItemChargeAssignmentSales."Qty. to Assign";
      ItemChargeAssignmentSales."Amount to Assign" :=
        ROUND(ItemChargeAssignmentSales."Amount to Assign",Currency."Amount Rounding Precision");
      ItemChargeAssignmentSales.MODIFY;
    END;

    PROCEDURE GetItemValues@35(TempItemChargeAssgntSales@1000 : TEMPORARY Record "Item Charge Assignment (Sales)";VAR DecimalArray@1001 : ARRAY [3] OF Decimal);
    VAR
      SalesLine@1002 : Record "Sales Line";
      SalesShptLine@1006 : Record "Sales Shipment Line";
      ReturnRcptLine@1007 : Record "Return Receipt Line";
    BEGIN
      CLEAR(DecimalArray);
      with TempItemChargeAssgntSales do
        case "Applies-to Doc. Type" of
          "Applies-to Doc. Type"::Order,
          "Applies-to Doc. Type"::Invoice,
          "Applies-to Doc. Type"::"Return Order",
          "Applies-to Doc. Type"::"Credit Memo":
            begin
              SalesLine.GET("Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
              DecimalArray[1] := SalesLine.Quantity;
              DecimalArray[2] := SalesLine."Gross Weight";
              DecimalArray[3] := SalesLine."Unit Volume";
            end;
          "Applies-to Doc. Type"::"Return Receipt":
            begin
              ReturnRcptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
              DecimalArray[1] := ReturnRcptLine.Quantity;
              DecimalArray[2] := ReturnRcptLine."Gross Weight";
              DecimalArray[3] := ReturnRcptLine."Unit Volume";
            end;
          "Applies-to Doc. Type"::Shipment:
            begin
              SalesShptLine.GET("Applies-to Doc. No.","Applies-to Doc. Line No.");
              DecimalArray[1] := SalesShptLine.Quantity;
              DecimalArray[2] := SalesShptLine."Gross Weight";
              DecimalArray[3] := SalesShptLine."Unit Volume";
            end;
        end;
    END;

    [External]
    PROCEDURE SuggestAssignmentFromLine@11(VAR FromItemChargeAssignmentSales@1000 : Record "Item Charge Assignment (Sales)");
    VAR
      Currency@1014 : Record Currency;
      SalesHeader@1003 : Record "Sales Header";
      ItemChargeAssignmentSales@1007 : Record "Item Charge Assignment (Sales)";
      TempItemChargeAssgntSales@1008 : TEMPORARY Record "Item Charge Assignment (Sales)";
      TotalAmountToAssign@1013 : Decimal;
      TotalQtyToAssign@1012 : Decimal;
      ItemChargeAssgntLineAmt@1001 : Decimal;
      ItemChargeAssgntLineQty@1011 : Decimal;
    BEGIN
      with FromItemChargeAssignmentSales do begin
        SalesHeader.GET("Document Type","Document No.");
        if not Currency.GET(SalesHeader."Currency Code") then
          Currency.InitRoundingPrecision;

        GetItemChargeAssgntLineAmounts(
          "Document Type","Document No.","Document Line No.",
          ItemChargeAssgntLineQty,ItemChargeAssgntLineAmt);

        if not ItemChargeAssignmentSales.GET("Document Type","Document No.","Document Line No.","Line No.") then
          exit;

        ItemChargeAssignmentSales."Qty. to Assign" := "Qty. to Assign";
        ItemChargeAssignmentSales."Amount to Assign" := "Amount to Assign";
        ItemChargeAssignmentSales.MODIFY;

        ItemChargeAssignmentSales.SETRANGE("Document Type","Document Type");
        ItemChargeAssignmentSales.SETRANGE("Document No.","Document No.");
        ItemChargeAssignmentSales.SETRANGE("Document Line No.","Document Line No.");
        ItemChargeAssignmentSales.CALCSUMS("Qty. to Assign","Amount to Assign");
        TotalQtyToAssign := ItemChargeAssignmentSales."Qty. to Assign";
        TotalAmountToAssign := ItemChargeAssignmentSales."Amount to Assign";

        if TotalAmountToAssign = ItemChargeAssgntLineAmt then
          exit;

        if TotalQtyToAssign = ItemChargeAssgntLineQty then begin
          TotalAmountToAssign := ItemChargeAssgntLineAmt;
          ItemChargeAssignmentSales.FINDSET;
          repeat
            if not ItemChargeAssignmentSales.SalesLineInvoiced then begin
              TempItemChargeAssgntSales := ItemChargeAssignmentSales;
              TempItemChargeAssgntSales.INSERT;
            end;
          until ItemChargeAssignmentSales.NEXT = 0;

          if TempItemChargeAssgntSales.FINDSET then begin
            repeat
              ItemChargeAssignmentSales.GET(
                TempItemChargeAssgntSales."Document Type",
                TempItemChargeAssgntSales."Document No.",
                TempItemChargeAssgntSales."Document Line No.",
                TempItemChargeAssgntSales."Line No.");
              if TotalQtyToAssign <> 0 then begin
                ItemChargeAssignmentSales."Amount to Assign" :=
                  ROUND(
                    ItemChargeAssignmentSales."Qty. to Assign" / TotalQtyToAssign * TotalAmountToAssign,
                    Currency."Amount Rounding Precision");
                TotalQtyToAssign -= ItemChargeAssignmentSales."Qty. to Assign";
                TotalAmountToAssign -= ItemChargeAssignmentSales."Amount to Assign";
                ItemChargeAssignmentSales.MODIFY;
              end;
            until TempItemChargeAssgntSales.NEXT = 0;
          end;
        end;

        ItemChargeAssignmentSales.GET("Document Type","Document No.","Document Line No.","Line No.");
      end;

      FromItemChargeAssignmentSales := ItemChargeAssignmentSales;
    END;

    LOCAL PROCEDURE GetItemChargeAssgntLineAmounts@14(DocumentType@1000 : Option;DocumentNo@1001 : Code[20];DocumentLineNo@1002 : Integer;VAR ItemChargeAssgntLineQty@1003 : Decimal;VAR ItemChargeAssgntLineAmt@1004 : Decimal);
    VAR
      SalesLine@1005 : Record "Sales Line";
      SalesHeader@1006 : Record "Sales Header";
      Currency@1007 : Record Currency;
    BEGIN
      SalesHeader.GET(DocumentType,DocumentNo);
      if SalesHeader."Currency Code" = '' then
        Currency.InitRoundingPrecision
      else
        Currency.GET(SalesHeader."Currency Code");

      with SalesLine do begin
        GET(DocumentType,DocumentNo,DocumentLineNo);
        TESTFIELD(Type,Type::"Charge (Item)");
        TESTFIELD("No.");
        TESTFIELD(Quantity);

        if ("Inv. Discount Amount" = 0) and
           ("Line Discount Amount" = 0) and
           (not SalesHeader."Prices Including VAT")
        then
          ItemChargeAssgntLineAmt := "Line Amount"
        else
          if SalesHeader."Prices Including VAT" then
            ItemChargeAssgntLineAmt :=
              ROUND(("Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
                Currency."Amount Rounding Precision")
          else
            ItemChargeAssgntLineAmt := "Line Amount" - "Inv. Discount Amount";

        ItemChargeAssgntLineAmt :=
          ROUND(
            ItemChargeAssgntLineAmt * ("Qty. to Invoice" / Quantity),
            Currency."Amount Rounding Precision");
        ItemChargeAssgntLineQty := "Qty. to Invoice";
      end;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertItemChargeAssgntWithAssignValues@7(VAR ItemChargeAssgntSales@1000 : Record "Item Charge Assignment (Sales)");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowSuggestItemChargeAssignStrMenu@12(SalesLine@1000 : Record "Sales Line";VAR SuggestItemChargeMenuTxt@1002 : Text;VAR SuggestItemChargeMessageTxt@1001 : Text;VAR Selection@1003 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAssignItemCharges@21(SelectionTxt@1006 : Text;VAR ItemChargeAssignmentSales@1004 : Record "Item Charge Assignment (Sales)";Currency@1003 : Record Currency;SalesHeader@1002 : Record "Sales Header";TotalQtyToAssign@1001 : Decimal;TotalAmtToAssign@1000 : Decimal;VAR ItemChargesAssigned@1005 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

