OBJECT Codeunit 5777 Whse. Validate Source Line
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160803.297T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="must not be changed when a %1 for this %2 exists: "';
      Text001@1002 : TextConst 'ENU=The %1 cannot be deleted when a related %2 exists.';
      Text002@1004 : TextConst 'ENU=You cannot post consumption for order no. %1 because a quantity of %2 remains to be picked.';
      WhseActivLine@1003 : Record "Warehouse Activity Line";
      TableCaptionValue@1001 : Text[100];

    [External]
    PROCEDURE SalesLineVerifyChange@1(VAR NewSalesLine@1000 : Record "Sales Line";VAR OldSalesLine@1001 : Record "Sales Line");
    VAR
      NewRecRef@1003 : RecordRef;
      OldRecRef@1002 : RecordRef;
    BEGIN
      if not WhseLinesExist(
           DATABASE::"Sales Line",NewSalesLine."Document Type",NewSalesLine."Document No.",NewSalesLine."Line No.",0,
           NewSalesLine.Quantity)
      then
        exit;

      NewRecRef.GETTABLE(NewSalesLine);
      OldRecRef.GETTABLE(OldSalesLine);
      with NewSalesLine do begin
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Type));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Variant Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Location Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Drop Shipment"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Purchase Order No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Purch. Order Line No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Job No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Qty. to Ship"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Qty. to Assemble to Order"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Shipment Date"));
      end;

      OnAfterSalesLineVerifyChange(NewRecRef,OldRecRef);
    END;

    [External]
    PROCEDURE SalesLineDelete@2(VAR SalesLine@1000 : Record "Sales Line");
    BEGIN
      if WhseLinesExist(
           DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",
           SalesLine."Line No.",0,SalesLine.Quantity)
      then
        ERROR(Text001,SalesLine.TABLECAPTION,TableCaptionValue);

      OnAfterSalesLineDelete(SalesLine);
    END;

    [External]
    PROCEDURE ServiceLineVerifyChange@15(VAR NewServiceLine@1000 : Record "Service Line";VAR OldServiceLine@1001 : Record "Service Line");
    VAR
      NewRecRef@1002 : RecordRef;
      OldRecRef@1003 : RecordRef;
    BEGIN
      if not WhseLinesExist(
           DATABASE::"Service Line",NewServiceLine."Document Type",NewServiceLine."Document No.",NewServiceLine."Line No.",0,
           NewServiceLine.Quantity)
      then
        exit;

      NewRecRef.GETTABLE(NewServiceLine);
      OldRecRef.GETTABLE(OldServiceLine);
      with NewServiceLine do begin
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Type));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Location Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Variant Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
      end;

      OnAfterServiceLineVerifyChange(NewRecRef,OldRecRef);
    END;

    [External]
    PROCEDURE ServiceLineDelete@16(VAR ServiceLine@1000 : Record "Service Line");
    BEGIN
      if WhseLinesExist(
           DATABASE::"Service Line",ServiceLine."Document Type",ServiceLine."Document No.",
           ServiceLine."Line No.",0,ServiceLine.Quantity)
      then
        ERROR(Text001,ServiceLine.TABLECAPTION,TableCaptionValue);

      OnAfterServiceLineDelete(ServiceLine);
    END;

    LOCAL PROCEDURE VerifyFieldNotChanged@17(NewRecRef@1000 : RecordRef;OldRecRef@1001 : RecordRef;FieldNumber@1002 : Integer);
    VAR
      NewFieldRef@1004 : FieldRef;
      OldFieldRef@1003 : FieldRef;
    BEGIN
      NewFieldRef := NewRecRef.FIELD(FieldNumber);
      OldFieldRef := OldRecRef.FIELD(FieldNumber);
      if FORMAT(OldFieldRef.VALUE) <> FORMAT(NewFieldRef.VALUE) then
        NewFieldRef.FIELDERROR(STRSUBSTNO(Text000,TableCaptionValue,NewRecRef.CAPTION));
    END;

    [External]
    PROCEDURE PurchaseLineVerifyChange@3(VAR NewPurchLine@1000 : Record "Purchase Line";VAR OldPurchLine@1001 : Record "Purchase Line");
    VAR
      NewRecRef@1003 : RecordRef;
      OldRecRef@1002 : RecordRef;
    BEGIN
      if not WhseLinesExist(
           DATABASE::"Purchase Line",NewPurchLine."Document Type",NewPurchLine."Document No.",
           NewPurchLine."Line No.",0,NewPurchLine.Quantity)
      then
        exit;

      NewRecRef.GETTABLE(NewPurchLine);
      OldRecRef.GETTABLE(OldPurchLine);
      with NewPurchLine do begin
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Type));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Variant Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Location Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Drop Shipment"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Sales Order No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Sales Order Line No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Special Order"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Special Order Sales No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Special Order Sales Line No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Job No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Qty. to Receive"));
      end;

      OnAfterPurchaseLineVerifyChange(NewPurchLine,OldPurchLine);
    END;

    [External]
    PROCEDURE PurchaseLineDelete@4(VAR PurchLine@1000 : Record "Purchase Line");
    BEGIN
      if WhseLinesExist(
           DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",0,PurchLine.Quantity)
      then
        ERROR(Text001,PurchLine.TABLECAPTION,TableCaptionValue);

      OnAfterPurchaseLineDelete(PurchLine);
    END;

    [External]
    PROCEDURE TransLineVerifyChange@5(VAR NewTransLine@1000 : Record "Transfer Line";VAR OldTransLine@1001 : Record "Transfer Line");
    BEGIN
      with NewTransLine do begin
        if WhseLinesExist(DATABASE::"Transfer Line",0,"Document No.","Line No.",0,Quantity) then begin
          TransLineCommonVerification(NewTransLine,OldTransLine);
          if "Qty. to Ship" <> OldTransLine."Qty. to Ship" then
            FIELDERROR("Qty. to Ship",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));
        end;

        if WhseLinesExist(DATABASE::"Transfer Line",1,"Document No.","Line No.",0,Quantity) then begin
          TransLineCommonVerification(NewTransLine,OldTransLine);
          if "Qty. to Receive" <> OldTransLine."Qty. to Receive" then
            FIELDERROR("Qty. to Receive",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));
        end;
      end;

      OnAfterTransLineVerifyChange(NewTransLine,OldTransLine);
    END;

    LOCAL PROCEDURE TransLineCommonVerification@19(VAR NewTransLine@1001 : Record "Transfer Line";VAR OldTransLine@1000 : Record "Transfer Line");
    BEGIN
      with NewTransLine do begin
        if "Item No." <> OldTransLine."Item No." then
          FIELDERROR("Item No.",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));

        if "Variant Code" <> OldTransLine."Variant Code" then
          FIELDERROR("Variant Code",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));

        if "Unit of Measure Code" <> OldTransLine."Unit of Measure Code" then
          FIELDERROR("Unit of Measure Code",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));

        if Quantity <> OldTransLine.Quantity then
          FIELDERROR(Quantity,STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));
      end;
    END;

    [External]
    PROCEDURE TransLineDelete@10(VAR TransLine@1000 : Record "Transfer Line");
    BEGIN
      with TransLine do begin
        if WhseLinesExist(DATABASE::"Transfer Line",0,"Document No.","Line No.",0,Quantity) then
          ERROR(Text001,TABLECAPTION,TableCaptionValue);
        if WhseLinesExist(DATABASE::"Transfer Line",1,"Document No.","Line No.",0,Quantity) then
          ERROR(Text001,TABLECAPTION,TableCaptionValue);
      end;

      OnAfterTransLineDelete(TransLine);
    END;

    [External]
    PROCEDURE WhseLinesExist@6(SourceType@1000 : Integer;SourceSubType@1001 : Option;SourceNo@1002 : Code[20];SourceLineNo@1003 : Integer;SourceSublineNo@1004 : Integer;SourceQty@1007 : Decimal) : Boolean;
    VAR
      WhseRcptLine@1006 : Record "Warehouse Receipt Line";
      WhseShptLine@1005 : Record "Warehouse Shipment Line";
    BEGIN
      if not WhseRcptLine.READPERMISSION then
        exit;
      if ((SourceType = DATABASE::"Purchase Line") and (SourceSubType = 1) and (SourceQty >= 0)) or
         ((SourceType = DATABASE::"Purchase Line") and (SourceSubType = 5) and (SourceQty < 0)) or
         ((SourceType = DATABASE::"Sales Line") and (SourceSubType = 1) and (SourceQty < 0)) or
         ((SourceType = DATABASE::"Sales Line") and (SourceSubType = 5) and (SourceQty >= 0)) or
         ((SourceType = DATABASE::"Transfer Line") and (SourceSubType = 1))
      then begin
        WhseRcptLine.SetSourceFilter(SourceType,SourceSubType,SourceNo,SourceLineNo,true);
        if not WhseRcptLine.ISEMPTY then begin
          TableCaptionValue := WhseRcptLine.TABLECAPTION;
          exit(true);
        end;
      end;

      if ((SourceType = DATABASE::"Purchase Line") and (SourceSubType = 1) and (SourceQty < 0)) or
         ((SourceType = DATABASE::"Purchase Line") and (SourceSubType = 5) and (SourceQty >= 0)) or
         ((SourceType = DATABASE::"Sales Line") and (SourceSubType = 1) and (SourceQty >= 0)) or
         ((SourceType = DATABASE::"Sales Line") and (SourceSubType = 5) and (SourceQty < 0)) or
         ((SourceType = DATABASE::"Transfer Line") and (SourceSubType = 0)) or
         ((SourceType = DATABASE::"Service Line") and (SourceSubType = 1))
      then begin
        WhseShptLine.SetSourceFilter(SourceType,SourceSubType,SourceNo,SourceLineNo,true);
        if not WhseShptLine.ISEMPTY then begin
          TableCaptionValue := WhseShptLine.TABLECAPTION;
          exit(true);
        end;
      end;

      WhseActivLine.SetSourceFilter(SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSublineNo,true);
      if not WhseActivLine.ISEMPTY then begin
        TableCaptionValue := WhseActivLine.TABLECAPTION;
        exit(true);
      end;

      TableCaptionValue := '';
      exit(false);
    END;

    [External]
    PROCEDURE ProdComponentVerifyChange@9(VAR NewProdOrderComp@1000 : Record "Prod. Order Component";VAR OldProdOrderComp@1001 : Record "Prod. Order Component");
    VAR
      NewRecRef@1002 : RecordRef;
      OldRecRef@1003 : RecordRef;
    BEGIN
      if not WhseLinesExist(
           DATABASE::"Prod. Order Component",NewProdOrderComp.Status,NewProdOrderComp."Prod. Order No.",
           NewProdOrderComp."Prod. Order Line No.",NewProdOrderComp."Line No.",NewProdOrderComp.Quantity)
      then
        exit;

      NewRecRef.GETTABLE(NewProdOrderComp);
      OldRecRef.GETTABLE(OldProdOrderComp);
      with NewProdOrderComp do begin
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Status));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Prod. Order No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Prod. Order Line No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Line No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Item No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Variant Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Location Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Due Date"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Quantity per"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Expected Quantity"));
      end;

      OnAfterProdComponentVerifyChange(NewRecRef,OldRecRef);
    END;

    [External]
    PROCEDURE ProdComponentDelete@7(VAR ProdOrderComp@1000 : Record "Prod. Order Component");
    BEGIN
      if WhseLinesExist(
           DATABASE::"Prod. Order Component",
           ProdOrderComp.Status,ProdOrderComp."Prod. Order No.",ProdOrderComp."Prod. Order Line No.",
           ProdOrderComp."Line No.",ProdOrderComp.Quantity)
      then
        ERROR(Text001,ProdOrderComp.TABLECAPTION,TableCaptionValue);

      OnAfterProdComponentDelete(ProdOrderComp);
    END;

    [External]
    PROCEDURE ItemLineVerifyChange@11(VAR NewItemJnlLine@1000 : Record "Item Journal Line";VAR OldItemJnlLine@1001 : Record "Item Journal Line");
    VAR
      AssemblyLine@1006 : Record "Assembly Line";
      ProdOrderComp@1003 : Record "Prod. Order Component";
      Location@1005 : Record Location;
      LinesExist@1002 : Boolean;
      QtyChecked@1004 : Boolean;
      QtyRemainingToBePicked@1007 : Decimal;
    BEGIN
      with NewItemJnlLine do begin
        case "Entry Type" of
          "Entry Type"::"Assembly Consumption":
            begin
              TESTFIELD("Order Type","Order Type"::Assembly);
              if Location.GET("Location Code") and Location."Require Pick" and Location."Require Shipment" then
                if AssemblyLine.GET(AssemblyLine."Document Type"::Order,"Order No.","Order Line No.") and
                   (Quantity >= 0)
                then begin
                  QtyRemainingToBePicked := Quantity - AssemblyLine.CalcQtyPickedNotConsumed;
                  if QtyRemainingToBePicked > 0 then
                    ERROR(Text002,"Order No.",QtyRemainingToBePicked);
                  QtyChecked := true;
                end;

              LinesExist := false;
            end;
          "Entry Type"::Consumption:
            begin
              TESTFIELD("Order Type","Order Type"::Production);
              if Location.GET("Location Code") and Location."Require Pick" and Location."Require Shipment" then
                if ProdOrderComp.GET(
                     ProdOrderComp.Status::Released,
                     "Order No.","Order Line No.","Prod. Order Comp. Line No.") and
                   (ProdOrderComp."Flushing Method" = ProdOrderComp."Flushing Method"::Manual) and
                   (Quantity >= 0)
                then begin
                  QtyRemainingToBePicked :=
                    Quantity - CalcNextLevelProdOutput(ProdOrderComp) -
                    ProdOrderComp."Qty. Picked" + ProdOrderComp."Expected Quantity" - ProdOrderComp."Remaining Quantity";
                  if QtyRemainingToBePicked > 0 then
                    ERROR(Text002,"Order No.",QtyRemainingToBePicked);
                  QtyChecked := true;
                end;

              LinesExist :=
                WhseLinesExist(
                  DATABASE::"Prod. Order Component",3,"Order No.","Order Line No.","Prod. Order Comp. Line No.",Quantity);
            end;
          "Entry Type"::Output:
            begin
              TESTFIELD("Order Type","Order Type"::Production);
              LinesExist :=
                WhseLinesExist(
                  DATABASE::"Prod. Order Line",3,"Order No.","Order Line No.",0,Quantity);
            end;
          else
            LinesExist := false;
        end;

        if LinesExist then begin
          if ("Item No." <> OldItemJnlLine."Item No.") and
             (OldItemJnlLine."Item No." <> '')
          then
            FIELDERROR("Item No.",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));

          if ("Variant Code" <> OldItemJnlLine."Variant Code") and
             (OldItemJnlLine."Variant Code" <> '')
          then
            FIELDERROR("Variant Code",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));

          if ("Location Code" <> OldItemJnlLine."Location Code") and
             (OldItemJnlLine."Location Code" <> '')
          then
            FIELDERROR("Location Code",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));

          if ("Unit of Measure Code" <> OldItemJnlLine."Unit of Measure Code") and
             (OldItemJnlLine."Unit of Measure Code" <> '')
          then
            FIELDERROR("Unit of Measure Code",STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));

          if (Quantity <> OldItemJnlLine.Quantity) and
             (OldItemJnlLine.Quantity <> 0) and
             not QtyChecked
          then
            FIELDERROR(Quantity,STRSUBSTNO(Text000,TableCaptionValue,TABLECAPTION));
        end;
      end;

      OnAfterItemLineVerifyChange(NewItemJnlLine,OldItemJnlLine);
    END;

    [External]
    PROCEDURE ProdOrderLineVerifyChange@12(VAR NewProdOrderLine@1000 : Record "Prod. Order Line";VAR OldProdOrderLine@1001 : Record "Prod. Order Line");
    VAR
      NewRecRef@1003 : RecordRef;
      OldRecRef@1002 : RecordRef;
    BEGIN
      if not WhseLinesExist(
           DATABASE::"Prod. Order Line",NewProdOrderLine.Status,NewProdOrderLine."Prod. Order No.",
           NewProdOrderLine."Line No.",0,NewProdOrderLine.Quantity)
      then
        exit;

      NewRecRef.GETTABLE(NewProdOrderLine);
      OldRecRef.GETTABLE(OldProdOrderLine);
      with NewProdOrderLine do begin
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Status));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Prod. Order No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Line No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Item No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Variant Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Location Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Due Date"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
      end;

      OnAfterProdOrderLineVerifyChange(NewProdOrderLine,OldProdOrderLine);
    END;

    [External]
    PROCEDURE ProdOrderLineDelete@8(VAR ProdOrderLine@1000 : Record "Prod. Order Line");
    BEGIN
      with ProdOrderLine do
        if WhseLinesExist(
             DATABASE::"Prod. Order Line",Status,"Prod. Order No.","Line No.",0,Quantity)
        then
          ERROR(Text001,TABLECAPTION,TableCaptionValue);

      OnAfterProdOrderLineDelete(ProdOrderLine);
    END;

    [External]
    PROCEDURE AssemblyLineVerifyChange@14(VAR NewAssemblyLine@1000 : Record "Assembly Line";VAR OldAssemblyLine@1001 : Record "Assembly Line");
    VAR
      Location@1002 : Record Location;
      NewRecRef@1004 : RecordRef;
      OldRecRef@1003 : RecordRef;
    BEGIN
      if OldAssemblyLine.Type <> OldAssemblyLine.Type::Item then
        exit;

      if not WhseLinesExist(
           DATABASE::"Assembly Line",NewAssemblyLine."Document Type",NewAssemblyLine."Document No.",
           NewAssemblyLine."Line No.",0,NewAssemblyLine.Quantity)
      then
        exit;

      NewRecRef.GETTABLE(NewAssemblyLine);
      OldRecRef.GETTABLE(OldAssemblyLine);
      with NewAssemblyLine do begin
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Document Type"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Document No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Line No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Variant Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Location Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Due Date"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Quantity per"));
        if Location.GET("Location Code") and not Location."Require Shipment" then
          VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Quantity to Consume"));
      end;

      OnAfterAssemblyLineVerifyChange(NewRecRef,OldRecRef);
    END;

    [External]
    PROCEDURE AssemblyLineDelete@13(VAR AssemblyLine@1000 : Record "Assembly Line");
    BEGIN
      if AssemblyLine.Type <> AssemblyLine.Type::Item then
        exit;

      if WhseLinesExist(
           DATABASE::"Assembly Line",AssemblyLine."Document Type",AssemblyLine."Document No.",AssemblyLine."Line No.",0,
           AssemblyLine.Quantity)
      then
        ERROR(Text001,AssemblyLine.TABLECAPTION,TableCaptionValue);

      OnAfterAssemblyLineDelete(AssemblyLine);
    END;

    [External]
    PROCEDURE CalcNextLevelProdOutput@18(ProdOrderComp@1000 : Record "Prod. Order Component") : Decimal;
    VAR
      Item@1001 : Record Item;
      WhseEntry@1002 : Record "Warehouse Entry";
      ProdOrderLine@1003 : Record "Prod. Order Line";
      OutputBase@1004 : Decimal;
    BEGIN
      Item.GET(ProdOrderComp."Item No.");
      if Item."Replenishment System" = Item."Replenishment System"::Purchase then
        exit(0);

      ProdOrderLine.SETRANGE(Status,ProdOrderComp.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderComp."Prod. Order No.");
      ProdOrderLine.SETRANGE("Item No.",ProdOrderComp."Item No.");
      ProdOrderLine.SETRANGE("Planning Level Code",ProdOrderComp."Planning Level Code");
      if ProdOrderLine.FINDFIRST then begin
        WhseEntry.SetSourceFilter(
          DATABASE::"Item Journal Line",5,ProdOrderLine."Prod. Order No.",ProdOrderLine."Line No.",true); // Output Journal
        WhseEntry.SETRANGE("Reference No.",ProdOrderLine."Prod. Order No.");
        WhseEntry.SETRANGE("Item No.",ProdOrderLine."Item No.");
        WhseEntry.CALCSUMS(Quantity);
        OutputBase := WhseEntry.Quantity;
      end;

      exit(OutputBase);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesLineVerifyChange@20(VAR NewRecRef@1001 : RecordRef;VAR OldRecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterServiceLineVerifyChange@29(VAR NewRecRef@1000 : RecordRef;VAR OldRecRef@1001 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPurchaseLineVerifyChange@21(VAR NewPurchLine@1000 : Record "Purchase Line";VAR OldPurchLine@1001 : Record "Purchase Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterProdComponentVerifyChange@22(VAR NewRecRef@1001 : RecordRef;VAR OldRecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterProdOrderLineVerifyChange@23(VAR NewProdOrderLine@1000 : Record "Prod. Order Line";VAR OldProdOrderLine@1001 : Record "Prod. Order Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterItemLineVerifyChange@24(VAR NewItemJnlLine@1000 : Record "Item Journal Line";VAR OldItemJnlLine@1001 : Record "Item Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransLineVerifyChange@33(VAR NewTransLine@1000 : Record "Transfer Line";VAR OldTransLine@1001 : Record "Transfer Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssemblyLineVerifyChange@37(VAR NewRecRef@1001 : RecordRef;VAR OldRecRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesLineDelete@25(VAR SalesLine@1000 : Record "Sales Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterServiceLineDelete@26(VAR ServiceLine@1000 : Record "Service Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterPurchaseLineDelete@27(VAR PurchaseLine@1000 : Record "Purchase Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterTransLineDelete@34(VAR TransferLine@1000 : Record "Transfer Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterProdComponentDelete@35(VAR ProdOrderComp@1000 : Record "Prod. Order Component");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterProdOrderLineDelete@36(VAR ProdOrderLine@1000 : Record "Prod. Order Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAssemblyLineDelete@38(VAR AssemblyLine@1000 : Record "Assembly Line");
    BEGIN
    END;

    BEGIN
    END.
  }
}

