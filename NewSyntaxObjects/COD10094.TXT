OBJECT Codeunit 10094 Export EFT (ACH)
{
  OBJECT-PROPERTIES
  {
    Date=20180425D;
    Time=160929.3T;
    Modified=true;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      BankAccount@1020025 : Record "Bank Account";
      CompanyInformation@1020024 : Record "Company Information";
      TempEraseFileNameValueBuffer@1020050 : TEMPORARY Record "Name/Value Buffer";
      FileManagement@1020023 : Codeunit "File Management";
      EFTValues@1020007 : Codeunit "EFT Values";
      BatchHashTotal@1020008 : Decimal;
      FileHashTotal@1020000 : Decimal;
      RecordLength@1020018 : Integer;
      BlockingFactor@1020017 : Integer;
      BlockCount@1020011 : Integer;
      FileName@1020006 : Text;
      FileDate@1020003 : Date;
      FileTime@1020002 : Time;
      ModifierValues@1020001 : ARRAY [26] OF Code[1];
      IsNotValidErr@1020045 : TextConst 'ENU=The specified transit number is not valid.';
      AlreadyExistsErr@1020043 : TextConst 'ENU=The file already exists. Check the "Last E-Pay Export File Name" field in the bank account.';
      VendorBankAccErr@1020038 : TextConst 'ENU=The vendor has no bank account setup for electronic payments.';
      VendorMoreThanOneBankAccErr@1020037 : TextConst 'ENU=The vendor has more than one bank account setup for electronic payments.';
      CustomerBankAccErr@1020036 : TextConst 'ENU=The customer has no bank account setup for electronic payments.';
      CustomerMoreThanOneBankAccErr@1020035 : TextConst 'ENU=The customer has more than one bank account setup for electronic payments.';
      ReferErr@1020028 : TextConst 'ENU=Either Account type or balance account type must refer to either a vendor or a customer for an electronic payment.';
      IsBlockedErr@1020027 : TextConst 'ENU=Account type is blocked for processing.';
      PrivacyBlockedErr@1234567 : TextConst 'ENU=Account type is blocked for privacy.';
      ZipDownloadTxt@1020051 : TextConst 'ENU=AllReports.zip';
      PathLengthErr@1020052 : TextConst '@@@=%1: a file name, generated by the system;ENU=The file name is too long and cannot be used.';

    PROCEDURE StartExportFile@6(BankAccountNo@1000 : Code[20];ReferenceCode@1001 : Code[10];DataExchEntryNo@1020001 : Integer);
    VAR
      ACHUSHeader@1020000 : Record "ACH US Header";
      i@1003 : Integer;
      BankName@1020002 : Text[50];
    BEGIN
      BuildIDModifier(ModifierValues);

      CompanyInformation.GET;
      CompanyInformation.TESTFIELD("Federal ID No.");

      with BankAccount do begin
        LOCKTABLE;
        GET(BankAccountNo);
        TESTFIELD("Export Format","Export Format"::US);
        TESTFIELD("Transit No.");
        if not CheckDigit("Transit No.") then
          ERROR(IsNotValidErr);
        TESTFIELD("Last E-Pay Export File Name");
        TESTFIELD(Blocked,false);
        BankName := Name;
        FileName := FileManagement.ServerTempFileName('');

        if "Last ACH File ID Modifier" = '' then
          "Last ACH File ID Modifier" := '1'
        else begin
          i := 1;
          while (i < ARRAYLEN(ModifierValues)) and
                ("Last ACH File ID Modifier" <> ModifierValues[i])
          do
            i := i + 1;
          if i = ARRAYLEN(ModifierValues) then
            i := 1
          else
            i := i + 1;
          "Last ACH File ID Modifier" := ModifierValues[i];
        end;
        "Last E-Pay File Creation No." := "Last E-Pay File Creation No." + 1;
        MODIFY;

        if EXISTS(FileName) then
          ERROR(AlreadyExistsErr);

        FileDate := TODAY;
        FileTime := TIME;
        EFTValues.SetNoOfRec(0);
        EFTValues.SetTotalFileDebit(0);
        EFTValues.SetTotalFileCredit(0);
        EFTValues.SetFileEntryAddendaCount(0);
        EFTValues.SetBatchCount(0);
        EFTValues.SetBatchNo(0);
        BlockingFactor := 10;
        RecordLength := 94;

        ACHUSHeader.GET(DataExchEntryNo);
        ACHUSHeader."File Record Type" := 1;
        ACHUSHeader."Priority Code" := 1;
        ACHUSHeader."Transit Routing Number" := "Transit No.";
        ACHUSHeader."Federal ID No." := DELCHR(CompanyInformation."Federal ID No.",'=',' .,-');
        ACHUSHeader."File Creation Date" := FileDate;
        ACHUSHeader."File Creation Time" := FileTime;
        ACHUSHeader."File ID Modifier" := "Last ACH File ID Modifier";
        ACHUSHeader."Record Size" := RecordLength;
        ACHUSHeader."Blocking Factor" := BlockingFactor;
        ACHUSHeader."Format Code" := 1;
        ACHUSHeader."Company Name" := CompanyInformation.Name;
        ACHUSHeader.Reference := ReferenceCode;
        ACHUSHeader."Bank Name" := BankName;
        ACHUSHeader.MODIFY;
      end;
    END;

    PROCEDURE StartExportBatch@7(SourceCode@1002 : Code[10];SettleDate@1003 : Date;DataExchEntryNo@1020001 : Integer);
    VAR
      ACHUSHeader@1020000 : Record "ACH US Header";
    BEGIN
      EFTValues.SetBatchNo(EFTValues.GetBatchNo + 1);
      BatchHashTotal := 0;
      EFTValues.SetBatchHashTotal(BatchHashTotal);
      EFTValues.SetTotalBatchDebit(0);
      EFTValues.SetTotalBatchCredit(0);
      EFTValues.SetEntryAddendaCount(0);
      EFTValues.SetTraceNo(0);

      ACHUSHeader.GET(DataExchEntryNo);
      ACHUSHeader."Batch Record Type" := 5;
      ACHUSHeader."Service Class Code" := '';
      ACHUSHeader."Company Name" := CompanyInformation.Name;
      ACHUSHeader."Federal ID No." := DELCHR(CompanyInformation."Federal ID No.",'=',' .,-');
      ACHUSHeader."Standard Class Code" := '';
      ACHUSHeader."Company Entry Description" := SourceCode;
      ACHUSHeader."Payment Date" := FORMAT(WORKDATE,0,'<Year><Month,2><Day,2>');
      ACHUSHeader."Company Descriptive Date" := WORKDATE;
      ACHUSHeader."Effective Date" := SettleDate;
      ACHUSHeader."Originator Status Code" := 1;
      ACHUSHeader."Transit Routing Number" := BankAccount."Transit No.";
      ACHUSHeader."Batch Number" := EFTValues.GetBatchNo;
      ACHUSHeader.MODIFY;
    END;

    PROCEDURE ExportOffSettingDebit@1240470000(DataExchEntryNo@1020002 : Integer) : Code[30];
    VAR
      ACHUSDetail@1020000 : Record "ACH US Detail";
    BEGIN
      EFTValues.SetTraceNo(EFTValues.GetTraceNo + 1);

      ACHUSDetail.GET(DataExchEntryNo);
      ACHUSDetail."Record Type" := 6;
      ACHUSDetail."Transaction Code" := 27;
      ACHUSDetail."Payee Transit Routing Number" := BankAccount."Transit No.";
      ACHUSDetail."Payee Bank Account Number" := DELCHR(BankAccount."Bank Account No.",'=',' ');
      ACHUSDetail."Payment Amount" := EFTValues.GetTotalBatchCredit;
      ACHUSDetail."Federal ID No." := DELCHR(CompanyInformation."Federal ID No.",'=',' .,-');
      ACHUSDetail."Payee Name" := CompanyInformation.Name;
      ACHUSDetail."Addenda Record Indicator" := 0;
      ACHUSDetail."Trace Number" := GenerateTraceNoCode(EFTValues.GetTraceNo,BankAccount."Transit No.");
      ACHUSDetail.MODIFY;

      EFTValues.SetEntryAddendaCount(EFTValues.GetEntryAddendaCount + 1);
      IncrementHashTotal(BatchHashTotal,MakeHash(COPYSTR(BankAccount."Transit No.",1,8)));
      EFTValues.SetBatchHashTotal(BatchHashTotal);
      EFTValues.SetTotalBatchDebit(EFTValues.GetTotalBatchCredit);

      exit(GenerateFullTraceNoCode(EFTValues.GetTraceNo,BankAccount."Transit No."));
    END;

    PROCEDURE ExportElectronicPayment@17(VAR TempEFTExportWorkset@1020000 : TEMPORARY Record "EFT Export Workset";PaymentAmount@1001 : Decimal;DataExchEntryNo@1020002 : Integer;DataExchLineDefCode@1020004 : Code[20]) : Code[30];
    VAR
      Vendor@1002 : Record Vendor;
      VendorBankAccount@1003 : Record "Vendor Bank Account";
      Customer@1004 : Record Customer;
      CustomerBankAccount@1005 : Record "Customer Bank Account";
      ACHUSDetail@1020001 : Record "ACH US Detail";
      AcctType@1006 : Text[1];
      AcctNo@1007 : Code[20];
      AcctName@1008 : Text[16];
      BankAcctNo@1009 : Text[30];
      TransitNo@1010 : Text[20];
      DemandCredit@1012 : Boolean;
    BEGIN
      // NOTE:  If PaymentAmount is Positive, then we are Receiving money.
      // If PaymentAmount is Negative, then we are Sending money.
      if PaymentAmount = 0 then
        exit('');
      DemandCredit := (PaymentAmount < 0);
      PaymentAmount := ABS(PaymentAmount);

      with TempEFTExportWorkset do begin
        if "Account Type" = "Account Type"::Vendor then begin
          AcctType := 'V';
          AcctNo := "Account No.";
        end else
          if "Account Type" = "Account Type"::Customer then begin
            AcctType := 'C';
            AcctNo := "Account No.";
          end else
            if "Bal. Account Type" = "Bal. Account Type"::Vendor then begin
              AcctType := 'V';
              AcctNo := "Bal. Account No.";
            end else
              if "Bal. Account Type" = "Bal. Account Type"::Customer then begin
                AcctType := 'C';
                AcctNo := "Bal. Account No.";
              end else
                ERROR(ReferErr);

        if AcctType = 'V' then begin
          Vendor.GET(AcctNo);
          Vendor.TESTFIELD(Blocked,Vendor.Blocked::" ");
          Vendor.TESTFIELD("Privacy Blocked",false);
          AcctName := COPYSTR(Vendor.Name,1,MAXSTRLEN(AcctName));

          VendorBankAccount.SETRANGE("Vendor No.",AcctNo);
          VendorBankAccount.SETRANGE("Use for Electronic Payments",true);
          VendorBankAccount.FINDFIRST;

          if VendorBankAccount.COUNT < 1 then
            ERROR(VendorBankAccErr);
          if VendorBankAccount.COUNT > 1 then
            ERROR(VendorMoreThanOneBankAccErr);

          if not CheckDigit(VendorBankAccount."Transit No.") then
            ERROR(IsNotValidErr);

          VendorBankAccount.TESTFIELD("Bank Account No.");
          TransitNo := VendorBankAccount."Transit No.";
          BankAcctNo := VendorBankAccount."Bank Account No.";
        end else
          if AcctType = 'C' then begin
            Customer.GET(AcctNo);
            if Customer."Privacy Blocked" then
              ERROR(IsBlockedErr);
            if Customer.Blocked in [Customer.Blocked::All] then
              ERROR(PrivacyBlockedErr);
            AcctName := COPYSTR(Customer.Name,1,MAXSTRLEN(AcctName));
            CustomerBankAccount.SETRANGE("Customer No.",AcctNo);
            CustomerBankAccount.SETRANGE("Use for Electronic Payments",true);
            CustomerBankAccount.FINDFIRST;

            if CustomerBankAccount.COUNT < 1 then
              ERROR(CustomerBankAccErr);
            if CustomerBankAccount.COUNT > 1 then
              ERROR(CustomerMoreThanOneBankAccErr);

            if not CheckDigit(CustomerBankAccount."Transit No.") then
              ERROR(IsNotValidErr);

            CustomerBankAccount.TESTFIELD("Bank Account No.");
            TransitNo := CustomerBankAccount."Transit No.";
            BankAcctNo := CustomerBankAccount."Bank Account No.";
          end;

        EFTValues.SetTraceNo(EFTValues.GetTraceNo + 1);

        EFTValues.SetEntryAddendaCount(EFTValues.GetEntryAddendaCount + 1);
        if DemandCredit then
          EFTValues.SetTotalBatchCredit(EFTValues.GetTotalBatchCredit + PaymentAmount)
        else
          EFTValues.SetTotalBatchDebit(EFTValues.GetTotalBatchDebit + PaymentAmount);

        IncrementHashTotal(BatchHashTotal,MakeHash(COPYSTR(TransitNo,1,8)));
        EFTValues.SetBatchHashTotal(BatchHashTotal);
      end;

      ACHUSDetail.GET(DataExchEntryNo,DataExchLineDefCode);
      ACHUSDetail."Record Type" := 6;
      if DemandCredit then
        ACHUSDetail."Transaction Code" := 22
      else
        ACHUSDetail."Transaction Code" := 27;
      ACHUSDetail."Payee Transit Routing Number" := TransitNo;
      ACHUSDetail."Payee Bank Account Number" := DELCHR(BankAcctNo,'=',' ');
      ACHUSDetail."Payment Amount" := PaymentAmount;
      ACHUSDetail."Payee ID/Cross Reference Numbe" := AcctNo;
      ACHUSDetail."Addenda Record Indicator" := 0;
      ACHUSDetail."Payee Name" := AcctName;
      ACHUSDetail."Discretionary Data" := AcctType;
      ACHUSDetail."Trace Number" := GenerateTraceNoCode(EFTValues.GetTraceNo,BankAccount."Transit No.");
      ACHUSDetail.MODIFY;

      TempEFTExportWorkset.TraceNumber := GenerateTraceNoCode(EFTValues.GetTraceNo,BankAccount."Transit No.");

      exit(GenerateFullTraceNoCode(EFTValues.GetTraceNo,BankAccount."Transit No."));
    END;

    PROCEDURE EndExportBatch@9(DataExchEntryNo@1020002 : Integer);
    VAR
      ACHUSFooter@1020000 : Record "ACH US Footer";
    BEGIN
      EFTValues.SetBatchCount(EFTValues.GetBatchCount + 1);
      IncrementHashTotal(FileHashTotal,EFTValues.GetBatchHashTotal);
      EFTValues.SetFileHashTotal(FileHashTotal);
      EFTValues.SetTotalFileDebit(EFTValues.GetTotalFileDebit + EFTValues.GetTotalBatchDebit);
      EFTValues.SetTotalFileCredit(EFTValues.GetTotalFileCredit + EFTValues.GetTotalBatchCredit);
      EFTValues.SetFileEntryAddendaCount(EFTValues.GetFileEntryAddendaCount + EFTValues.GetEntryAddendaCount);

      ACHUSFooter.GET(DataExchEntryNo);
      ACHUSFooter."Batch Record Type" := 8;
      ACHUSFooter."Batch Count" := EFTValues.GetBatchCount;
      ACHUSFooter."Service Class Code" := '';
      ACHUSFooter."Total Batch Credit Amount" := EFTValues.GetTotalBatchCredit;
      ACHUSFooter."Total Batch Debit Amount" := EFTValues.GetTotalBatchDebit;
      ACHUSFooter."Federal ID No." := DELCHR(CompanyInformation."Federal ID No.",'=',' .,-');
      ACHUSFooter."Transit Routing Number" := BankAccount."Transit No.";
      ACHUSFooter."Batch Number" := EFTValues.GetBatchNo;
      ACHUSFooter."Entry Addenda Count" := EFTValues.GetFileEntryAddendaCount;
      ACHUSFooter."Batch Hash Total" := BatchHashTotal;
      ACHUSFooter.MODIFY;
    END;

    PROCEDURE EndExportFile@10(DataExchEntryNo@1020001 : Integer) : Boolean;
    VAR
      ACHUSFooter@1020002 : Record "ACH US Footer";
    BEGIN
      BlockCount := (EFTValues.GetNoOfRec + 1) div BlockingFactor;
      if (EFTValues.GetNoOfRec + 1) mod BlockingFactor <> 0 then
        BlockCount := BlockCount + 1;

      ACHUSFooter.GET(DataExchEntryNo);
      ACHUSFooter."File Record Type" := 9;
      ACHUSFooter."Batch Count" := EFTValues.GetBatchCount;
      ACHUSFooter."Block Count" := BlockCount;
      ACHUSFooter."Entry Addenda Count" := EFTValues.GetFileEntryAddendaCount;
      ACHUSFooter."File Hash Total" := EFTValues.GetFileHashTotal;
      ACHUSFooter."Total File Debit Amount" := EFTValues.GetTotalFileDebit;
      ACHUSFooter."Total File Credit Amount" := EFTValues.GetTotalFileCredit;
      ACHUSFooter.MODIFY;

      exit(true);
    END;

    LOCAL PROCEDURE GenerateFullTraceNoCode@14(TraceNo@1000 : Integer;BankTransitNo@1020000 : Text[20]) : Code[30];
    VAR
      TraceCode@1001 : Text[250];
    BEGIN
      TraceCode := '';
      TraceCode := FORMAT(FileDate,0,'<Year><Month,2><Day,2>') + BankAccount."Last ACH File ID Modifier" +
        FORMAT(EFTValues.GetBatchNo) + FORMAT(GenerateTraceNoCode(TraceNo,BankTransitNo));
      exit(TraceCode);
    END;

    PROCEDURE GenerateTraceNoCode@15(TraceNo@1000 : Integer;BankTransitNo@1020000 : Text[20]) : Code[15];
    VAR
      StringConversionManagement@1020003 : Codeunit StringConversionManagement;
      TraceCode@1001 : Text[250];
      TempTraceNo@1020002 : Text[250];
      Justification@1020001 : 'Right,Left';
    BEGIN
      TraceCode := '';
      TempTraceNo := StringConversionManagement.GetPaddedString(FORMAT(TraceNo),7,'0',Justification::Right);
      TraceCode := COPYSTR(BankTransitNo,1,8) + COPYSTR(TempTraceNo,1,7);
      exit(TraceCode);
    END;

    PROCEDURE CheckDigit@2(DigitString@1000 : Code[20]) : Boolean;
    VAR
      Weight@1001 : Code[8];
      Digit@1002 : Integer;
      I@1003 : Integer;
      Digit1@1004 : Integer;
      Digit2@1005 : Integer;
      CheckChar@1006 : Code[1];
    BEGIN
      Weight := '37137137';
      Digit := 0;

      if STRLEN(DigitString) <= STRLEN(Weight) then
        exit(false);

      for I := 1 to STRLEN(Weight) do begin
        EVALUATE(Digit1,COPYSTR(DigitString,I,1));
        EVALUATE(Digit2,COPYSTR(Weight,I,1));
        Digit := Digit + Digit1 * Digit2;
      end;

      Digit := 10 - Digit mod 10;
      if Digit = 10 then
        CheckChar := '0'
      else
        CheckChar := FORMAT(Digit);
      exit(DigitString[STRLEN(Weight) + 1] = CheckChar[1]);
    END;

    LOCAL PROCEDURE IncrementHashTotal@13(VAR HashTotal@1000 : Decimal;HashIncrement@1001 : Decimal) : Decimal;
    VAR
      SubTotal@1002 : Decimal;
    BEGIN
      SubTotal := HashTotal + HashIncrement;
      if SubTotal < 10000000000.0 then
        HashTotal := SubTotal
      else
        HashTotal := SubTotal - 10000000000.0;
    END;

    LOCAL PROCEDURE MakeHash@21(InputString@1000 : Text[30]) : Decimal;
    VAR
      HashAmt@1001 : Decimal;
    BEGIN
      InputString := DELCHR(InputString,'=','.,- ');
      if EVALUATE(HashAmt,InputString) then
        exit(HashAmt);

      exit(0);
    END;

    PROCEDURE BuildIDModifier@5(VAR ModifierVal@1020000 : ARRAY [26] OF Code[1]);
    BEGIN
      ModifierVal[1] := 'A';
      ModifierVal[2] := 'B';
      ModifierVal[3] := 'C';
      ModifierVal[4] := 'D';
      ModifierVal[5] := 'E';
      ModifierVal[6] := 'F';
      ModifierVal[7] := 'G';
      ModifierVal[8] := 'H';
      ModifierVal[9] := 'I';
      ModifierVal[10] := 'J';
      ModifierVal[11] := 'K';
      ModifierVal[12] := 'L';
      ModifierVal[13] := 'M';
      ModifierVal[14] := 'N';
      ModifierVal[15] := 'O';
      ModifierVal[16] := 'P';
      ModifierVal[17] := 'Q';
      ModifierVal[18] := 'R';
      ModifierVal[19] := 'S';
      ModifierVal[20] := 'T';
      ModifierVal[21] := 'U';
      ModifierVal[22] := 'V';
      ModifierVal[23] := 'W';
      ModifierVal[24] := 'X';
      ModifierVal[25] := 'Y';
      ModifierVal[26] := 'Z';
    END;

    PROCEDURE DownloadWebclientZip@1020000(VAR TempNameValueBuffer@1020000 : TEMPORARY Record "Name/Value Buffer";ZipFileName@1020001 : Text;VAR FileManagementUnit@1020002 : Codeunit "File Management");
    BEGIN
      // Download the .zip file containing the reports if one was generated (usually from being on the web client)
      if (ZipFileName <> '') and TempNameValueBuffer.FINDSET then
        // If there's a single file, download it directly instead of the zip file
        if TempNameValueBuffer.COUNT = 1 then
          FileManagementUnit.DownloadHandler(TempNameValueBuffer.Value,'','','',TempNameValueBuffer.Name)
        else begin
          repeat
            FileManagementUnit.AddFileToZipArchive(TempNameValueBuffer.Value,TempNameValueBuffer.Name);
            TempEraseFileNameValueBuffer.AddNewEntry(TempNameValueBuffer.Value,'');
          until TempNameValueBuffer.NEXT = 0;
          FileManagementUnit.CloseZipArchive;
          FileManagementUnit.DownloadHandler(ZipFileName,'','','',ZipDownloadTxt);
        end;

      CleanupTempFiles;
    END;

    PROCEDURE AddFileToClientZip@82(TempFileName@1000 : Text;ClientFileName@1001 : Text;VAR TempNameValueBuffer@1020000 : TEMPORARY Record "Name/Value Buffer";VAR ZipFileName@1020001 : Text;VAR FileManagementUnit@1020002 : Codeunit "File Management");
    BEGIN
      if STRLEN(TempFileName) > 250 then
        ERROR(PathLengthErr);

      if STRLEN(ClientFileName) > 250 then
        ERROR(PathLengthErr);

      // Ensure we have a zip file object
      if ZipFileName = '' then
        ZipFileName := FileManagementUnit.CreateZipArchiveObject;

      TempNameValueBuffer.AddNewEntry(COPYSTR(ClientFileName,1,250),COPYSTR(TempFileName,1,250));
    END;

    LOCAL PROCEDURE CleanupTempFiles@1020001();
    VAR
      DeleteError@1000 : Boolean;
    BEGIN
      // Sometimes file handles are kept by .NET - we try to delete what we can.
      if TempEraseFileNameValueBuffer.FINDSET then
        repeat
          if not TryDeleteFile(TempEraseFileNameValueBuffer.Name) then
            DeleteError := true;
        until TempEraseFileNameValueBuffer.NEXT = 0;

      if DeleteError then
        ERROR('');
    END;

    [TryFunction]
    LOCAL PROCEDURE TryDeleteFile@1020002(FileName@1000 : Text);
    BEGIN
      FileManagement.DeleteServerFile(FileName);
    END;

    BEGIN
    END.
  }
}

